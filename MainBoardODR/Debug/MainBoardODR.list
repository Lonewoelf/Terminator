
MainBoardODR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007abc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007c50  08007c50  00017c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f00  08007f00  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08007f00  08007f00  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f00  08007f00  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000009c  08007fa4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08007fa4  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014701  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a3c  00000000  00000000  000347cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00037210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f67c  00000000  00000000  00039288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb25  00000000  00000000  00058904  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b319d  00000000  00000000  00067429  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a5c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005150  00000000  00000000  0011a644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c34 	.word	0x08007c34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08007c34 	.word	0x08007c34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <getBumperStatus>:
 *      Author: Madita
 */
#include "bumper.h"
#include "main.h"

BUMPER_STATUS getBumperStatus(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, BUMPER_Pin) == GPIO_PIN_SET){
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f002 fbc8 	bl	80033ac <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d101      	bne.n	8000c26 <getBumperStatus+0x1a>
		return BUMPER_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <getBumperStatus+0x1c>
	}
	return BUMPER_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c4e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d013      	beq.n	8000c82 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c5e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c62:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c6a:	e000      	b.n	8000c6e <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c6c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e009      	b.n	8000cba <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60ba      	str	r2, [r7, #8]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ffc7 	bl	8000c42 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dbf1      	blt.n	8000ca6 <_write+0x16>
	return len;
 8000cc2:	687b      	ldr	r3, [r7, #4]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f001 f87f 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f821 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f000 f991 	bl	8001000 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cde:	f000 f87f 	bl	8000de0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000ce2:	f000 f8bd 	bl	8000e60 <MX_RTC_Init>
  MX_TIM1_Init();
 8000ce6:	f000 f8e1 	bl	8000eac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	BUMPER_STATUS bumper = BUMPER_NONE;
 8000cea:	23ff      	movs	r3, #255	; 0xff
 8000cec:	71fb      	strb	r3, [r7, #7]

	initSensors();
 8000cee:	f000 fd15 	bl	800171c <initSensors>
	initMotors();
 8000cf2:	f000 fa49 	bl	8001188 <initMotors>
	demoMotors();
 8000cf6:	f000 fcc5 	bl	8001684 <demoMotors>
 
   /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		bumper = getBumperStatus();
 8000cfa:	f7ff ff87 	bl	8000c0c <getBumperStatus>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
		printf("bumper %d\n", bumper);
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <main+0x4c>)
 8000d0a:	f005 f857 	bl	8005dbc <iprintf>
		HAL_Delay(1000);
 8000d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d12:	f001 f8c5 	bl	8001ea0 <HAL_Delay>
		bumper = getBumperStatus();
 8000d16:	e7f0      	b.n	8000cfa <main+0x2e>
 8000d18:	08007c50 	.word	0x08007c50

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d26:	2228      	movs	r2, #40	; 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 f83e 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d52:	230a      	movs	r3, #10
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2300      	movs	r3, #0
 8000d68:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d6a:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fc87 	bl	8003688 <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d80:	f000 f9fa 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	230f      	movs	r3, #15
 8000d86:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fb79 	bl	8004498 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dac:	f000 f9e4 	bl	8001178 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <SystemClock_Config+0xc0>)
 8000db2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fd4d 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000dd0:	f000 f9d2 	bl	8001178 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3758      	adds	r7, #88	; 0x58
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	00011020 	.word	0x00011020

08000de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 46;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df2:	222e      	movs	r2, #46	; 0x2e
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e1c:	f002 fb0e 	bl	800343c <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 f9a7 	bl	8001178 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e2e:	f002 fb94 	bl	800355a <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 f99e 	bl	8001178 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e40:	f002 fbd6 	bl	80035f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f995 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000128 	.word	0x20000128
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	2000090e 	.word	0x2000090e

08000e60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <MX_RTC_Init+0x48>)
 8000e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e72:	227f      	movs	r2, #127	; 0x7f
 8000e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e78:	22ff      	movs	r2, #255	; 0xff
 8000e7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_RTC_Init+0x44>)
 8000e90:	f003 fe1e 	bl	8004ad0 <HAL_RTC_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000e9a:	f000 f96d 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000204 	.word	0x20000204
 8000ea8:	40002800 	.word	0x40002800

08000eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	222c      	movs	r2, #44	; 0x2c
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 ff60 	bl	8005dac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eec:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000eee:	4a43      	ldr	r2, [pc, #268]	; (8000ffc <MX_TIM1_Init+0x150>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48;
 8000ef2:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000ef4:	2230      	movs	r2, #48	; 0x30
 8000ef6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6500;
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f00:	f641 1264 	movw	r2, #6500	; 0x1964
 8000f04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b39      	ldr	r3, [pc, #228]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f18:	4837      	ldr	r0, [pc, #220]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f1a:	f003 febe 	bl	8004c9a <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f24:	f000 f928 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f32:	4619      	mov	r1, r3
 8000f34:	4830      	ldr	r0, [pc, #192]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f36:	f004 f971 	bl	800521c <HAL_TIM_ConfigClockSource>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f40:	f000 f91a 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f44:	482c      	ldr	r0, [pc, #176]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f46:	f003 fefd 	bl	8004d44 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f50:	f000 f912 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f68:	f004 fdf2 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f72:	f000 f901 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f76:	2360      	movs	r3, #96	; 0x60
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000f9c:	f004 f826 	bl	8004fec <HAL_TIM_PWM_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fa6:	f000 f8e7 	bl	8001178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000fe0:	f004 fe24 	bl	8005c2c <HAL_TIMEx_ConfigBreakDeadTime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000fea:	f000 f8c5 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3768      	adds	r7, #104	; 0x68
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000224 	.word	0x20000224
 8000ffc:	40012c00 	.word	0x40012c00

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <MX_GPIO_Init+0x168>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a53      	ldr	r2, [pc, #332]	; (8001168 <MX_GPIO_Init+0x168>)
 800101c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b51      	ldr	r3, [pc, #324]	; (8001168 <MX_GPIO_Init+0x168>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <MX_GPIO_Init+0x168>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <MX_GPIO_Init+0x168>)
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_GPIO_Init+0x168>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b48      	ldr	r3, [pc, #288]	; (8001168 <MX_GPIO_Init+0x168>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a47      	ldr	r2, [pc, #284]	; (8001168 <MX_GPIO_Init+0x168>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b45      	ldr	r3, [pc, #276]	; (8001168 <MX_GPIO_Init+0x168>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 800105e:	2200      	movs	r2, #0
 8001060:	f640 410e 	movw	r1, #3086	; 0xc0e
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f002 f9b8 	bl	80033dc <HAL_GPIO_WritePin>
                          |MOTOR_IN_3_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_IN_2_1_GPIO_Port, MOTOR_IN_2_1_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2120      	movs	r1, #32
 8001070:	483e      	ldr	r0, [pc, #248]	; (800116c <MX_GPIO_Init+0x16c>)
 8001072:	f002 f9b3 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_IN_1_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_1_1_Pin;
 8001076:	2302      	movs	r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_IN_1_1_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	4839      	ldr	r0, [pc, #228]	; (8001170 <MX_GPIO_Init+0x170>)
 800108a:	f002 f81d 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_SELECT_2_Pin MUX_SELECT_1_Pin MUX_SELECT_3_Pin MOTOR_IN_3_2_Pin 
                           MOTOR_IN_3_1_Pin */
  GPIO_InitStruct.Pin = MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 800108e:	f640 430e 	movw	r3, #3086	; 0xc0e
 8001092:	60fb      	str	r3, [r7, #12]
                          |MOTOR_IN_3_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f002 f80d 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_B3_Pin ENCODER_A2_Pin ENCODER_B2_Pin ENCODER_A3_Pin 
                           STATUS_Pin */
  GPIO_InitStruct.Pin = ENCODER_B3_Pin|ENCODER_A2_Pin|ENCODER_B2_Pin|ENCODER_A3_Pin 
 80010ae:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80010b2:	60fb      	str	r3, [r7, #12]
                          |STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f001 ffff 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A1_Pin ENCODER_B1_Pin */
  GPIO_InitStruct.Pin = ENCODER_A1_Pin|ENCODER_B1_Pin;
 80010ca:	2303      	movs	r3, #3
 80010cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x16c>)
 80010de:	f001 fff3 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUMPER_Pin */
  GPIO_InitStruct.Pin = BUMPER_Pin;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0x174>)
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUMPER_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f001 ffe5 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN_1_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_1_2_Pin;
 80010fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_IN_1_2_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f001 ffd7 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN_2_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_2_2_Pin;
 800111a:	2310      	movs	r3, #16
 800111c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_IN_2_2_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <MX_GPIO_Init+0x16c>)
 800112e:	f001 ffcb 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_IN_2_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_2_1_Pin;
 8001132:	2320      	movs	r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_IN_2_1_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	4808      	ldr	r0, [pc, #32]	; (800116c <MX_GPIO_Init+0x16c>)
 800114a:	f001 ffbd 	bl	80030c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2101      	movs	r1, #1
 8001152:	2028      	movs	r0, #40	; 0x28
 8001154:	f001 ff81 	bl	800305a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001158:	2028      	movs	r0, #40	; 0x28
 800115a:	f001 ff9a 	bl	8003092 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400
 8001170:	48001400 	.word	0x48001400
 8001174:	10210000 	.word	0x10210000

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	//
	//		if (buffer == 0) {
	//			HAL_I2C_Slave_Transmit(&hi2c1, buffer, 4, 1000);
	//		}
  /* USER CODE END Error_Handler_Debug */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <initMotors>:
		MOTOR_IN_2_1_Pin,
		MOTOR_IN_2_2_Pin,
		MOTOR_IN_3_1_Pin,
		MOTOR_IN_3_2_Pin};

void initMotors(){
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 800118c:	f000 f80e 	bl	80011ac <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <initMotors+0x1c>)
 8001192:	f003 fdad 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
	MX_TIM3_Init();
 8001196:	f000 f87b 	bl	8001290 <MX_TIM3_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <initMotors+0x20>)
 800119c:	f003 fda8 	bl	8004cf0 <HAL_TIM_Base_Start_IT>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000264 	.word	0x20000264
 80011a8:	20000174 	.word	0x20000174

080011ac <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <MX_TIM2_Init+0xe0>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <MX_TIM2_Init+0xe0>)
 80011e8:	2230      	movs	r2, #48	; 0x30
 80011ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_TIM2_Init+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_TIM2_Init+0xe0>)
 80011f4:	2264      	movs	r2, #100	; 0x64
 80011f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_TIM2_Init+0xe0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_TIM2_Init+0xe0>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001204:	4821      	ldr	r0, [pc, #132]	; (800128c <MX_TIM2_Init+0xe0>)
 8001206:	f003 fd48 	bl	8004c9a <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001210:	f7ff ffb2 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121e:	4619      	mov	r1, r3
 8001220:	481a      	ldr	r0, [pc, #104]	; (800128c <MX_TIM2_Init+0xe0>)
 8001222:	f003 fffb 	bl	800521c <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800122c:	f7ff ffa4 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_TIM2_Init+0xe0>)
 8001232:	f003 fd87 	bl	8004d44 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800123c:	f7ff ff9c 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <MX_TIM2_Init+0xe0>)
 8001250:	f004 fc7e 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800125a:	f7ff ff8d 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	; 0x60
 8001260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM2_Init+0xe0>)
 8001276:	f003 feb9 	bl	8004fec <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001280:	f7ff ff7a 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000264 	.word	0x20000264

08001290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012c4:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <MX_TIM3_Init+0xe4>)
 80012c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e8:	4821      	ldr	r0, [pc, #132]	; (8001370 <MX_TIM3_Init+0xe0>)
 80012ea:	f003 fcd6 	bl	8004c9a <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012f4:	f7ff ff40 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_TIM3_Init+0xe0>)
 8001306:	f003 ff89 	bl	800521c <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001310:	f7ff ff32 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001314:	4816      	ldr	r0, [pc, #88]	; (8001370 <MX_TIM3_Init+0xe0>)
 8001316:	f003 fd15 	bl	8004d44 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001320:	f7ff ff2a 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	480f      	ldr	r0, [pc, #60]	; (8001370 <MX_TIM3_Init+0xe0>)
 8001334:	f004 fc0c 	bl	8005b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800133e:	f7ff ff1b 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_TIM3_Init+0xe0>)
 800135a:	f003 fe47 	bl	8004fec <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001364:	f7ff ff08 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000174 	.word	0x20000174
 8001374:	40000400 	.word	0x40000400

08001378 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d136      	bne.n	80013f8 <HAL_TIM_PeriodElapsedCallback+0x80>
		pwmCounter++;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001394:	701a      	strb	r2, [r3, #0]

		if (pwmCounter > PWM_MAX) {
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d902      	bls.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			pwmCounter = 1;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
		}

		for (uint8_t pwmOutput = 0; pwmOutput < AMOUNT_OF_MOTOR_CHANNELS; pwmOutput++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e023      	b.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x7a>
			if (pwmCounter > pwm[pwmOutput]) {
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80013b4:	56d3      	ldrsb	r3, [r2, r3]
 80013b6:	4299      	cmp	r1, r3
 80013b8:	dd0c      	ble.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x5c>
				HAL_GPIO_WritePin(pwmPinOutBank[pwmOutput], pwmPinOut[pwmOutput], 0);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	2200      	movs	r2, #0
 80013cc:	4619      	mov	r1, r3
 80013ce:	f002 f805 	bl	80033dc <HAL_GPIO_WritePin>
 80013d2:	e00b      	b.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x74>
			} else {
				HAL_GPIO_WritePin(pwmPinOutBank[pwmOutput], pwmPinOut[pwmOutput], 1);
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80013d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80013e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4619      	mov	r1, r3
 80013e8:	f001 fff8 	bl	80033dc <HAL_GPIO_WritePin>
		for (uint8_t pwmOutput = 0; pwmOutput < AMOUNT_OF_MOTOR_CHANNELS; pwmOutput++){
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	3301      	adds	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d9d8      	bls.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x32>
	}

	if (htim->Instance == TIM3){
//TODO CREATE RAMP UP FUNCTION
	}
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000c4 	.word	0x200000c4
 8001404:	20000000 	.word	0x20000000
 8001408:	20000008 	.word	0x20000008
 800140c:	20000020 	.word	0x20000020

08001410 <moveRobot>:

void moveRobot(float OM, float Theta, float VxW, float VyW){
 8001410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	ed87 0a03 	vstr	s0, [r7, #12]
 800141c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001420:	ed87 1a01 	vstr	s2, [r7, #4]
 8001424:	edc7 1a00 	vstr	s3, [r7]
	float VxM = cos(Theta) * VxW + sin(Theta) * VyW;
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff f885 	bl	8000538 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	ec43 2b10 	vmov	d0, r2, r3
 8001436:	f005 fba7 	bl	8006b88 <cos>
 800143a:	ec59 8b10 	vmov	r8, r9, d0
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff f87a 	bl	8000538 <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4640      	mov	r0, r8
 800144a:	4649      	mov	r1, r9
 800144c:	f7ff f8cc 	bl	80005e8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4690      	mov	r8, r2
 8001456:	4699      	mov	r9, r3
 8001458:	68b8      	ldr	r0, [r7, #8]
 800145a:	f7ff f86d 	bl	8000538 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	ec43 2b10 	vmov	d0, r2, r3
 8001466:	f005 fbd3 	bl	8006c10 <sin>
 800146a:	ec5b ab10 	vmov	sl, fp, d0
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f7ff f862 	bl	8000538 <__aeabi_f2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4650      	mov	r0, sl
 800147a:	4659      	mov	r1, fp
 800147c:	f7ff f8b4 	bl	80005e8 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4640      	mov	r0, r8
 8001486:	4649      	mov	r1, r9
 8001488:	f7fe fef8 	bl	800027c <__adddf3>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb6a 	bl	8000b6c <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	617b      	str	r3, [r7, #20]
	float VyM = -sin(Theta) * VxW + cos(Theta) * VyW;
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f7ff f84b 	bl	8000538 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	ec43 2b10 	vmov	d0, r2, r3
 80014aa:	f005 fbb1 	bl	8006c10 <sin>
 80014ae:	ec53 2b10 	vmov	r2, r3, d0
 80014b2:	4614      	mov	r4, r2
 80014b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff f83d 	bl	8000538 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4620      	mov	r0, r4
 80014c4:	4629      	mov	r1, r5
 80014c6:	f7ff f88f 	bl	80005e8 <__aeabi_dmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	4625      	mov	r5, r4
 80014d0:	461c      	mov	r4, r3
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff f830 	bl	8000538 <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	ec43 2b10 	vmov	d0, r2, r3
 80014e0:	f005 fb52 	bl	8006b88 <cos>
 80014e4:	ec59 8b10 	vmov	r8, r9, d0
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f7ff f825 	bl	8000538 <__aeabi_f2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4640      	mov	r0, r8
 80014f4:	4649      	mov	r1, r9
 80014f6:	f7ff f877 	bl	80005e8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe febb 	bl	800027c <__adddf3>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	4618      	mov	r0, r3
 800150c:	4621      	mov	r1, r4
 800150e:	f7ff fb2d 	bl	8000b6c <__aeabi_d2f>
 8001512:	4603      	mov	r3, r0
 8001514:	613b      	str	r3, [r7, #16]

	V1Target = -VxM/(2.0*WHEEL_CENTER_RADIUS) -(sqrt(3.0)*VyM)/(2.0*WHEEL_CENTER_RADIUS) + WHEEL_CENTER_RADIUS*OM;
 8001516:	edd7 7a05 	vldr	s15, [r7, #20]
 800151a:	eef1 7a67 	vneg.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f808 	bl	8000538 <__aeabi_f2d>
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <moveRobot+0x260>)
 800152e:	f7ff f985 	bl	800083c <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	4625      	mov	r5, r4
 8001538:	461c      	mov	r4, r3
 800153a:	6938      	ldr	r0, [r7, #16]
 800153c:	f7fe fffc 	bl	8000538 <__aeabi_f2d>
 8001540:	a349      	add	r3, pc, #292	; (adr r3, 8001668 <moveRobot+0x258>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f84f 	bl	80005e8 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <moveRobot+0x260>)
 8001558:	f7ff f970 	bl	800083c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fe88 	bl	8000278 <__aeabi_dsub>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4625      	mov	r5, r4
 800156e:	461c      	mov	r4, r3
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7fe ffe1 	bl	8000538 <__aeabi_f2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <moveRobot+0x264>)
 800157c:	f7ff f834 	bl	80005e8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7fe fe78 	bl	800027c <__adddf3>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	4618      	mov	r0, r3
 8001592:	4621      	mov	r1, r4
 8001594:	f7ff faea 	bl	8000b6c <__aeabi_d2f>
 8001598:	4602      	mov	r2, r0
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <moveRobot+0x268>)
 800159c:	601a      	str	r2, [r3, #0]
	V2Target = VxM+WHEEL_CENTER_RADIUS*OM;
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7fe ffca 	bl	8000538 <__aeabi_f2d>
 80015a4:	4604      	mov	r4, r0
 80015a6:	460d      	mov	r5, r1
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7fe ffc5 	bl	8000538 <__aeabi_f2d>
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <moveRobot+0x264>)
 80015b4:	f7ff f818 	bl	80005e8 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe5c 	bl	800027c <__adddf3>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff face 	bl	8000b6c <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <moveRobot+0x26c>)
 80015d4:	601a      	str	r2, [r3, #0]
	V3Target = -VxM/(2.0*WHEEL_CENTER_RADIUS) +(sqrt(3.0)*VyM)/(2.0*WHEEL_CENTER_RADIUS) + WHEEL_CENTER_RADIUS*OM;
 80015d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015da:	eef1 7a67 	vneg.f32	s15, s15
 80015de:	ee17 3a90 	vmov	r3, s15
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffa8 	bl	8000538 <__aeabi_f2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <moveRobot+0x260>)
 80015ee:	f7ff f925 	bl	800083c <__aeabi_ddiv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	4625      	mov	r5, r4
 80015f8:	461c      	mov	r4, r3
 80015fa:	6938      	ldr	r0, [r7, #16]
 80015fc:	f7fe ff9c 	bl	8000538 <__aeabi_f2d>
 8001600:	a319      	add	r3, pc, #100	; (adr r3, 8001668 <moveRobot+0x258>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe ffef 	bl	80005e8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <moveRobot+0x260>)
 8001618:	f7ff f910 	bl	800083c <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe2a 	bl	800027c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4625      	mov	r5, r4
 800162e:	461c      	mov	r4, r3
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7fe ff81 	bl	8000538 <__aeabi_f2d>
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <moveRobot+0x264>)
 800163c:	f7fe ffd4 	bl	80005e8 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fe18 	bl	800027c <__adddf3>
 800164c:	4603      	mov	r3, r0
 800164e:	460c      	mov	r4, r1
 8001650:	4618      	mov	r0, r3
 8001652:	4621      	mov	r1, r4
 8001654:	f7ff fa8a 	bl	8000b6c <__aeabi_d2f>
 8001658:	4602      	mov	r2, r0
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <moveRobot+0x270>)
 800165c:	601a      	str	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001668:	e8584caa 	.word	0xe8584caa
 800166c:	3ffbb67a 	.word	0x3ffbb67a
 8001670:	406e0000 	.word	0x406e0000
 8001674:	405e0000 	.word	0x405e0000
 8001678:	200000b8 	.word	0x200000b8
 800167c:	200000bc 	.word	0x200000bc
 8001680:	200000c0 	.word	0x200000c0

08001684 <demoMotors>:

void demoMotors(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	moveRobot(0.0, 0.0, 50.0, 0.0);
 8001688:	eddf 1a21 	vldr	s3, [pc, #132]	; 8001710 <demoMotors+0x8c>
 800168c:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8001714 <demoMotors+0x90>
 8001690:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001710 <demoMotors+0x8c>
 8001694:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001710 <demoMotors+0x8c>
 8001698:	f7ff feba 	bl	8001410 <moveRobot>
	HAL_Delay(2000);
 800169c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016a0:	f000 fbfe 	bl	8001ea0 <HAL_Delay>
	moveRobot(0.0, 0.0, 0.0, 50.0);
 80016a4:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8001714 <demoMotors+0x90>
 80016a8:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001710 <demoMotors+0x8c>
 80016ac:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001710 <demoMotors+0x8c>
 80016b0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001710 <demoMotors+0x8c>
 80016b4:	f7ff feac 	bl	8001410 <moveRobot>
	HAL_Delay(2000);
 80016b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016bc:	f000 fbf0 	bl	8001ea0 <HAL_Delay>
	moveRobot(0.0, 0.0, -50.0, 0.0);
 80016c0:	eddf 1a13 	vldr	s3, [pc, #76]	; 8001710 <demoMotors+0x8c>
 80016c4:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001718 <demoMotors+0x94>
 80016c8:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001710 <demoMotors+0x8c>
 80016cc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001710 <demoMotors+0x8c>
 80016d0:	f7ff fe9e 	bl	8001410 <moveRobot>
	HAL_Delay(2000);
 80016d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016d8:	f000 fbe2 	bl	8001ea0 <HAL_Delay>
	moveRobot(0.0, 0.0, 0.0, -50.0);
 80016dc:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8001718 <demoMotors+0x94>
 80016e0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001710 <demoMotors+0x8c>
 80016e4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001710 <demoMotors+0x8c>
 80016e8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001710 <demoMotors+0x8c>
 80016ec:	f7ff fe90 	bl	8001410 <moveRobot>
	HAL_Delay(2000);
 80016f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016f4:	f000 fbd4 	bl	8001ea0 <HAL_Delay>
	moveRobot(0.0, 0.0, 0.0, 0.0);
 80016f8:	eddf 1a05 	vldr	s3, [pc, #20]	; 8001710 <demoMotors+0x8c>
 80016fc:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8001710 <demoMotors+0x8c>
 8001700:	eddf 0a03 	vldr	s1, [pc, #12]	; 8001710 <demoMotors+0x8c>
 8001704:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8001710 <demoMotors+0x8c>
 8001708:	f7ff fe82 	bl	8001410 <moveRobot>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	00000000 	.word	0x00000000
 8001714:	42480000 	.word	0x42480000
 8001718:	c2480000 	.word	0xc2480000

0800171c <initSensors>:
#include "sensors.h"


uint16_t sensorValues[AMOUNT_OF_SENSORS] = {0};

void initSensors(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	  MX_ADC1_Init();
 8001720:	f000 f804 	bl	800172c <MX_ADC1_Init>
	  MX_ADC2_Init();
 8001724:	f000 f872 	bl	800180c <MX_ADC2_Init>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001750:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001754:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001758:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800175c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176a:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_ADC1_Init+0xdc>)
 800176c:	2200      	movs	r2, #0
 800176e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001770:	4b25      	ldr	r3, [pc, #148]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <MX_ADC1_Init+0xdc>)
 800177a:	2200      	movs	r2, #0
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001780:	2201      	movs	r2, #1
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_ADC1_Init+0xdc>)
 800178c:	2201      	movs	r2, #1
 800178e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_ADC1_Init+0xdc>)
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_ADC1_Init+0xdc>)
 800179a:	2204      	movs	r2, #4
 800179c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_ADC1_Init+0xdc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_ADC1_Init+0xdc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017aa:	4817      	ldr	r0, [pc, #92]	; (8001808 <MX_ADC1_Init+0xdc>)
 80017ac:	f000 fbb8 	bl	8001f20 <HAL_ADC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017b6:	f7ff fcdf 	bl	8001178 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4810      	ldr	r0, [pc, #64]	; (8001808 <MX_ADC1_Init+0xdc>)
 80017c6:	f001 fa47 	bl	8002c58 <HAL_ADCEx_MultiModeConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80017d0:	f7ff fcd2 	bl	8001178 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d8:	2301      	movs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80017e0:	2305      	movs	r3, #5
 80017e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_ADC1_Init+0xdc>)
 80017f2:	f000 ff6f 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80017fc:	f7ff fcbc 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200001b4 	.word	0x200001b4

0800180c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001824:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <MX_ADC2_Init+0xb8>)
 8001826:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800182a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800182e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800183e:	2200      	movs	r2, #0
 8001840:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800184c:	2200      	movs	r2, #0
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001852:	2201      	movs	r2, #1
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800186c:	2204      	movs	r2, #4
 800186e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001872:	2200      	movs	r2, #0
 8001874:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_ADC2_Init+0xb4>)
 8001878:	2200      	movs	r2, #0
 800187a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <MX_ADC2_Init+0xb4>)
 800187e:	f000 fb4f 	bl	8001f20 <HAL_ADC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8001888:	f7ff fc76 	bl	8001178 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800188c:	2301      	movs	r3, #1
 800188e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001890:	2301      	movs	r3, #1
 8001892:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8001898:	2305      	movs	r3, #5
 800189a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018a4:	463b      	mov	r3, r7
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_ADC2_Init+0xb4>)
 80018aa:	f000 ff13 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80018b4:	f7ff fc60 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000d8 	.word	0x200000d8
 80018c4:	50000100 	.word	0x50000100

080018c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_MspInit+0x44>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_MspInit+0x44>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6193      	str	r3, [r2, #24]
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_MspInit+0x44>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_MspInit+0x44>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_MspInit+0x44>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001930:	d136      	bne.n	80019a0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 800193a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10b      	bne.n	800195c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6153      	str	r3, [r2, #20]
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 8001962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001966:	6153      	str	r3, [r2, #20]
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = MUX_OUT_Pin;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MUX_OUT_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f001 fb9d 	bl	80030c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2012      	movs	r0, #18
 8001994:	f001 fb61 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001998:	2012      	movs	r0, #18
 800199a:	f001 fb7a 	bl	8003092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800199e:	e03a      	b.n	8001a16 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_ADC_MspInit+0x118>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d135      	bne.n	8001a16 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 80019b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_ADC_MspInit+0x110>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10b      	bne.n	80019d4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6153      	str	r3, [r2, #20]
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019de:	6153      	str	r3, [r2, #20]
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_ADC_MspInit+0x114>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_Pin;
 80019ec:	2310      	movs	r3, #16
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f001 fb61 	bl	80030c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2012      	movs	r0, #18
 8001a0c:	f001 fb25 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a10:	2012      	movs	r0, #18
 8001a12:	f001 fb3e 	bl	8003092 <HAL_NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200000c8 	.word	0x200000c8
 8001a24:	40021000 	.word	0x40021000
 8001a28:	50000100 	.word	0x50000100

08001a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <HAL_I2C_MspInit+0x7c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d127      	bne.n	8001a9e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6a:	2312      	movs	r3, #18
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a76:	2304      	movs	r3, #4
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <HAL_I2C_MspInit+0x84>)
 8001a82:	f001 fb21 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_I2C_MspInit+0x80>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_RTC_MspInit+0x44>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d111      	bne.n	8001aea <HAL_RTC_MspInit+0x36>
 8001ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aca:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <HAL_RTC_MspInit+0x48>)
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40002800 	.word	0x40002800
 8001afc:	10908100 	.word	0x10908100

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a23      	ldr	r2, [pc, #140]	; (8001b9c <HAL_TIM_Base_MspInit+0x9c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10c      	bne.n	8001b2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b2a:	e032      	b.n	8001b92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b34:	d114      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201c      	movs	r0, #28
 8001b54:	f001 fa81 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b58:	201c      	movs	r0, #28
 8001b5a:	f001 fa9a 	bl	8003092 <HAL_NVIC_EnableIRQ>
}
 8001b5e:	e018      	b.n	8001b92 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_TIM_Base_MspInit+0xa4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d113      	bne.n	8001b92 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_TIM_Base_MspInit+0xa0>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	201d      	movs	r0, #29
 8001b88:	f001 fa67 	bl	800305a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b8c:	201d      	movs	r0, #29
 8001b8e:	f001 fa80 	bl	8003092 <HAL_NVIC_EnableIRQ>
}
 8001b92:	bf00      	nop
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40000400 	.word	0x40000400

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f930 	bl	8001e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <ADC1_2_IRQHandler+0x14>)
 8001c0a:	f000 fb1b 	bl	8002244 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <ADC1_2_IRQHandler+0x18>)
 8001c10:	f000 fb18 	bl	8002244 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200001b4 	.word	0x200001b4
 8001c1c:	200000d8 	.word	0x200000d8

08001c20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <TIM2_IRQHandler+0x10>)
 8001c26:	f003 f8c2 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000264 	.word	0x20000264

08001c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM3_IRQHandler+0x10>)
 8001c3a:	f003 f8b8 	bl	8004dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000174 	.word	0x20000174

08001c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001c4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c50:	f001 fbdc 	bl	800340c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e00a      	b.n	8001c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c6a:	f3af 8000 	nop.w
 8001c6e:	4601      	mov	r1, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	b2ca      	uxtb	r2, r1
 8001c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf0      	blt.n	8001c6a <_read+0x12>
	}

return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cba:	605a      	str	r2, [r3, #4]
	return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_isatty>:

int _isatty(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_sbrk+0x50>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x16>
		heap_end = &end;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <_sbrk+0x50>)
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <_sbrk+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <_sbrk+0x50>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <_sbrk+0x50>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	466a      	mov	r2, sp
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d907      	bls.n	8001d36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d26:	f004 f817 	bl	8005d58 <__errno>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e006      	b.n	8001d44 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <_sbrk+0x50>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <_sbrk+0x50>)
 8001d40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200000cc 	.word	0x200000cc
 8001d50:	200002b0 	.word	0x200002b0

08001d54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <SystemInit+0x28>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <SystemInit+0x28>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SystemInit+0x28>)
 8001d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d86:	e003      	b.n	8001d90 <LoopCopyDataInit>

08001d88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d8e:	3104      	adds	r1, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d98:	d3f6      	bcc.n	8001d88 <CopyDataInit>
	ldr	r2, =_sbss
 8001d9a:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d9c:	e002      	b.n	8001da4 <LoopFillZerobss>

08001d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001da0:	f842 3b04 	str.w	r3, [r2], #4

08001da4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <LoopForever+0x16>)
	cmp	r2, r3
 8001da6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001da8:	d3f9      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001daa:	f7ff ffd3 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dae:	f003 ffd9 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db2:	f7fe ff8b 	bl	8000ccc <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001db8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001dbc:	08007f08 	.word	0x08007f08
	ldr	r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dc4:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8001dc8:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8001dcc:	200002ac 	.word	0x200002ac

08001dd0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <CAN_RX0_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_Init+0x28>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x28>)
 8001dde:	f043 0310 	orr.w	r3, r3, #16
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f001 f92d 	bl	8003044 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 f808 	bl	8001e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fd6a 	bl	80018c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_InitTick+0x58>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 f945 	bl	80030ae <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00e      	b.n	8001e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d80a      	bhi.n	8001e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	f001 f90d 	bl	800305a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e40:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_InitTick+0x5c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000002c 	.word	0x2000002c
 8001e58:	20000034 	.word	0x20000034
 8001e5c:	20000030 	.word	0x20000030

08001e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x20>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x24>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_IncTick+0x24>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000034 	.word	0x20000034
 8001e84:	200002a4 	.word	0x200002a4

08001e88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_GetTick+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	200002a4 	.word	0x200002a4

08001ea0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff ffee 	bl	8001e88 <HAL_GetTick>
 8001eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_Delay+0x40>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ec6:	bf00      	nop
 8001ec8:	f7ff ffde 	bl	8001e88 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000034 	.word	0x20000034

08001ee4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09a      	sub	sp, #104	; 0x68
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e172      	b.n	8002226 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d176      	bne.n	8002040 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d152      	bne.n	8002000 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fccb 	bl	8001910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13b      	bne.n	8002000 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 ff2b 	bl	8002de4 <ADC_Disable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d12f      	bne.n	8002000 <HAL_ADC_Init+0xe0>
 8001fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12b      	bne.n	8002000 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fb0:	f023 0302 	bic.w	r3, r3, #2
 8001fb4:	f043 0202 	orr.w	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fda:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fdc:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_ADC_Init+0x310>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a94      	ldr	r2, [pc, #592]	; (8002234 <HAL_ADC_Init+0x314>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9a      	lsrs	r2, r3, #18
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff2:	e002      	b.n	8001ffa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d110      	bne.n	8002040 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f023 0312 	bic.w	r3, r3, #18
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 80df 	bne.w	800220c <HAL_ADC_Init+0x2ec>
 800204e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80da 	bne.w	800220c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 80d2 	bne.w	800220c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_ADC_Init+0x318>)
 800207a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d102      	bne.n	800208c <HAL_ADC_Init+0x16c>
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_ADC_Init+0x31c>)
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e002      	b.n	8002092 <HAL_ADC_Init+0x172>
 800208c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002090:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_ADC_Init+0x192>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x192>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_Init+0x194>
 80020b2:	2300      	movs	r3, #0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11c      	bne.n	80020f2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_ADC_Init+0x1ba>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Init+0x1ba>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_ADC_Init+0x1bc>
 80020da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80020e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	035b      	lsls	r3, r3, #13
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020fc:	2a01      	cmp	r2, #1
 80020fe:	d002      	beq.n	8002106 <HAL_ADC_Init+0x1e6>
 8002100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002104:	e000      	b.n	8002108 <HAL_ADC_Init+0x1e8>
 8002106:	2200      	movs	r2, #0
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4313      	orrs	r3, r2
 8002116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002118:	4313      	orrs	r3, r2
 800211a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d11b      	bne.n	800215e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7e5b      	ldrb	r3, [r3, #25]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	3b01      	subs	r3, #1
 8002134:	045a      	lsls	r2, r3, #17
 8002136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002138:	4313      	orrs	r3, r2
 800213a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213e:	663b      	str	r3, [r7, #96]	; 0x60
 8002140:	e00d      	b.n	800215e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	4313      	orrs	r3, r2
 8002170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002172:	4313      	orrs	r3, r2
 8002174:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b00      	cmp	r3, #0
 8002182:	d114      	bne.n	80021ae <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002192:	f023 0302 	bic.w	r3, r3, #2
 8002196:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e1b      	ldrb	r3, [r3, #24]
 800219c:	039a      	lsls	r2, r3, #14
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4313      	orrs	r3, r2
 80021a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021aa:	4313      	orrs	r3, r2
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_ADC_Init+0x320>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80021be:	430b      	orrs	r3, r1
 80021c0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d10c      	bne.n	80021e4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f023 010f 	bic.w	r1, r3, #15
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	1e5a      	subs	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
 80021e2:	e007      	b.n	80021f4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 020f 	bic.w	r2, r2, #15
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
 800220a:	e00a      	b.n	8002222 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	f023 0312 	bic.w	r3, r3, #18
 8002214:	f043 0210 	orr.w	r2, r3, #16
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800221c:	2301      	movs	r3, #1
 800221e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002222:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002226:	4618      	mov	r0, r3
 8002228:	3768      	adds	r7, #104	; 0x68
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000002c 	.word	0x2000002c
 8002234:	431bde83 	.word	0x431bde83
 8002238:	50000300 	.word	0x50000300
 800223c:	50000100 	.word	0x50000100
 8002240:	fff0c007 	.word	0xfff0c007

08002244 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d106      	bne.n	8002274 <HAL_ADC_IRQHandler+0x30>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00d      	beq.n	8002290 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800227e:	2b08      	cmp	r3, #8
 8002280:	d17a      	bne.n	8002378 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b08      	cmp	r3, #8
 800228e:	d173      	bne.n	8002378 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80022a8:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x92>
 80022b4:	4b85      	ldr	r3, [pc, #532]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d00a      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x92>
 80022c0:	4b82      	ldr	r3, [pc, #520]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x92>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d4:	d104      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e003      	b.n	80022e8 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d139      	bne.n	800236a <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d134      	bne.n	800236a <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b08      	cmp	r3, #8
 800230c:	d12d      	bne.n	800236a <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11a      	bne.n	8002352 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 020c 	bic.w	r2, r2, #12
 800232a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d112      	bne.n	800236a <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
 8002350:	e00b      	b.n	800236a <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0210 	orr.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fdba 	bl	8001ee4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	220c      	movs	r2, #12
 8002376:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b20      	cmp	r3, #32
 8002384:	d106      	bne.n	8002394 <HAL_ADC_IRQHandler+0x150>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b20      	cmp	r3, #32
 8002392:	d00f      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	f040 80a9 	bne.w	80024f6 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	f040 80a1 	bne.w	80024f6 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_ADC_IRQHandler+0x1aa>
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d00a      	beq.n	80023ee <HAL_ADC_IRQHandler+0x1aa>
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_IRQHandler+0x1aa>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ec:	d104      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e003      	b.n	8002400 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80023f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d010      	beq.n	8002430 <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 8002414:	2b00      	cmp	r3, #0
 8002416:	d167      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 8002422:	2b00      	cmp	r3, #0
 8002424:	d160      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d15b      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d154      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <HAL_ADC_IRQHandler+0x228>
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 031f 	and.w	r3, r3, #31
 8002452:	2b06      	cmp	r3, #6
 8002454:	d00a      	beq.n	800246c <HAL_ADC_IRQHandler+0x228>
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_ADC_IRQHandler+0x288>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b07      	cmp	r3, #7
 8002460:	d004      	beq.n	800246c <HAL_ADC_IRQHandler+0x228>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d104      	bne.n	8002476 <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e003      	b.n	800247e <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d12f      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11c      	bne.n	80024d0 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a4:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d114      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
 80024ca:	e00d      	b.n	80024e8 <HAL_ADC_IRQHandler+0x2a4>
 80024cc:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f8cb 	bl	8002684 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2260      	movs	r2, #96	; 0x60
 80024f4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d113      	bne.n	800252c <HAL_ADC_IRQHandler+0x2e8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b80      	cmp	r3, #128	; 0x80
 8002510:	d10c      	bne.n	800252c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fcea 	bl	8001ef8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253a:	d115      	bne.n	8002568 <HAL_ADC_IRQHandler+0x324>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254a:	d10d      	bne.n	8002568 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8a7 	bl	80026ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002566:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d115      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x360>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002586:	d10d      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f893 	bl	80026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d13d      	bne.n	800262e <HAL_ADC_IRQHandler+0x3ea>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b10      	cmp	r3, #16
 80025be:	d136      	bne.n	800262e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d102      	bne.n	80025ce <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80025c8:	2301      	movs	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e019      	b.n	8002602 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_ADC_IRQHandler+0x43c>)
 80025d0:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10a      	bne.n	8002602 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80025ec:	2301      	movs	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e007      	b.n	8002602 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80025fe:	2301      	movs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10e      	bne.n	8002626 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0202 	orr.w	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fc73 	bl	8001f0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263c:	d11b      	bne.n	8002676 <HAL_ADC_IRQHandler+0x432>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264c:	d113      	bne.n	8002676 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f043 0208 	orr.w	r2, r3, #8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f811 	bl	8002698 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	50000300 	.word	0x50000300

08002684 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b09b      	sub	sp, #108	; 0x6c
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x22>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e2a5      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x56e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 8289 	bne.w	8002c20 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d81c      	bhi.n	8002750 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	461a      	mov	r2, r3
 800272a:	231f      	movs	r3, #31
 800272c:	4093      	lsls	r3, r2
 800272e:	43db      	mvns	r3, r3
 8002730:	4019      	ands	r1, r3
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
 800274e:	e063      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d81e      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	3b1e      	subs	r3, #30
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	4019      	ands	r1, r3
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	3b1e      	subs	r3, #30
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
 8002794:	e040      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b0e      	cmp	r3, #14
 800279c:	d81e      	bhi.n	80027dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	3b3c      	subs	r3, #60	; 0x3c
 80027b2:	221f      	movs	r2, #31
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4019      	ands	r1, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	3b3c      	subs	r3, #60	; 0x3c
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
 80027da:	e01d      	b.n	8002818 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3b5a      	subs	r3, #90	; 0x5a
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4019      	ands	r1, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	3b5a      	subs	r3, #90	; 0x5a
 800280c:	fa00 f203 	lsl.w	r2, r0, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80e5 	bne.w	80029f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d91c      	bls.n	800286a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6999      	ldr	r1, [r3, #24]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	3b1e      	subs	r3, #30
 8002842:	2207      	movs	r2, #7
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	4019      	ands	r1, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6898      	ldr	r0, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	619a      	str	r2, [r3, #24]
 8002868:	e019      	b.n	800289e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6959      	ldr	r1, [r3, #20]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	4019      	ands	r1, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6898      	ldr	r0, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d84f      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x28c>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028fb 	.word	0x080028fb
 80028d0:	0800291d 	.word	0x0800291d
 80028d4:	0800293f 	.word	0x0800293f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028de:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_ADC_ConfigChannel+0x484>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	0691      	lsls	r1, r2, #26
 80028e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028ea:	430a      	orrs	r2, r1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028f6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028f8:	e07e      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002900:	4b95      	ldr	r3, [pc, #596]	; (8002b58 <HAL_ADC_ConfigChannel+0x484>)
 8002902:	4013      	ands	r3, r2
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	0691      	lsls	r1, r2, #26
 800290a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800290c:	430a      	orrs	r2, r1
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002918:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800291a:	e06d      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002922:	4b8d      	ldr	r3, [pc, #564]	; (8002b58 <HAL_ADC_ConfigChannel+0x484>)
 8002924:	4013      	ands	r3, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	0691      	lsls	r1, r2, #26
 800292c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800292e:	430a      	orrs	r2, r1
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800293a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800293c:	e05c      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002944:	4b84      	ldr	r3, [pc, #528]	; (8002b58 <HAL_ADC_ConfigChannel+0x484>)
 8002946:	4013      	ands	r3, r2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	0691      	lsls	r1, r2, #26
 800294e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002950:	430a      	orrs	r2, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800295c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800295e:	e04b      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	069b      	lsls	r3, r3, #26
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	069b      	lsls	r3, r3, #26
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029a6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d107      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	069b      	lsls	r3, r3, #26
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80029f0:	e001      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80029f6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d108      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x344>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x344>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x346>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 810b 	bne.w	8002c36 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00f      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43da      	mvns	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	400a      	ands	r2, r1
 8002a42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a46:	e049      	b.n	8002adc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	d91c      	bls.n	8002aa4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6999      	ldr	r1, [r3, #24]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b1b      	subs	r3, #27
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6898      	ldr	r0, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	3b1b      	subs	r3, #27
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	619a      	str	r2, [r3, #24]
 8002aa2:	e01b      	b.n	8002adc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6959      	ldr	r1, [r3, #20]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6898      	ldr	r0, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_ADC_ConfigChannel+0x488>)
 8002ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002af8:	2b11      	cmp	r3, #17
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b0c:	2b12      	cmp	r3, #18
 8002b0e:	f040 8092 	bne.w	8002c36 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f040 808b 	bne.w	8002c36 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b28:	d102      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x45c>
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_ADC_ConfigChannel+0x48c>)
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e002      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x462>
 8002b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b34:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10f      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x490>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x490>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e007      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x492>
 8002b56:	bf00      	nop
 8002b58:	83fff000 	.word	0x83fff000
 8002b5c:	50000300 	.word	0x50000300
 8002b60:	50000100 	.word	0x50000100
 8002b64:	2300      	movs	r3, #0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d150      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d107      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x4b8>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x4b8>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x4ba>
 8002b8c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d13c      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d11d      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x502>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba2:	d118      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_ADC_ConfigChannel+0x57c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_ADC_ConfigChannel+0x580>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9a      	lsrs	r2, r3, #18
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc6:	e002      	b.n	8002bce <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f9      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bd4:	e02e      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b11      	cmp	r3, #17
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x522>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be6:	d106      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bf4:	e01e      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b12      	cmp	r3, #18
 8002bfc:	d11a      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c08:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c0a:	e013      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c1e:	e00a      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c32:	e000      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c34:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	376c      	adds	r7, #108	; 0x6c
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	2000002c 	.word	0x2000002c
 8002c54:	431bde83 	.word	0x431bde83

08002c58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b099      	sub	sp, #100	; 0x64
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d102      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c72:	4b5a      	ldr	r3, [pc, #360]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	e002      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c7c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0a2      	b.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e09b      	b.n	8002dce <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d17f      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d179      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb8:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002cba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d040      	beq.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cd6:	035b      	lsls	r3, r3, #13
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cde:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002d00:	2300      	movs	r3, #0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d15c      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d107      	bne.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002d22:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d14b      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6811      	ldr	r1, [r2, #0]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d44:	e03c      	b.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d50:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d108      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d123      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d107      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002d94:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d112      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002da2:	f023 030f 	bic.w	r3, r3, #15
 8002da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002daa:	e009      	b.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3764      	adds	r7, #100	; 0x64
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	50000100 	.word	0x50000100
 8002de0:	50000300 	.word	0x50000300

08002de4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d108      	bne.n	8002e10 <ADC_Disable+0x2c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <ADC_Disable+0x2c>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <ADC_Disable+0x2e>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d040      	beq.n	8002e98 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030d 	and.w	r3, r3, #13
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10f      	bne.n	8002e44 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0202 	orr.w	r2, r2, #2
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002e3c:	f7ff f824 	bl	8001e88 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e42:	e022      	b.n	8002e8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0210 	orr.w	r2, r3, #16
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	f043 0201 	orr.w	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01c      	b.n	8002e9a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e60:	f7ff f812 	bl	8001e88 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d90d      	bls.n	8002e8a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e007      	b.n	8002e9a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d0e3      	beq.n	8002e60 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <__NVIC_SetPriorityGrouping>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ed6:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	60d3      	str	r3, [r2, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_GetPriorityGrouping>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef0:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 0307 	and.w	r3, r3, #7
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_EnableIRQ>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db0b      	blt.n	8002f32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <__NVIC_EnableIRQ+0x38>)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2001      	movs	r0, #1
 8002f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100

08002f44 <__NVIC_SetPriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <NVIC_EncodePriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b089      	sub	sp, #36	; 0x24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f1c3 0307 	rsb	r3, r3, #7
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf28      	it	cs
 8002fb6:	2304      	movcs	r3, #4
 8002fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d902      	bls.n	8002fc8 <NVIC_EncodePriority+0x30>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3b03      	subs	r3, #3
 8002fc6:	e000      	b.n	8002fca <NVIC_EncodePriority+0x32>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	401a      	ands	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43d9      	mvns	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	4313      	orrs	r3, r2
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <SysTick_Config>:
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003010:	d301      	bcc.n	8003016 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003012:	2301      	movs	r3, #1
 8003014:	e00f      	b.n	8003036 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <SysTick_Config+0x40>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800301e:	210f      	movs	r1, #15
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	f7ff ff8e 	bl	8002f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <SysTick_Config+0x40>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <SysTick_Config+0x40>)
 8003030:	2207      	movs	r2, #7
 8003032:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	e000e010 	.word	0xe000e010

08003044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff29 	bl	8002ea4 <__NVIC_SetPriorityGrouping>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800306c:	f7ff ff3e 	bl	8002eec <__NVIC_GetPriorityGrouping>
 8003070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff8e 	bl	8002f98 <NVIC_EncodePriority>
 800307c:	4602      	mov	r2, r0
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ff5d 	bl	8002f44 <__NVIC_SetPriority>
}
 800308a:	bf00      	nop
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	4603      	mov	r3, r0
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff31 	bl	8002f08 <__NVIC_EnableIRQ>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffa2 	bl	8003000 <SysTick_Config>
 80030bc:	4603      	mov	r3, r0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	e14e      	b.n	8003376 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8140 	beq.w	8003370 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x38>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d123      	bne.n	8003148 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	08da      	lsrs	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3208      	adds	r2, #8
 8003108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3208      	adds	r2, #8
 8003142:	6939      	ldr	r1, [r7, #16]
 8003144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0203 	and.w	r2, r3, #3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d00b      	beq.n	800319c <HAL_GPIO_Init+0xd4>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d007      	beq.n	800319c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003190:	2b11      	cmp	r3, #17
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b12      	cmp	r3, #18
 800319a:	d130      	bne.n	80031fe <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d2:	2201      	movs	r2, #1
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f003 0201 	and.w	r2, r3, #1
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 809a 	beq.w	8003370 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323c:	4b55      	ldr	r3, [pc, #340]	; (8003394 <HAL_GPIO_Init+0x2cc>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4a54      	ldr	r2, [pc, #336]	; (8003394 <HAL_GPIO_Init+0x2cc>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6193      	str	r3, [r2, #24]
 8003248:	4b52      	ldr	r3, [pc, #328]	; (8003394 <HAL_GPIO_Init+0x2cc>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x2d0>)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	3302      	adds	r3, #2
 800325c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800327e:	d013      	beq.n	80032a8 <HAL_GPIO_Init+0x1e0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a46      	ldr	r2, [pc, #280]	; (800339c <HAL_GPIO_Init+0x2d4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00d      	beq.n	80032a4 <HAL_GPIO_Init+0x1dc>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <HAL_GPIO_Init+0x2d8>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d007      	beq.n	80032a0 <HAL_GPIO_Init+0x1d8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a44      	ldr	r2, [pc, #272]	; (80033a4 <HAL_GPIO_Init+0x2dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_GPIO_Init+0x1d4>
 8003298:	2303      	movs	r3, #3
 800329a:	e006      	b.n	80032aa <HAL_GPIO_Init+0x1e2>
 800329c:	2305      	movs	r3, #5
 800329e:	e004      	b.n	80032aa <HAL_GPIO_Init+0x1e2>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e002      	b.n	80032aa <HAL_GPIO_Init+0x1e2>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_GPIO_Init+0x1e2>
 80032a8:	2300      	movs	r3, #0
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	f002 0203 	and.w	r2, r2, #3
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	4093      	lsls	r3, r2
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ba:	4937      	ldr	r1, [pc, #220]	; (8003398 <HAL_GPIO_Init+0x2d0>)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	3302      	adds	r3, #2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c8:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	43db      	mvns	r3, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4013      	ands	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <HAL_GPIO_Init+0x2e0>)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	3301      	adds	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	f47f aea9 	bne.w	80030d8 <HAL_GPIO_Init+0x10>
  }
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	40010000 	.word	0x40010000
 800339c:	48000400 	.word	0x48000400
 80033a0:	48000800 	.word	0x48000800
 80033a4:	48000c00 	.word	0x48000c00
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e001      	b.n	80033ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fbfe 	bl	8000c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40010400 	.word	0x40010400

0800343c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e081      	b.n	8003552 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe fae2 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800348c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e006      	b.n	80034c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d104      	bne.n	80034d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	ea42 0103 	orr.w	r1, r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	021a      	lsls	r2, r3, #8
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d138      	bne.n	80035e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800357a:	2302      	movs	r3, #2
 800357c:	e032      	b.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	; 0x24
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d139      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003610:	2302      	movs	r3, #2
 8003612:	e033      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003642:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800368e:	af00      	add	r7, sp, #0
 8003690:	1d3b      	adds	r3, r7, #4
 8003692:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003694:	1d3b      	adds	r3, r7, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f000 bef4 	b.w	800448a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 816a 	beq.w	8003986 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036b2:	4bb3      	ldr	r3, [pc, #716]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d00c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036be:	4bb0      	ldr	r3, [pc, #704]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d159      	bne.n	800377e <HAL_RCC_OscConfig+0xf6>
 80036ca:	4bad      	ldr	r3, [pc, #692]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d6:	d152      	bne.n	800377e <HAL_RCC_OscConfig+0xf6>
 80036d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036dc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80036ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_OscConfig+0x82>
 8003704:	4b9e      	ldr	r3, [pc, #632]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0xae>
 800370a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800370e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800371e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003722:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003726:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003732:	4b93      	ldr	r3, [pc, #588]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800373e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003742:	fa92 f2a2 	rbit	r2, r2
 8003746:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800374a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800374e:	fab2 f282 	clz	r2, r2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f042 0220 	orr.w	r2, r2, #32
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	f002 021f 	and.w	r2, r2, #31
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 810c 	beq.w	8003984 <HAL_RCC_OscConfig+0x2fc>
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 8106 	bne.w	8003984 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f000 be86 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d106      	bne.n	8003798 <HAL_RCC_OscConfig+0x110>
 800378a:	4b7d      	ldr	r3, [pc, #500]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7c      	ldr	r2, [pc, #496]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e030      	b.n	80037fa <HAL_RCC_OscConfig+0x172>
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x134>
 80037a2:	4b77      	ldr	r3, [pc, #476]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a76      	ldr	r2, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b74      	ldr	r3, [pc, #464]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01e      	b.n	80037fa <HAL_RCC_OscConfig+0x172>
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x15a>
 80037c8:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6c      	ldr	r2, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0x172>
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a66      	ldr	r2, [pc, #408]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b64      	ldr	r3, [pc, #400]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037fa:	4b61      	ldr	r3, [pc, #388]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	495d      	ldr	r1, [pc, #372]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d059      	beq.n	80038cc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fb36 	bl	8001e88 <HAL_GetTick>
 800381c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003822:	f7fe fb31 	bl	8001e88 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d902      	bls.n	8003838 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	f000 be29 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
 8003838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800383c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800384c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_RCC_OscConfig+0x1e2>
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x20e>
 800386a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003872:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800387e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003882:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003886:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003892:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800389e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80038aa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0ab      	beq.n	8003822 <HAL_RCC_OscConfig+0x19a>
 80038ca:	e05c      	b.n	8003986 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fadc 	bl	8001e88 <HAL_GetTick>
 80038d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d4:	e00a      	b.n	80038ec <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d6:	f7fe fad7 	bl	8001e88 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d902      	bls.n	80038ec <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	f000 bdcf 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
 80038ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003900:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003904:	fab3 f383 	clz	r3, r3
 8003908:	b2db      	uxtb	r3, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d102      	bne.n	800391e <HAL_RCC_OscConfig+0x296>
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	e015      	b.n	800394a <HAL_RCC_OscConfig+0x2c2>
 800391e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003922:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003936:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800393a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003946:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <HAL_RCC_OscConfig+0x2f8>)
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800394e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003952:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003956:	fa92 f2a2 	rbit	r2, r2
 800395a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800395e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003962:	fab2 f282 	clz	r2, r2
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f042 0220 	orr.w	r2, r2, #32
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	f002 021f 	and.w	r2, r2, #31
 8003972:	2101      	movs	r1, #1
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ab      	bne.n	80038d6 <HAL_RCC_OscConfig+0x24e>
 800397e:	e002      	b.n	8003986 <HAL_RCC_OscConfig+0x2fe>
 8003980:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 816f 	beq.w	8003c74 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003996:	4bd0      	ldr	r3, [pc, #832]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039a2:	4bcd      	ldr	r3, [pc, #820]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d16c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x400>
 80039ae:	4bca      	ldr	r3, [pc, #808]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d166      	bne.n	8003a88 <HAL_RCC_OscConfig+0x400>
 80039ba:	2302      	movs	r3, #2
 80039bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80039cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d102      	bne.n	80039ea <HAL_RCC_OscConfig+0x362>
 80039e4:	4bbc      	ldr	r3, [pc, #752]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e013      	b.n	8003a12 <HAL_RCC_OscConfig+0x38a>
 80039ea:	2302      	movs	r3, #2
 80039ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039fc:	2302      	movs	r3, #2
 80039fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003a0e:	4bb2      	ldr	r3, [pc, #712]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2202      	movs	r2, #2
 8003a14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003a18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a1c:	fa92 f2a2 	rbit	r2, r2
 8003a20:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003a24:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003a28:	fab2 f282 	clz	r2, r2
 8003a2c:	b2d2      	uxtb	r2, r2
 8003a2e:	f042 0220 	orr.w	r2, r2, #32
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	f002 021f 	and.w	r2, r2, #31
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_RCC_OscConfig+0x3cc>
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f000 bd1b 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4ba0      	ldr	r3, [pc, #640]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	21f8      	movs	r1, #248	; 0xf8
 8003a64:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a6c:	fa91 f1a1 	rbit	r1, r1
 8003a70:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a74:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a78:	fab1 f181 	clz	r1, r1
 8003a7c:	b2c9      	uxtb	r1, r1
 8003a7e:	408b      	lsls	r3, r1
 8003a80:	4995      	ldr	r1, [pc, #596]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e0f5      	b.n	8003c74 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8085 	beq.w	8003b9e <HAL_RCC_OscConfig+0x516>
 8003a94:	2301      	movs	r3, #1
 8003a96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003a9e:	fa93 f3a3 	rbit	r3, r3
 8003aa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003aa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	461a      	mov	r2, r3
 8003abc:	2301      	movs	r3, #1
 8003abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f9e2 	bl	8001e88 <HAL_GetTick>
 8003ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aca:	f7fe f9dd 	bl	8001e88 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	f000 bcd5 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003af2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <HAL_RCC_OscConfig+0x488>
 8003b0a:	4b73      	ldr	r3, [pc, #460]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	e013      	b.n	8003b38 <HAL_RCC_OscConfig+0x4b0>
 8003b10:	2302      	movs	r3, #2
 8003b12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b22:	2302      	movs	r3, #2
 8003b24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003b3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b42:	fa92 f2a2 	rbit	r2, r2
 8003b46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003b4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	f042 0220 	orr.w	r2, r2, #32
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f002 021f 	and.w	r2, r2, #31
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0af      	beq.n	8003aca <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	21f8      	movs	r1, #248	; 0xf8
 8003b7a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b82:	fa91 f1a1 	rbit	r1, r1
 8003b86:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003b8a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003b8e:	fab1 f181 	clz	r1, r1
 8003b92:	b2c9      	uxtb	r1, r1
 8003b94:	408b      	lsls	r3, r1
 8003b96:	4950      	ldr	r1, [pc, #320]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]
 8003b9c:	e06a      	b.n	8003c74 <HAL_RCC_OscConfig+0x5ec>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe f95d 	bl	8001e88 <HAL_GetTick>
 8003bce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd4:	f7fe f958 	bl	8001e88 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f000 bc50 	b.w	800448a <HAL_RCC_OscConfig+0xe02>
 8003bea:	2302      	movs	r3, #2
 8003bec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003bf4:	fa93 f3a3 	rbit	r3, r3
 8003bf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_OscConfig+0x592>
 8003c14:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	e013      	b.n	8003c42 <HAL_RCC_OscConfig+0x5ba>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003c3e:	4b26      	ldr	r3, [pc, #152]	; (8003cd8 <HAL_RCC_OscConfig+0x650>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2202      	movs	r2, #2
 8003c44:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003c48:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c4c:	fa92 f2a2 	rbit	r2, r2
 8003c50:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003c54:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f002 021f 	and.w	r2, r2, #31
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1af      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80da 	beq.w	8003e38 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d069      	beq.n	8003d62 <HAL_RCC_OscConfig+0x6da>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca4:	fab3 f383 	clz	r3, r3
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_OscConfig+0x654>)
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fe f8e6 	bl	8001e88 <HAL_GetTick>
 8003cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	e00e      	b.n	8003ce0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe f8e1 	bl	8001e88 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d906      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e3d9      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	10908120 	.word	0x10908120
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cf2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f2a3 	rbit	r2, r3
 8003d04:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003d20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4ba5      	ldr	r3, [pc, #660]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	6019      	str	r1, [r3, #0]
 8003d2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	fa93 f1a3 	rbit	r1, r3
 8003d38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d3c:	6019      	str	r1, [r3, #0]
  return result;
 8003d3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0b0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x63a>
 8003d60:	e06a      	b.n	8003e38 <HAL_RCC_OscConfig+0x7b0>
 8003d62:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d78:	601a      	str	r2, [r3, #0]
  return result;
 8003d7a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d7e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d80:	fab3 f383 	clz	r3, r3
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x934>)
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2300      	movs	r3, #0
 8003d92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d94:	f7fe f878 	bl	8001e88 <HAL_GetTick>
 8003d98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	e009      	b.n	8003db2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe f873 	bl	8001e88 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e36b      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 8003db2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003db6:	2202      	movs	r2, #2
 8003db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	fa93 f2a3 	rbit	r2, r3
 8003dc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003dce:	2202      	movs	r2, #2
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fa93 f2a3 	rbit	r2, r3
 8003ddc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003de6:	2202      	movs	r2, #2
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003df8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfa:	4b6f      	ldr	r3, [pc, #444]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e02:	2102      	movs	r1, #2
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	fa93 f1a3 	rbit	r1, r3
 8003e10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e14:	6019      	str	r1, [r3, #0]
  return result;
 8003e16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	fab3 f383 	clz	r3, r3
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1b2      	bne.n	8003d9e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8158 	beq.w	80040f8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b5a      	ldr	r3, [pc, #360]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d112      	bne.n	8003e80 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	61d3      	str	r3, [r2, #28]
 8003e66:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e6e:	f107 0308 	add.w	r3, r7, #8
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b4f      	ldr	r3, [pc, #316]	; (8003fc0 <HAL_RCC_OscConfig+0x938>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x938>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4b      	ldr	r2, [pc, #300]	; (8003fc0 <HAL_RCC_OscConfig+0x938>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e98:	f7fd fff6 	bl	8001e88 <HAL_GetTick>
 8003e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	e009      	b.n	8003eb6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7fd fff1 	bl	8001e88 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e2e9      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb6:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <HAL_RCC_OscConfig+0x938>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ef      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x852>
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6213      	str	r3, [r2, #32]
 8003ed8:	e02f      	b.n	8003f3a <HAL_RCC_OscConfig+0x8b2>
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x876>
 8003ee4:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6213      	str	r3, [r2, #32]
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4a30      	ldr	r2, [pc, #192]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6213      	str	r3, [r2, #32]
 8003efc:	e01d      	b.n	8003f3a <HAL_RCC_OscConfig+0x8b2>
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d10c      	bne.n	8003f22 <HAL_RCC_OscConfig+0x89a>
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	6213      	str	r3, [r2, #32]
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6213      	str	r3, [r2, #32]
 8003f20:	e00b      	b.n	8003f3a <HAL_RCC_OscConfig+0x8b2>
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	6213      	str	r3, [r2, #32]
 8003f2e:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003f34:	f023 0304 	bic.w	r3, r3, #4
 8003f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d06b      	beq.n	800401c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f44:	f7fd ffa0 	bl	8001e88 <HAL_GetTick>
 8003f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	e00b      	b.n	8003f66 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd ff9b 	bl	8001e88 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e291      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 8003f66:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f82:	2202      	movs	r2, #2
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	fa93 f2a3 	rbit	r2, r3
 8003f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f94:	601a      	str	r2, [r3, #0]
  return result;
 8003f96:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f9a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d109      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x93c>
 8003fb0:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <HAL_RCC_OscConfig+0x930>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	e014      	b.n	8003fe0 <HAL_RCC_OscConfig+0x958>
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	10908120 	.word	0x10908120
 8003fc0:	40007000 	.word	0x40007000
 8003fc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fc8:	2202      	movs	r2, #2
 8003fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	fa93 f2a3 	rbit	r2, r3
 8003fd6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	4bbb      	ldr	r3, [pc, #748]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	6011      	str	r1, [r2, #0]
 8003fe8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	fa92 f1a2 	rbit	r1, r2
 8003ff2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ff6:	6011      	str	r1, [r2, #0]
  return result;
 8003ff8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	fab2 f282 	clz	r2, r2
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	f002 021f 	and.w	r2, r2, #31
 800400e:	2101      	movs	r1, #1
 8004010:	fa01 f202 	lsl.w	r2, r1, r2
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d099      	beq.n	8003f4e <HAL_RCC_OscConfig+0x8c6>
 800401a:	e063      	b.n	80040e4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fd ff34 	bl	8001e88 <HAL_GetTick>
 8004020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	e00b      	b.n	800403e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fd ff2f 	bl	8001e88 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e225      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 800403e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004042:	2202      	movs	r2, #2
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800405a:	2202      	movs	r2, #2
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800406c:	601a      	str	r2, [r3, #0]
  return result;
 800406e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004072:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f043 0302 	orr.w	r3, r3, #2
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d102      	bne.n	800408e <HAL_RCC_OscConfig+0xa06>
 8004088:	4b90      	ldr	r3, [pc, #576]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	e00d      	b.n	80040aa <HAL_RCC_OscConfig+0xa22>
 800408e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004092:	2202      	movs	r2, #2
 8004094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	4b89      	ldr	r3, [pc, #548]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80040ae:	2102      	movs	r1, #2
 80040b0:	6011      	str	r1, [r2, #0]
 80040b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	fa92 f1a2 	rbit	r1, r2
 80040bc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80040c0:	6011      	str	r1, [r2, #0]
  return result;
 80040c2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	fab2 f282 	clz	r2, r2
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	f002 021f 	and.w	r2, r2, #31
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1a0      	bne.n	8004026 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ec:	4b77      	ldr	r3, [pc, #476]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4a76      	ldr	r2, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80040f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 81c2 	beq.w	8004488 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004104:	4b71      	ldr	r3, [pc, #452]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	f000 819c 	beq.w	800444a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f040 8114 	bne.w	8004346 <HAL_RCC_OscConfig+0xcbe>
 800411e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004122:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004136:	601a      	str	r2, [r3, #0]
  return result;
 8004138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800413c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004148:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd fe98 	bl	8001e88 <HAL_GetTick>
 8004158:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415c:	e009      	b.n	8004172 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd fe93 	bl	8001e88 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e18b      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 8004172:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	fa93 f2a3 	rbit	r2, r3
 8004186:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800418a:	601a      	str	r2, [r3, #0]
  return result;
 800418c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004190:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	b2db      	uxtb	r3, r3
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_OscConfig+0xb24>
 80041a6:	4b49      	ldr	r3, [pc, #292]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	e01b      	b.n	80041e4 <HAL_RCC_OscConfig+0xb5c>
 80041ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fa93 f2a3 	rbit	r2, r3
 80041c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	fa93 f2a3 	rbit	r2, r3
 80041da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	fa92 f1a2 	rbit	r1, r2
 80041f8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041fc:	6011      	str	r1, [r2, #0]
  return result;
 80041fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	fab2 f282 	clz	r2, r2
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f042 0220 	orr.w	r2, r2, #32
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	f002 021f 	and.w	r2, r2, #31
 8004214:	2101      	movs	r1, #1
 8004216:	fa01 f202 	lsl.w	r2, r1, r2
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d19e      	bne.n	800415e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004220:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	430b      	orrs	r3, r1
 8004236:	4925      	ldr	r1, [pc, #148]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
 800423c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	fa93 f2a3 	rbit	r2, r3
 8004250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004254:	601a      	str	r2, [r3, #0]
  return result;
 8004256:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800425a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	461a      	mov	r2, r3
 800426e:	2301      	movs	r3, #1
 8004270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd fe09 	bl	8001e88 <HAL_GetTick>
 8004276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800427a:	e009      	b.n	8004290 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd fe04 	bl	8001e88 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0fc      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 8004290:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	fa93 f2a3 	rbit	r2, r3
 80042a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042a8:	601a      	str	r2, [r3, #0]
  return result;
 80042aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <HAL_RCC_OscConfig+0xc48>
 80042c4:	4b01      	ldr	r3, [pc, #4]	; (80042cc <HAL_RCC_OscConfig+0xc44>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	e01e      	b.n	8004308 <HAL_RCC_OscConfig+0xc80>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	fa93 f2a3 	rbit	r2, r3
 80042e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	fa93 f2a3 	rbit	r2, r3
 80042fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	4b63      	ldr	r3, [pc, #396]	; (8004494 <HAL_RCC_OscConfig+0xe0c>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800430c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004310:	6011      	str	r1, [r2, #0]
 8004312:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	fa92 f1a2 	rbit	r1, r2
 800431c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004320:	6011      	str	r1, [r2, #0]
  return result;
 8004322:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	fab2 f282 	clz	r2, r2
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	f042 0220 	orr.w	r2, r2, #32
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	f002 021f 	and.w	r2, r2, #31
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f202 	lsl.w	r2, r1, r2
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d09b      	beq.n	800427c <HAL_RCC_OscConfig+0xbf4>
 8004344:	e0a0      	b.n	8004488 <HAL_RCC_OscConfig+0xe00>
 8004346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800434a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800434e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	fa93 f2a3 	rbit	r2, r3
 800435a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800435e:	601a      	str	r2, [r3, #0]
  return result;
 8004360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004364:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	461a      	mov	r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd fd84 	bl	8001e88 <HAL_GetTick>
 8004380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004384:	e009      	b.n	800439a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004386:	f7fd fd7f 	bl	8001e88 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e077      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
 800439a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800439e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fa93 f2a3 	rbit	r2, r3
 80043ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b2:	601a      	str	r2, [r3, #0]
  return result;
 80043b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_RCC_OscConfig+0xd4c>
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCC_OscConfig+0xe0c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	e01b      	b.n	800440c <HAL_RCC_OscConfig+0xd84>
 80043d4:	f107 0320 	add.w	r3, r7, #32
 80043d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f107 0320 	add.w	r3, r7, #32
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	fa93 f2a3 	rbit	r2, r3
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f107 0318 	add.w	r3, r7, #24
 80043f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	4b22      	ldr	r3, [pc, #136]	; (8004494 <HAL_RCC_OscConfig+0xe0c>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f107 0210 	add.w	r2, r7, #16
 8004410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	f107 0210 	add.w	r2, r7, #16
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	fa92 f1a2 	rbit	r1, r2
 8004420:	f107 020c 	add.w	r2, r7, #12
 8004424:	6011      	str	r1, [r2, #0]
  return result;
 8004426:	f107 020c 	add.w	r2, r7, #12
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d19e      	bne.n	8004386 <HAL_RCC_OscConfig+0xcfe>
 8004448:	e01e      	b.n	8004488 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800444a:	1d3b      	adds	r3, r7, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e018      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_RCC_OscConfig+0xe0c>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004460:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	429a      	cmp	r2, r3
 8004470:	d108      	bne.n	8004484 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000

08004498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b09e      	sub	sp, #120	; 0x78
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e162      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b90      	ldr	r3, [pc, #576]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d910      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b8d      	ldr	r3, [pc, #564]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 0207 	bic.w	r2, r3, #7
 80044c6:	498b      	ldr	r1, [pc, #556]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b89      	ldr	r3, [pc, #548]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e14a      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b82      	ldr	r3, [pc, #520]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	497f      	ldr	r1, [pc, #508]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80dc 	beq.w	80046c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d13c      	bne.n	800458e <HAL_RCC_ClockConfig+0xf6>
 8004514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004518:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004524:	fab3 f383 	clz	r3, r3
 8004528:	b2db      	uxtb	r3, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d102      	bne.n	800453e <HAL_RCC_ClockConfig+0xa6>
 8004538:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	e00f      	b.n	800455e <HAL_RCC_ClockConfig+0xc6>
 800453e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004542:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	667b      	str	r3, [r7, #100]	; 0x64
 800454c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004550:	663b      	str	r3, [r7, #96]	; 0x60
 8004552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004562:	65ba      	str	r2, [r7, #88]	; 0x58
 8004564:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004566:	fa92 f2a2 	rbit	r2, r2
 800456a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800456c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800456e:	fab2 f282 	clz	r2, r2
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	f042 0220 	orr.w	r2, r2, #32
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f002 021f 	and.w	r2, r2, #31
 800457e:	2101      	movs	r1, #1
 8004580:	fa01 f202 	lsl.w	r2, r1, r2
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d17b      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0f3      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d13c      	bne.n	8004610 <HAL_RCC_ClockConfig+0x178>
 8004596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800459e:	fa93 f3a3 	rbit	r3, r3
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	fab3 f383 	clz	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d102      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x128>
 80045ba:	4b4f      	ldr	r3, [pc, #316]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	e00f      	b.n	80045e0 <HAL_RCC_ClockConfig+0x148>
 80045c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
 80045ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40
 80045d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045dc:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80045e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80045ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f042 0220 	orr.w	r2, r2, #32
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f002 021f 	and.w	r2, r2, #31
 8004600:	2101      	movs	r1, #1
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d13a      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b2      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
 8004610:	2302      	movs	r3, #2
 8004612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800461c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <HAL_RCC_ClockConfig+0x1a0>
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	e00d      	b.n	8004654 <HAL_RCC_ClockConfig+0x1bc>
 8004638:	2302      	movs	r3, #2
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	2302      	movs	r3, #2
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	61fb      	str	r3, [r7, #28]
 8004650:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	2202      	movs	r2, #2
 8004656:	61ba      	str	r2, [r7, #24]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	fa92 f2a2 	rbit	r2, r2
 800465e:	617a      	str	r2, [r7, #20]
  return result;
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e079      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f023 0203 	bic.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	491a      	ldr	r1, [pc, #104]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004694:	f7fd fbf8 	bl	8001e88 <HAL_GetTick>
 8004698:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7fd fbf4 	bl	8001e88 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e061      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <HAL_RCC_ClockConfig+0x260>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 020c 	and.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1eb      	bne.n	800469c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d214      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 0207 	bic.w	r2, r3, #7
 80046da:	4906      	ldr	r1, [pc, #24]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HAL_RCC_ClockConfig+0x25c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e040      	b.n	8004776 <HAL_RCC_ClockConfig+0x2de>
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <HAL_RCC_ClockConfig+0x2e8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	491a      	ldr	r1, [pc, #104]	; (8004780 <HAL_RCC_ClockConfig+0x2e8>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_RCC_ClockConfig+0x2e8>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4912      	ldr	r1, [pc, #72]	; (8004780 <HAL_RCC_ClockConfig+0x2e8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800473a:	f000 f829 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800473e:	4601      	mov	r1, r0
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_RCC_ClockConfig+0x2e8>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004748:	22f0      	movs	r2, #240	; 0xf0
 800474a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	fa92 f2a2 	rbit	r2, r2
 8004752:	60fa      	str	r2, [r7, #12]
  return result;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	fab2 f282 	clz	r2, r2
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	40d3      	lsrs	r3, r2
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x2ec>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	fa21 f303 	lsr.w	r3, r1, r3
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <HAL_RCC_ClockConfig+0x2f0>)
 8004768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <HAL_RCC_ClockConfig+0x2f4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd fb46 	bl	8001e00 <HAL_InitTick>
  
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3778      	adds	r7, #120	; 0x78
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	08007c5c 	.word	0x08007c5c
 8004788:	2000002c 	.word	0x2000002c
 800478c:	20000030 	.word	0x20000030

08004790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b08b      	sub	sp, #44	; 0x2c
 8004794:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80047aa:	4b29      	ldr	r3, [pc, #164]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x30>
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x36>
 80047be:	e03c      	b.n	800483a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047c2:	623b      	str	r3, [r7, #32]
      break;
 80047c4:	e03c      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	fa92 f2a2 	rbit	r2, r2
 80047d8:	607a      	str	r2, [r7, #4]
  return result;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	40d3      	lsrs	r3, r2
 80047e4:	4a1c      	ldr	r2, [pc, #112]	; (8004858 <HAL_RCC_GetSysClockFreq+0xc8>)
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047ea:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	220f      	movs	r2, #15
 80047f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	fa92 f2a2 	rbit	r2, r2
 80047fc:	60fa      	str	r2, [r7, #12]
  return result;
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	fab2 f282 	clz	r2, r2
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	40d3      	lsrs	r3, r2
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <HAL_RCC_GetSysClockFreq+0xcc>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004818:	4a0e      	ldr	r2, [pc, #56]	; (8004854 <HAL_RCC_GetSysClockFreq+0xc4>)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	e004      	b.n	8004834 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <HAL_RCC_GetSysClockFreq+0xd0>)
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	623b      	str	r3, [r7, #32]
      break;
 8004838:	e002      	b.n	8004840 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCC_GetSysClockFreq+0xc4>)
 800483c:	623b      	str	r3, [r7, #32]
      break;
 800483e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004840:	6a3b      	ldr	r3, [r7, #32]
}
 8004842:	4618      	mov	r0, r3
 8004844:	372c      	adds	r7, #44	; 0x2c
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	007a1200 	.word	0x007a1200
 8004858:	08007c6c 	.word	0x08007c6c
 800485c:	08007c7c 	.word	0x08007c7c
 8004860:	003d0900 	.word	0x003d0900

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b092      	sub	sp, #72	; 0x48
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 80d0 	beq.w	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004888:	4b8e      	ldr	r3, [pc, #568]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10e      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004894:	4b8b      	ldr	r3, [pc, #556]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	4a8a      	ldr	r2, [pc, #552]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	61d3      	str	r3, [r2, #28]
 80048a0:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b85      	ldr	r3, [pc, #532]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d118      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b82      	ldr	r3, [pc, #520]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a81      	ldr	r2, [pc, #516]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7fd fadd 	bl	8001e88 <HAL_GetTick>
 80048ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fd fad9 	bl	8001e88 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b64      	cmp	r3, #100	; 0x64
 80048de:	d901      	bls.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0ea      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b78      	ldr	r3, [pc, #480]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048f0:	4b74      	ldr	r3, [pc, #464]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d07d      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800490a:	429a      	cmp	r2, r3
 800490c:	d076      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800490e:	4b6d      	ldr	r3, [pc, #436]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	461a      	mov	r2, r3
 8004938:	2301      	movs	r3, #1
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	4b5d      	ldr	r3, [pc, #372]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	461a      	mov	r2, r3
 800495c:	2300      	movs	r3, #0
 800495e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004960:	4a58      	ldr	r2, [pc, #352]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004964:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d045      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004970:	f7fd fa8a 	bl	8001e88 <HAL_GetTick>
 8004974:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fd fa86 	bl	8001e88 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e095      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x256>
 800498e:	2302      	movs	r3, #2
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	2302      	movs	r3, #2
 800499c:	623b      	str	r3, [r7, #32]
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	61fb      	str	r3, [r7, #28]
  return result;
 80049a6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a8:	fab3 f383 	clz	r3, r3
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f043 0302 	orr.w	r3, r3, #2
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d102      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80049bc:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	e007      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2202      	movs	r2, #2
 80049d4:	613a      	str	r2, [r7, #16]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	fa92 f2a2 	rbit	r2, r2
 80049dc:	60fa      	str	r2, [r7, #12]
  return result;
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f002 021f 	and.w	r2, r2, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0bd      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049fc:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	492e      	ldr	r1, [pc, #184]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a16:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a20:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a2e:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4922      	ldr	r1, [pc, #136]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	f023 0210 	bic.w	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	491a      	ldr	r1, [pc, #104]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	4913      	ldr	r1, [pc, #76]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a88:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	490b      	ldr	r1, [pc, #44]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d008      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	4904      	ldr	r1, [pc, #16]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3748      	adds	r7, #72	; 0x48
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	10908100 	.word	0x10908100

08004ad0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e083      	b.n	8004bea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7f5b      	ldrb	r3, [r3, #29]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc ffde 	bl	8001ab4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	22ca      	movs	r2, #202	; 0xca
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2253      	movs	r2, #83	; 0x53
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f897 	bl	8004c42 <RTC_EnterInitMode>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e05e      	b.n	8004bea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68d2      	ldr	r2, [r2, #12]
 8004b66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6919      	ldr	r1, [r3, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	041a      	lsls	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10e      	bne.n	8004bb8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f829 	bl	8004bf2 <HAL_RTC_WaitForSynchro>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	22ff      	movs	r2, #255	; 0xff
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e018      	b.n	8004bea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c0c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004c0e:	f7fd f93b 	bl	8001e88 <HAL_GetTick>
 8004c12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c14:	e009      	b.n	8004c2a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c16:	f7fd f937 	bl	8001e88 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c24:	d901      	bls.n	8004c2a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e007      	b.n	8004c3a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0ee      	beq.n	8004c16 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d119      	bne.n	8004c90 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c66:	f7fd f90f 	bl	8001e88 <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c6c:	e009      	b.n	8004c82 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c6e:	f7fd f90b 	bl	8001e88 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7c:	d901      	bls.n	8004c82 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e007      	b.n	8004c92 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e01d      	b.n	8004ce8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc ff1d 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 fb81 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_TIM_Base_Start_IT+0x50>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d00b      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0x42>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d20:	d007      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e01d      	b.n	8004d92 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f815 	bl	8004d9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 fb2c 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b082      	sub	sp, #8
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d122      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d11b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0202 	mvn.w	r2, #2
 8004dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fad6 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fac8 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fad9 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d122      	bne.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d11b      	bne.n	8004e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0204 	mvn.w	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 faac 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fa9e 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 faaf 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d122      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d11b      	bne.n	8004eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0208 	mvn.w	r2, #8
 8004e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2204      	movs	r2, #4
 8004e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fa82 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8004e9e:	e005      	b.n	8004eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fa74 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa85 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d122      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d11b      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0210 	mvn.w	r2, #16
 8004ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2208      	movs	r2, #8
 8004edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa58 	bl	80053a2 <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa4a 	bl	800538e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa5b 	bl	80053b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0201 	mvn.w	r2, #1
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fc fa23 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d10e      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	d107      	bne.n	8004f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fee9 	bl	8005d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b80      	cmp	r3, #128	; 0x80
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fedc 	bl	8005d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f96:	2b40      	cmp	r3, #64	; 0x40
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa09 	bl	80053ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0220 	mvn.w	r2, #32
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fe9c 	bl	8005d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005002:	2302      	movs	r3, #2
 8005004:	e105      	b.n	8005212 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b14      	cmp	r3, #20
 800501a:	f200 80f0 	bhi.w	80051fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005079 	.word	0x08005079
 8005028:	080051ff 	.word	0x080051ff
 800502c:	080051ff 	.word	0x080051ff
 8005030:	080051ff 	.word	0x080051ff
 8005034:	080050b9 	.word	0x080050b9
 8005038:	080051ff 	.word	0x080051ff
 800503c:	080051ff 	.word	0x080051ff
 8005040:	080051ff 	.word	0x080051ff
 8005044:	080050fb 	.word	0x080050fb
 8005048:	080051ff 	.word	0x080051ff
 800504c:	080051ff 	.word	0x080051ff
 8005050:	080051ff 	.word	0x080051ff
 8005054:	0800513b 	.word	0x0800513b
 8005058:	080051ff 	.word	0x080051ff
 800505c:	080051ff 	.word	0x080051ff
 8005060:	080051ff 	.word	0x080051ff
 8005064:	0800517d 	.word	0x0800517d
 8005068:	080051ff 	.word	0x080051ff
 800506c:	080051ff 	.word	0x080051ff
 8005070:	080051ff 	.word	0x080051ff
 8005074:	080051bd 	.word	0x080051bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fa26 	bl	80054d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0208 	orr.w	r2, r2, #8
 8005092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	619a      	str	r2, [r3, #24]
      break;
 80050b6:	e0a3      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa8c 	bl	80055dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]
      break;
 80050f8:	e082      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 faeb 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69da      	ldr	r2, [r3, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0208 	orr.w	r2, r2, #8
 8005114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0204 	bic.w	r2, r2, #4
 8005124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69d9      	ldr	r1, [r3, #28]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	61da      	str	r2, [r3, #28]
      break;
 8005138:	e062      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fb49 	bl	80057d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69d9      	ldr	r1, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	61da      	str	r2, [r3, #28]
      break;
 800517a:	e041      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb8c 	bl	80058a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051ba:	e021      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbca 	bl	800595c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051fc:	e000      	b.n	8005200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80051fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop

0800521c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIM_ConfigClockSource+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e0a8      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x16a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005256:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d067      	beq.n	8005340 <HAL_TIM_ConfigClockSource+0x124>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d80b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x70>
 8005274:	2b10      	cmp	r3, #16
 8005276:	d073      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x144>
 8005278:	2b10      	cmp	r3, #16
 800527a:	d802      	bhi.n	8005282 <HAL_TIM_ConfigClockSource+0x66>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d06f      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005280:	e078      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005282:	2b20      	cmp	r3, #32
 8005284:	d06c      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x144>
 8005286:	2b30      	cmp	r3, #48	; 0x30
 8005288:	d06a      	beq.n	8005360 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800528a:	e073      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d00d      	beq.n	80052ac <HAL_TIM_ConfigClockSource+0x90>
 8005290:	2b70      	cmp	r3, #112	; 0x70
 8005292:	d804      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x82>
 8005294:	2b50      	cmp	r3, #80	; 0x50
 8005296:	d033      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xe4>
 8005298:	2b60      	cmp	r3, #96	; 0x60
 800529a:	d041      	beq.n	8005320 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800529c:	e06a      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a2:	d066      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x156>
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d017      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80052aa:	e063      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f000 fc28 	bl	8005b10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e04c      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6899      	ldr	r1, [r3, #8]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f000 fc11 	bl	8005b10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fc:	609a      	str	r2, [r3, #8]
      break;
 80052fe:	e039      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6859      	ldr	r1, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	461a      	mov	r2, r3
 800530e:	f000 fb85 	bl	8005a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2150      	movs	r1, #80	; 0x50
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fbde 	bl	8005ada <TIM_ITRx_SetConfig>
      break;
 800531e:	e029      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6818      	ldr	r0, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	461a      	mov	r2, r3
 800532e:	f000 fba4 	bl	8005a7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2160      	movs	r1, #96	; 0x60
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fbce 	bl	8005ada <TIM_ITRx_SetConfig>
      break;
 800533e:	e019      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	461a      	mov	r2, r3
 800534e:	f000 fb65 	bl	8005a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fbbe 	bl	8005ada <TIM_ITRx_SetConfig>
      break;
 800535e:	e009      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fbb5 	bl	8005ada <TIM_ITRx_SetConfig>
      break;
 8005370:	e000      	b.n	8005374 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a32      	ldr	r2, [pc, #200]	; (80054bc <TIM_Base_SetConfig+0xdc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x28>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x28>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <TIM_Base_SetConfig+0xe0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <TIM_Base_SetConfig+0xdc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <TIM_Base_SetConfig+0x6a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d00f      	beq.n	800544a <TIM_Base_SetConfig+0x6a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a24      	ldr	r2, [pc, #144]	; (80054c0 <TIM_Base_SetConfig+0xe0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00b      	beq.n	800544a <TIM_Base_SetConfig+0x6a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <TIM_Base_SetConfig+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d007      	beq.n	800544a <TIM_Base_SetConfig+0x6a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <TIM_Base_SetConfig+0xe8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_Base_SetConfig+0x6a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a21      	ldr	r2, [pc, #132]	; (80054cc <TIM_Base_SetConfig+0xec>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <TIM_Base_SetConfig+0xdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_Base_SetConfig+0xc0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <TIM_Base_SetConfig+0xe4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_Base_SetConfig+0xc0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <TIM_Base_SetConfig+0xe8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_Base_SetConfig+0xc0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <TIM_Base_SetConfig+0xec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d103      	bne.n	80054a8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	615a      	str	r2, [r3, #20]
}
 80054ae:	bf00      	nop
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 0302 	bic.w	r3, r3, #2
 800551c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a28      	ldr	r2, [pc, #160]	; (80055cc <TIM_OC1_SetConfig+0xfc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_OC1_SetConfig+0x78>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <TIM_OC1_SetConfig+0x100>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_OC1_SetConfig+0x78>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <TIM_OC1_SetConfig+0x104>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC1_SetConfig+0x78>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <TIM_OC1_SetConfig+0x108>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10c      	bne.n	8005562 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0308 	bic.w	r3, r3, #8
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f023 0304 	bic.w	r3, r3, #4
 8005560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <TIM_OC1_SetConfig+0xfc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_OC1_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <TIM_OC1_SetConfig+0x100>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_OC1_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a17      	ldr	r2, [pc, #92]	; (80055d4 <TIM_OC1_SetConfig+0x104>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_OC1_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <TIM_OC1_SetConfig+0x108>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d111      	bne.n	80055a6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	621a      	str	r2, [r3, #32]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800

080055dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0210 	bic.w	r2, r3, #16
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0320 	bic.w	r3, r3, #32
 800562a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a24      	ldr	r2, [pc, #144]	; (80056cc <TIM_OC2_SetConfig+0xf0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10d      	bne.n	800565c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <TIM_OC2_SetConfig+0xf0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_OC2_SetConfig+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <TIM_OC2_SetConfig+0xf4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_OC2_SetConfig+0xa0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <TIM_OC2_SetConfig+0xf8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC2_SetConfig+0xa0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <TIM_OC2_SetConfig+0xfc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d113      	bne.n	80056a4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005682:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800568a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40012c00 	.word	0x40012c00
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <TIM_OC3_SetConfig+0xec>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10d      	bne.n	800575a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005758:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <TIM_OC3_SetConfig+0xec>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00b      	beq.n	800577a <TIM_OC3_SetConfig+0x9e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <TIM_OC3_SetConfig+0xf0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <TIM_OC3_SetConfig+0x9e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <TIM_OC3_SetConfig+0xf4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_OC3_SetConfig+0x9e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <TIM_OC3_SetConfig+0xf8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d113      	bne.n	80057a2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	621a      	str	r2, [r3, #32]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800

080057d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4313      	orrs	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	031b      	lsls	r3, r3, #12
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a16      	ldr	r2, [pc, #88]	; (8005890 <TIM_OC4_SetConfig+0xb8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_OC4_SetConfig+0x7c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC4_SetConfig+0xbc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC4_SetConfig+0x7c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a14      	ldr	r2, [pc, #80]	; (8005898 <TIM_OC4_SetConfig+0xc0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC4_SetConfig+0x7c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <TIM_OC4_SetConfig+0xc4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d109      	bne.n	8005868 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800585a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <TIM_OC5_SetConfig+0xac>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00b      	beq.n	8005912 <TIM_OC5_SetConfig+0x72>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <TIM_OC5_SetConfig+0xb0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d007      	beq.n	8005912 <TIM_OC5_SetConfig+0x72>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a13      	ldr	r2, [pc, #76]	; (8005954 <TIM_OC5_SetConfig+0xb4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC5_SetConfig+0x72>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a12      	ldr	r2, [pc, #72]	; (8005958 <TIM_OC5_SetConfig+0xb8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d109      	bne.n	8005926 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	621a      	str	r2, [r3, #32]
}
 8005940:	bf00      	nop
 8005942:	371c      	adds	r7, #28
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	40012c00 	.word	0x40012c00
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800

0800595c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	051b      	lsls	r3, r3, #20
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <TIM_OC6_SetConfig+0xb0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_OC6_SetConfig+0x74>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <TIM_OC6_SetConfig+0xb4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_OC6_SetConfig+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <TIM_OC6_SetConfig+0xb8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC6_SetConfig+0x74>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <TIM_OC6_SetConfig+0xbc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d109      	bne.n	80059e4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	029b      	lsls	r3, r3, #10
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800

08005a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 030a 	bic.w	r3, r3, #10
 8005a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b087      	sub	sp, #28
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0210 	bic.w	r2, r3, #16
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f043 0307 	orr.w	r3, r3, #7
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	609a      	str	r2, [r3, #8]
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	021a      	lsls	r2, r3, #8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e054      	b.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00e      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d009      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10c      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40014000 	.word	0x40014000

08005c2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e060      	b.n	8005d0a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d115      	bne.n	8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	051b      	lsls	r3, r3, #20
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <__errno>:
 8005d58:	4b01      	ldr	r3, [pc, #4]	; (8005d60 <__errno+0x8>)
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000038 	.word	0x20000038

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4e0d      	ldr	r6, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1ba4      	subs	r4, r4, r6
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2500      	movs	r5, #0
 8005d70:	42a5      	cmp	r5, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4e0b      	ldr	r6, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f001 ff5c 	bl	8007c34 <_init>
 8005d7c:	1ba4      	subs	r4, r4, r6
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2500      	movs	r5, #0
 8005d82:	42a5      	cmp	r5, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d8c:	4798      	blx	r3
 8005d8e:	3501      	adds	r5, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d96:	4798      	blx	r3
 8005d98:	3501      	adds	r5, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08007f00 	.word	0x08007f00
 8005da0:	08007f00 	.word	0x08007f00
 8005da4:	08007f00 	.word	0x08007f00
 8005da8:	08007f04 	.word	0x08007f04

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <iprintf>:
 8005dbc:	b40f      	push	{r0, r1, r2, r3}
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <iprintf+0x2c>)
 8005dc0:	b513      	push	{r0, r1, r4, lr}
 8005dc2:	681c      	ldr	r4, [r3, #0]
 8005dc4:	b124      	cbz	r4, 8005dd0 <iprintf+0x14>
 8005dc6:	69a3      	ldr	r3, [r4, #24]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <iprintf+0x14>
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f000 f84e 	bl	8005e6c <__sinit>
 8005dd0:	ab05      	add	r3, sp, #20
 8005dd2:	9a04      	ldr	r2, [sp, #16]
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f000 f955 	bl	8006088 <_vfiprintf_r>
 8005dde:	b002      	add	sp, #8
 8005de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de4:	b004      	add	sp, #16
 8005de6:	4770      	bx	lr
 8005de8:	20000038 	.word	0x20000038

08005dec <std>:
 8005dec:	2300      	movs	r3, #0
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
 8005df2:	e9c0 3300 	strd	r3, r3, [r0]
 8005df6:	6083      	str	r3, [r0, #8]
 8005df8:	8181      	strh	r1, [r0, #12]
 8005dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8005dfc:	81c2      	strh	r2, [r0, #14]
 8005dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e02:	6183      	str	r3, [r0, #24]
 8005e04:	4619      	mov	r1, r3
 8005e06:	2208      	movs	r2, #8
 8005e08:	305c      	adds	r0, #92	; 0x5c
 8005e0a:	f7ff ffcf 	bl	8005dac <memset>
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <std+0x38>)
 8005e10:	6263      	str	r3, [r4, #36]	; 0x24
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <std+0x3c>)
 8005e14:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <std+0x40>)
 8005e18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <std+0x44>)
 8005e1c:	6224      	str	r4, [r4, #32]
 8005e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	bf00      	nop
 8005e24:	080065e5 	.word	0x080065e5
 8005e28:	08006607 	.word	0x08006607
 8005e2c:	0800663f 	.word	0x0800663f
 8005e30:	08006663 	.word	0x08006663

08005e34 <_cleanup_r>:
 8005e34:	4901      	ldr	r1, [pc, #4]	; (8005e3c <_cleanup_r+0x8>)
 8005e36:	f000 b885 	b.w	8005f44 <_fwalk_reent>
 8005e3a:	bf00      	nop
 8005e3c:	0800693d 	.word	0x0800693d

08005e40 <__sfmoreglue>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	1e4a      	subs	r2, r1, #1
 8005e44:	2568      	movs	r5, #104	; 0x68
 8005e46:	4355      	muls	r5, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e4e:	f000 f897 	bl	8005f80 <_malloc_r>
 8005e52:	4604      	mov	r4, r0
 8005e54:	b140      	cbz	r0, 8005e68 <__sfmoreglue+0x28>
 8005e56:	2100      	movs	r1, #0
 8005e58:	e9c0 1600 	strd	r1, r6, [r0]
 8005e5c:	300c      	adds	r0, #12
 8005e5e:	60a0      	str	r0, [r4, #8]
 8005e60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e64:	f7ff ffa2 	bl	8005dac <memset>
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}

08005e6c <__sinit>:
 8005e6c:	6983      	ldr	r3, [r0, #24]
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	bb33      	cbnz	r3, 8005ec2 <__sinit+0x56>
 8005e74:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005e78:	6503      	str	r3, [r0, #80]	; 0x50
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <__sinit+0x58>)
 8005e7c:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <__sinit+0x5c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6282      	str	r2, [r0, #40]	; 0x28
 8005e82:	4298      	cmp	r0, r3
 8005e84:	bf04      	itt	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	6183      	streq	r3, [r0, #24]
 8005e8a:	f000 f81f 	bl	8005ecc <__sfp>
 8005e8e:	6060      	str	r0, [r4, #4]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 f81b 	bl	8005ecc <__sfp>
 8005e96:	60a0      	str	r0, [r4, #8]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 f817 	bl	8005ecc <__sfp>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	60e0      	str	r0, [r4, #12]
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	6860      	ldr	r0, [r4, #4]
 8005ea6:	f7ff ffa1 	bl	8005dec <std>
 8005eaa:	2201      	movs	r2, #1
 8005eac:	2109      	movs	r1, #9
 8005eae:	68a0      	ldr	r0, [r4, #8]
 8005eb0:	f7ff ff9c 	bl	8005dec <std>
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	2112      	movs	r1, #18
 8005eb8:	68e0      	ldr	r0, [r4, #12]
 8005eba:	f7ff ff97 	bl	8005dec <std>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61a3      	str	r3, [r4, #24]
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	08007c8c 	.word	0x08007c8c
 8005ec8:	08005e35 	.word	0x08005e35

08005ecc <__sfp>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	4b1b      	ldr	r3, [pc, #108]	; (8005f3c <__sfp+0x70>)
 8005ed0:	681e      	ldr	r6, [r3, #0]
 8005ed2:	69b3      	ldr	r3, [r6, #24]
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	b913      	cbnz	r3, 8005ede <__sfp+0x12>
 8005ed8:	4630      	mov	r0, r6
 8005eda:	f7ff ffc7 	bl	8005e6c <__sinit>
 8005ede:	3648      	adds	r6, #72	; 0x48
 8005ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	d503      	bpl.n	8005ef0 <__sfp+0x24>
 8005ee8:	6833      	ldr	r3, [r6, #0]
 8005eea:	b133      	cbz	r3, 8005efa <__sfp+0x2e>
 8005eec:	6836      	ldr	r6, [r6, #0]
 8005eee:	e7f7      	b.n	8005ee0 <__sfp+0x14>
 8005ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ef4:	b16d      	cbz	r5, 8005f12 <__sfp+0x46>
 8005ef6:	3468      	adds	r4, #104	; 0x68
 8005ef8:	e7f4      	b.n	8005ee4 <__sfp+0x18>
 8005efa:	2104      	movs	r1, #4
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff ff9f 	bl	8005e40 <__sfmoreglue>
 8005f02:	6030      	str	r0, [r6, #0]
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1f1      	bne.n	8005eec <__sfp+0x20>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4620      	mov	r0, r4
 8005f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <__sfp+0x74>)
 8005f14:	6665      	str	r5, [r4, #100]	; 0x64
 8005f16:	e9c4 5500 	strd	r5, r5, [r4]
 8005f1a:	60a5      	str	r5, [r4, #8]
 8005f1c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005f20:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005f24:	2208      	movs	r2, #8
 8005f26:	4629      	mov	r1, r5
 8005f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f2c:	f7ff ff3e 	bl	8005dac <memset>
 8005f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f38:	e7e9      	b.n	8005f0e <__sfp+0x42>
 8005f3a:	bf00      	nop
 8005f3c:	08007c8c 	.word	0x08007c8c
 8005f40:	ffff0001 	.word	0xffff0001

08005f44 <_fwalk_reent>:
 8005f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f48:	4680      	mov	r8, r0
 8005f4a:	4689      	mov	r9, r1
 8005f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f50:	2600      	movs	r6, #0
 8005f52:	b914      	cbnz	r4, 8005f5a <_fwalk_reent+0x16>
 8005f54:	4630      	mov	r0, r6
 8005f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005f5e:	3f01      	subs	r7, #1
 8005f60:	d501      	bpl.n	8005f66 <_fwalk_reent+0x22>
 8005f62:	6824      	ldr	r4, [r4, #0]
 8005f64:	e7f5      	b.n	8005f52 <_fwalk_reent+0xe>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d907      	bls.n	8005f7c <_fwalk_reent+0x38>
 8005f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f70:	3301      	adds	r3, #1
 8005f72:	d003      	beq.n	8005f7c <_fwalk_reent+0x38>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4640      	mov	r0, r8
 8005f78:	47c8      	blx	r9
 8005f7a:	4306      	orrs	r6, r0
 8005f7c:	3568      	adds	r5, #104	; 0x68
 8005f7e:	e7ee      	b.n	8005f5e <_fwalk_reent+0x1a>

08005f80 <_malloc_r>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	1ccd      	adds	r5, r1, #3
 8005f84:	f025 0503 	bic.w	r5, r5, #3
 8005f88:	3508      	adds	r5, #8
 8005f8a:	2d0c      	cmp	r5, #12
 8005f8c:	bf38      	it	cc
 8005f8e:	250c      	movcc	r5, #12
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	4606      	mov	r6, r0
 8005f94:	db01      	blt.n	8005f9a <_malloc_r+0x1a>
 8005f96:	42a9      	cmp	r1, r5
 8005f98:	d903      	bls.n	8005fa2 <_malloc_r+0x22>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	f000 fd6b 	bl	8006a7c <__malloc_lock>
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <_malloc_r+0xac>)
 8005fa8:	6814      	ldr	r4, [r2, #0]
 8005faa:	4621      	mov	r1, r4
 8005fac:	b991      	cbnz	r1, 8005fd4 <_malloc_r+0x54>
 8005fae:	4c20      	ldr	r4, [pc, #128]	; (8006030 <_malloc_r+0xb0>)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	b91b      	cbnz	r3, 8005fbc <_malloc_r+0x3c>
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 fb05 	bl	80065c4 <_sbrk_r>
 8005fba:	6020      	str	r0, [r4, #0]
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f000 fb00 	bl	80065c4 <_sbrk_r>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d124      	bne.n	8006012 <_malloc_r+0x92>
 8005fc8:	230c      	movs	r3, #12
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 fd56 	bl	8006a7e <__malloc_unlock>
 8005fd2:	e7e4      	b.n	8005f9e <_malloc_r+0x1e>
 8005fd4:	680b      	ldr	r3, [r1, #0]
 8005fd6:	1b5b      	subs	r3, r3, r5
 8005fd8:	d418      	bmi.n	800600c <_malloc_r+0x8c>
 8005fda:	2b0b      	cmp	r3, #11
 8005fdc:	d90f      	bls.n	8005ffe <_malloc_r+0x7e>
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	50cd      	str	r5, [r1, r3]
 8005fe2:	18cc      	adds	r4, r1, r3
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 fd4a 	bl	8006a7e <__malloc_unlock>
 8005fea:	f104 000b 	add.w	r0, r4, #11
 8005fee:	1d23      	adds	r3, r4, #4
 8005ff0:	f020 0007 	bic.w	r0, r0, #7
 8005ff4:	1ac3      	subs	r3, r0, r3
 8005ff6:	d0d3      	beq.n	8005fa0 <_malloc_r+0x20>
 8005ff8:	425a      	negs	r2, r3
 8005ffa:	50e2      	str	r2, [r4, r3]
 8005ffc:	e7d0      	b.n	8005fa0 <_malloc_r+0x20>
 8005ffe:	428c      	cmp	r4, r1
 8006000:	684b      	ldr	r3, [r1, #4]
 8006002:	bf16      	itet	ne
 8006004:	6063      	strne	r3, [r4, #4]
 8006006:	6013      	streq	r3, [r2, #0]
 8006008:	460c      	movne	r4, r1
 800600a:	e7eb      	b.n	8005fe4 <_malloc_r+0x64>
 800600c:	460c      	mov	r4, r1
 800600e:	6849      	ldr	r1, [r1, #4]
 8006010:	e7cc      	b.n	8005fac <_malloc_r+0x2c>
 8006012:	1cc4      	adds	r4, r0, #3
 8006014:	f024 0403 	bic.w	r4, r4, #3
 8006018:	42a0      	cmp	r0, r4
 800601a:	d005      	beq.n	8006028 <_malloc_r+0xa8>
 800601c:	1a21      	subs	r1, r4, r0
 800601e:	4630      	mov	r0, r6
 8006020:	f000 fad0 	bl	80065c4 <_sbrk_r>
 8006024:	3001      	adds	r0, #1
 8006026:	d0cf      	beq.n	8005fc8 <_malloc_r+0x48>
 8006028:	6025      	str	r5, [r4, #0]
 800602a:	e7db      	b.n	8005fe4 <_malloc_r+0x64>
 800602c:	200000d0 	.word	0x200000d0
 8006030:	200000d4 	.word	0x200000d4

08006034 <__sfputc_r>:
 8006034:	6893      	ldr	r3, [r2, #8]
 8006036:	3b01      	subs	r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	b410      	push	{r4}
 800603c:	6093      	str	r3, [r2, #8]
 800603e:	da08      	bge.n	8006052 <__sfputc_r+0x1e>
 8006040:	6994      	ldr	r4, [r2, #24]
 8006042:	42a3      	cmp	r3, r4
 8006044:	db01      	blt.n	800604a <__sfputc_r+0x16>
 8006046:	290a      	cmp	r1, #10
 8006048:	d103      	bne.n	8006052 <__sfputc_r+0x1e>
 800604a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800604e:	f000 bb0d 	b.w	800666c <__swbuf_r>
 8006052:	6813      	ldr	r3, [r2, #0]
 8006054:	1c58      	adds	r0, r3, #1
 8006056:	6010      	str	r0, [r2, #0]
 8006058:	7019      	strb	r1, [r3, #0]
 800605a:	4608      	mov	r0, r1
 800605c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006060:	4770      	bx	lr

08006062 <__sfputs_r>:
 8006062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006064:	4606      	mov	r6, r0
 8006066:	460f      	mov	r7, r1
 8006068:	4614      	mov	r4, r2
 800606a:	18d5      	adds	r5, r2, r3
 800606c:	42ac      	cmp	r4, r5
 800606e:	d101      	bne.n	8006074 <__sfputs_r+0x12>
 8006070:	2000      	movs	r0, #0
 8006072:	e007      	b.n	8006084 <__sfputs_r+0x22>
 8006074:	463a      	mov	r2, r7
 8006076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ffda 	bl	8006034 <__sfputc_r>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d1f3      	bne.n	800606c <__sfputs_r+0xa>
 8006084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006088 <_vfiprintf_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	460c      	mov	r4, r1
 800608e:	b09d      	sub	sp, #116	; 0x74
 8006090:	4617      	mov	r7, r2
 8006092:	461d      	mov	r5, r3
 8006094:	4606      	mov	r6, r0
 8006096:	b118      	cbz	r0, 80060a0 <_vfiprintf_r+0x18>
 8006098:	6983      	ldr	r3, [r0, #24]
 800609a:	b90b      	cbnz	r3, 80060a0 <_vfiprintf_r+0x18>
 800609c:	f7ff fee6 	bl	8005e6c <__sinit>
 80060a0:	4b7c      	ldr	r3, [pc, #496]	; (8006294 <_vfiprintf_r+0x20c>)
 80060a2:	429c      	cmp	r4, r3
 80060a4:	d158      	bne.n	8006158 <_vfiprintf_r+0xd0>
 80060a6:	6874      	ldr	r4, [r6, #4]
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	0718      	lsls	r0, r3, #28
 80060ac:	d55e      	bpl.n	800616c <_vfiprintf_r+0xe4>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d05b      	beq.n	800616c <_vfiprintf_r+0xe4>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9309      	str	r3, [sp, #36]	; 0x24
 80060b8:	2320      	movs	r3, #32
 80060ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c4:	9503      	str	r5, [sp, #12]
 80060c6:	f04f 0b01 	mov.w	fp, #1
 80060ca:	46b8      	mov	r8, r7
 80060cc:	4645      	mov	r5, r8
 80060ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060d2:	b10b      	cbz	r3, 80060d8 <_vfiprintf_r+0x50>
 80060d4:	2b25      	cmp	r3, #37	; 0x25
 80060d6:	d154      	bne.n	8006182 <_vfiprintf_r+0xfa>
 80060d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80060dc:	d00b      	beq.n	80060f6 <_vfiprintf_r+0x6e>
 80060de:	4653      	mov	r3, sl
 80060e0:	463a      	mov	r2, r7
 80060e2:	4621      	mov	r1, r4
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff ffbc 	bl	8006062 <__sfputs_r>
 80060ea:	3001      	adds	r0, #1
 80060ec:	f000 80c2 	beq.w	8006274 <_vfiprintf_r+0x1ec>
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	4453      	add	r3, sl
 80060f4:	9309      	str	r3, [sp, #36]	; 0x24
 80060f6:	f898 3000 	ldrb.w	r3, [r8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80ba 	beq.w	8006274 <_vfiprintf_r+0x1ec>
 8006100:	2300      	movs	r3, #0
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	9307      	str	r3, [sp, #28]
 800610e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006112:	931a      	str	r3, [sp, #104]	; 0x68
 8006114:	46a8      	mov	r8, r5
 8006116:	2205      	movs	r2, #5
 8006118:	f818 1b01 	ldrb.w	r1, [r8], #1
 800611c:	485e      	ldr	r0, [pc, #376]	; (8006298 <_vfiprintf_r+0x210>)
 800611e:	f7fa f857 	bl	80001d0 <memchr>
 8006122:	9b04      	ldr	r3, [sp, #16]
 8006124:	bb78      	cbnz	r0, 8006186 <_vfiprintf_r+0xfe>
 8006126:	06d9      	lsls	r1, r3, #27
 8006128:	bf44      	itt	mi
 800612a:	2220      	movmi	r2, #32
 800612c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006130:	071a      	lsls	r2, r3, #28
 8006132:	bf44      	itt	mi
 8006134:	222b      	movmi	r2, #43	; 0x2b
 8006136:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800613a:	782a      	ldrb	r2, [r5, #0]
 800613c:	2a2a      	cmp	r2, #42	; 0x2a
 800613e:	d02a      	beq.n	8006196 <_vfiprintf_r+0x10e>
 8006140:	9a07      	ldr	r2, [sp, #28]
 8006142:	46a8      	mov	r8, r5
 8006144:	2000      	movs	r0, #0
 8006146:	250a      	movs	r5, #10
 8006148:	4641      	mov	r1, r8
 800614a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800614e:	3b30      	subs	r3, #48	; 0x30
 8006150:	2b09      	cmp	r3, #9
 8006152:	d969      	bls.n	8006228 <_vfiprintf_r+0x1a0>
 8006154:	b360      	cbz	r0, 80061b0 <_vfiprintf_r+0x128>
 8006156:	e024      	b.n	80061a2 <_vfiprintf_r+0x11a>
 8006158:	4b50      	ldr	r3, [pc, #320]	; (800629c <_vfiprintf_r+0x214>)
 800615a:	429c      	cmp	r4, r3
 800615c:	d101      	bne.n	8006162 <_vfiprintf_r+0xda>
 800615e:	68b4      	ldr	r4, [r6, #8]
 8006160:	e7a2      	b.n	80060a8 <_vfiprintf_r+0x20>
 8006162:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <_vfiprintf_r+0x218>)
 8006164:	429c      	cmp	r4, r3
 8006166:	bf08      	it	eq
 8006168:	68f4      	ldreq	r4, [r6, #12]
 800616a:	e79d      	b.n	80060a8 <_vfiprintf_r+0x20>
 800616c:	4621      	mov	r1, r4
 800616e:	4630      	mov	r0, r6
 8006170:	f000 fae0 	bl	8006734 <__swsetup_r>
 8006174:	2800      	cmp	r0, #0
 8006176:	d09d      	beq.n	80060b4 <_vfiprintf_r+0x2c>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	b01d      	add	sp, #116	; 0x74
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	46a8      	mov	r8, r5
 8006184:	e7a2      	b.n	80060cc <_vfiprintf_r+0x44>
 8006186:	4a44      	ldr	r2, [pc, #272]	; (8006298 <_vfiprintf_r+0x210>)
 8006188:	1a80      	subs	r0, r0, r2
 800618a:	fa0b f000 	lsl.w	r0, fp, r0
 800618e:	4318      	orrs	r0, r3
 8006190:	9004      	str	r0, [sp, #16]
 8006192:	4645      	mov	r5, r8
 8006194:	e7be      	b.n	8006114 <_vfiprintf_r+0x8c>
 8006196:	9a03      	ldr	r2, [sp, #12]
 8006198:	1d11      	adds	r1, r2, #4
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	9103      	str	r1, [sp, #12]
 800619e:	2a00      	cmp	r2, #0
 80061a0:	db01      	blt.n	80061a6 <_vfiprintf_r+0x11e>
 80061a2:	9207      	str	r2, [sp, #28]
 80061a4:	e004      	b.n	80061b0 <_vfiprintf_r+0x128>
 80061a6:	4252      	negs	r2, r2
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	9207      	str	r2, [sp, #28]
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	f898 3000 	ldrb.w	r3, [r8]
 80061b4:	2b2e      	cmp	r3, #46	; 0x2e
 80061b6:	d10e      	bne.n	80061d6 <_vfiprintf_r+0x14e>
 80061b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80061bc:	2b2a      	cmp	r3, #42	; 0x2a
 80061be:	d138      	bne.n	8006232 <_vfiprintf_r+0x1aa>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	1d1a      	adds	r2, r3, #4
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	9203      	str	r2, [sp, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfb8      	it	lt
 80061cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80061d0:	f108 0802 	add.w	r8, r8, #2
 80061d4:	9305      	str	r3, [sp, #20]
 80061d6:	4d33      	ldr	r5, [pc, #204]	; (80062a4 <_vfiprintf_r+0x21c>)
 80061d8:	f898 1000 	ldrb.w	r1, [r8]
 80061dc:	2203      	movs	r2, #3
 80061de:	4628      	mov	r0, r5
 80061e0:	f7f9 fff6 	bl	80001d0 <memchr>
 80061e4:	b140      	cbz	r0, 80061f8 <_vfiprintf_r+0x170>
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	1b40      	subs	r0, r0, r5
 80061ea:	fa03 f000 	lsl.w	r0, r3, r0
 80061ee:	9b04      	ldr	r3, [sp, #16]
 80061f0:	4303      	orrs	r3, r0
 80061f2:	f108 0801 	add.w	r8, r8, #1
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	f898 1000 	ldrb.w	r1, [r8]
 80061fc:	482a      	ldr	r0, [pc, #168]	; (80062a8 <_vfiprintf_r+0x220>)
 80061fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006202:	2206      	movs	r2, #6
 8006204:	f108 0701 	add.w	r7, r8, #1
 8006208:	f7f9 ffe2 	bl	80001d0 <memchr>
 800620c:	2800      	cmp	r0, #0
 800620e:	d037      	beq.n	8006280 <_vfiprintf_r+0x1f8>
 8006210:	4b26      	ldr	r3, [pc, #152]	; (80062ac <_vfiprintf_r+0x224>)
 8006212:	bb1b      	cbnz	r3, 800625c <_vfiprintf_r+0x1d4>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	3307      	adds	r3, #7
 8006218:	f023 0307 	bic.w	r3, r3, #7
 800621c:	3308      	adds	r3, #8
 800621e:	9303      	str	r3, [sp, #12]
 8006220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006222:	444b      	add	r3, r9
 8006224:	9309      	str	r3, [sp, #36]	; 0x24
 8006226:	e750      	b.n	80060ca <_vfiprintf_r+0x42>
 8006228:	fb05 3202 	mla	r2, r5, r2, r3
 800622c:	2001      	movs	r0, #1
 800622e:	4688      	mov	r8, r1
 8006230:	e78a      	b.n	8006148 <_vfiprintf_r+0xc0>
 8006232:	2300      	movs	r3, #0
 8006234:	f108 0801 	add.w	r8, r8, #1
 8006238:	9305      	str	r3, [sp, #20]
 800623a:	4619      	mov	r1, r3
 800623c:	250a      	movs	r5, #10
 800623e:	4640      	mov	r0, r8
 8006240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006244:	3a30      	subs	r2, #48	; 0x30
 8006246:	2a09      	cmp	r2, #9
 8006248:	d903      	bls.n	8006252 <_vfiprintf_r+0x1ca>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0c3      	beq.n	80061d6 <_vfiprintf_r+0x14e>
 800624e:	9105      	str	r1, [sp, #20]
 8006250:	e7c1      	b.n	80061d6 <_vfiprintf_r+0x14e>
 8006252:	fb05 2101 	mla	r1, r5, r1, r2
 8006256:	2301      	movs	r3, #1
 8006258:	4680      	mov	r8, r0
 800625a:	e7f0      	b.n	800623e <_vfiprintf_r+0x1b6>
 800625c:	ab03      	add	r3, sp, #12
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4622      	mov	r2, r4
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <_vfiprintf_r+0x228>)
 8006264:	a904      	add	r1, sp, #16
 8006266:	4630      	mov	r0, r6
 8006268:	f3af 8000 	nop.w
 800626c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006270:	4681      	mov	r9, r0
 8006272:	d1d5      	bne.n	8006220 <_vfiprintf_r+0x198>
 8006274:	89a3      	ldrh	r3, [r4, #12]
 8006276:	065b      	lsls	r3, r3, #25
 8006278:	f53f af7e 	bmi.w	8006178 <_vfiprintf_r+0xf0>
 800627c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800627e:	e77d      	b.n	800617c <_vfiprintf_r+0xf4>
 8006280:	ab03      	add	r3, sp, #12
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	4622      	mov	r2, r4
 8006286:	4b0a      	ldr	r3, [pc, #40]	; (80062b0 <_vfiprintf_r+0x228>)
 8006288:	a904      	add	r1, sp, #16
 800628a:	4630      	mov	r0, r6
 800628c:	f000 f888 	bl	80063a0 <_printf_i>
 8006290:	e7ec      	b.n	800626c <_vfiprintf_r+0x1e4>
 8006292:	bf00      	nop
 8006294:	08007cb0 	.word	0x08007cb0
 8006298:	08007cf0 	.word	0x08007cf0
 800629c:	08007cd0 	.word	0x08007cd0
 80062a0:	08007c90 	.word	0x08007c90
 80062a4:	08007cf6 	.word	0x08007cf6
 80062a8:	08007cfa 	.word	0x08007cfa
 80062ac:	00000000 	.word	0x00000000
 80062b0:	08006063 	.word	0x08006063

080062b4 <_printf_common>:
 80062b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	4691      	mov	r9, r2
 80062ba:	461f      	mov	r7, r3
 80062bc:	688a      	ldr	r2, [r1, #8]
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062c4:	4293      	cmp	r3, r2
 80062c6:	bfb8      	it	lt
 80062c8:	4613      	movlt	r3, r2
 80062ca:	f8c9 3000 	str.w	r3, [r9]
 80062ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062d2:	4606      	mov	r6, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	b112      	cbz	r2, 80062de <_printf_common+0x2a>
 80062d8:	3301      	adds	r3, #1
 80062da:	f8c9 3000 	str.w	r3, [r9]
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	0699      	lsls	r1, r3, #26
 80062e2:	bf42      	ittt	mi
 80062e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062e8:	3302      	addmi	r3, #2
 80062ea:	f8c9 3000 	strmi.w	r3, [r9]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d107      	bne.n	8006306 <_printf_common+0x52>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	42ab      	cmp	r3, r5
 8006304:	dc28      	bgt.n	8006358 <_printf_common+0xa4>
 8006306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	3300      	adds	r3, #0
 800630e:	bf18      	it	ne
 8006310:	2301      	movne	r3, #1
 8006312:	0692      	lsls	r2, r2, #26
 8006314:	d42d      	bmi.n	8006372 <_printf_common+0xbe>
 8006316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800631a:	4639      	mov	r1, r7
 800631c:	4630      	mov	r0, r6
 800631e:	47c0      	blx	r8
 8006320:	3001      	adds	r0, #1
 8006322:	d020      	beq.n	8006366 <_printf_common+0xb2>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	68e5      	ldr	r5, [r4, #12]
 8006328:	f8d9 2000 	ldr.w	r2, [r9]
 800632c:	f003 0306 	and.w	r3, r3, #6
 8006330:	2b04      	cmp	r3, #4
 8006332:	bf08      	it	eq
 8006334:	1aad      	subeq	r5, r5, r2
 8006336:	68a3      	ldr	r3, [r4, #8]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	bf0c      	ite	eq
 800633c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006340:	2500      	movne	r5, #0
 8006342:	4293      	cmp	r3, r2
 8006344:	bfc4      	itt	gt
 8006346:	1a9b      	subgt	r3, r3, r2
 8006348:	18ed      	addgt	r5, r5, r3
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	341a      	adds	r4, #26
 8006350:	454d      	cmp	r5, r9
 8006352:	d11a      	bne.n	800638a <_printf_common+0xd6>
 8006354:	2000      	movs	r0, #0
 8006356:	e008      	b.n	800636a <_printf_common+0xb6>
 8006358:	2301      	movs	r3, #1
 800635a:	4652      	mov	r2, sl
 800635c:	4639      	mov	r1, r7
 800635e:	4630      	mov	r0, r6
 8006360:	47c0      	blx	r8
 8006362:	3001      	adds	r0, #1
 8006364:	d103      	bne.n	800636e <_printf_common+0xba>
 8006366:	f04f 30ff 	mov.w	r0, #4294967295
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	3501      	adds	r5, #1
 8006370:	e7c3      	b.n	80062fa <_printf_common+0x46>
 8006372:	18e1      	adds	r1, r4, r3
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	2030      	movs	r0, #48	; 0x30
 8006378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800637c:	4422      	add	r2, r4
 800637e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006386:	3302      	adds	r3, #2
 8006388:	e7c5      	b.n	8006316 <_printf_common+0x62>
 800638a:	2301      	movs	r3, #1
 800638c:	4622      	mov	r2, r4
 800638e:	4639      	mov	r1, r7
 8006390:	4630      	mov	r0, r6
 8006392:	47c0      	blx	r8
 8006394:	3001      	adds	r0, #1
 8006396:	d0e6      	beq.n	8006366 <_printf_common+0xb2>
 8006398:	f109 0901 	add.w	r9, r9, #1
 800639c:	e7d8      	b.n	8006350 <_printf_common+0x9c>
	...

080063a0 <_printf_i>:
 80063a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063a8:	460c      	mov	r4, r1
 80063aa:	7e09      	ldrb	r1, [r1, #24]
 80063ac:	b085      	sub	sp, #20
 80063ae:	296e      	cmp	r1, #110	; 0x6e
 80063b0:	4617      	mov	r7, r2
 80063b2:	4606      	mov	r6, r0
 80063b4:	4698      	mov	r8, r3
 80063b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063b8:	f000 80b3 	beq.w	8006522 <_printf_i+0x182>
 80063bc:	d822      	bhi.n	8006404 <_printf_i+0x64>
 80063be:	2963      	cmp	r1, #99	; 0x63
 80063c0:	d036      	beq.n	8006430 <_printf_i+0x90>
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x3a>
 80063c4:	2900      	cmp	r1, #0
 80063c6:	f000 80b9 	beq.w	800653c <_printf_i+0x19c>
 80063ca:	2958      	cmp	r1, #88	; 0x58
 80063cc:	f000 8083 	beq.w	80064d6 <_printf_i+0x136>
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063d8:	e032      	b.n	8006440 <_printf_i+0xa0>
 80063da:	2964      	cmp	r1, #100	; 0x64
 80063dc:	d001      	beq.n	80063e2 <_printf_i+0x42>
 80063de:	2969      	cmp	r1, #105	; 0x69
 80063e0:	d1f6      	bne.n	80063d0 <_printf_i+0x30>
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	0605      	lsls	r5, r0, #24
 80063e8:	f103 0104 	add.w	r1, r3, #4
 80063ec:	d52a      	bpl.n	8006444 <_printf_i+0xa4>
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da03      	bge.n	80063fe <_printf_i+0x5e>
 80063f6:	222d      	movs	r2, #45	; 0x2d
 80063f8:	425b      	negs	r3, r3
 80063fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063fe:	486f      	ldr	r0, [pc, #444]	; (80065bc <_printf_i+0x21c>)
 8006400:	220a      	movs	r2, #10
 8006402:	e039      	b.n	8006478 <_printf_i+0xd8>
 8006404:	2973      	cmp	r1, #115	; 0x73
 8006406:	f000 809d 	beq.w	8006544 <_printf_i+0x1a4>
 800640a:	d808      	bhi.n	800641e <_printf_i+0x7e>
 800640c:	296f      	cmp	r1, #111	; 0x6f
 800640e:	d020      	beq.n	8006452 <_printf_i+0xb2>
 8006410:	2970      	cmp	r1, #112	; 0x70
 8006412:	d1dd      	bne.n	80063d0 <_printf_i+0x30>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	f043 0320 	orr.w	r3, r3, #32
 800641a:	6023      	str	r3, [r4, #0]
 800641c:	e003      	b.n	8006426 <_printf_i+0x86>
 800641e:	2975      	cmp	r1, #117	; 0x75
 8006420:	d017      	beq.n	8006452 <_printf_i+0xb2>
 8006422:	2978      	cmp	r1, #120	; 0x78
 8006424:	d1d4      	bne.n	80063d0 <_printf_i+0x30>
 8006426:	2378      	movs	r3, #120	; 0x78
 8006428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642c:	4864      	ldr	r0, [pc, #400]	; (80065c0 <_printf_i+0x220>)
 800642e:	e055      	b.n	80064dc <_printf_i+0x13c>
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	1d19      	adds	r1, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6011      	str	r1, [r2, #0]
 8006438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800643c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006440:	2301      	movs	r3, #1
 8006442:	e08c      	b.n	800655e <_printf_i+0x1be>
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6011      	str	r1, [r2, #0]
 8006448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800644c:	bf18      	it	ne
 800644e:	b21b      	sxthne	r3, r3
 8006450:	e7cf      	b.n	80063f2 <_printf_i+0x52>
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	6825      	ldr	r5, [r4, #0]
 8006456:	1d18      	adds	r0, r3, #4
 8006458:	6010      	str	r0, [r2, #0]
 800645a:	0628      	lsls	r0, r5, #24
 800645c:	d501      	bpl.n	8006462 <_printf_i+0xc2>
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	e002      	b.n	8006468 <_printf_i+0xc8>
 8006462:	0668      	lsls	r0, r5, #25
 8006464:	d5fb      	bpl.n	800645e <_printf_i+0xbe>
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	4854      	ldr	r0, [pc, #336]	; (80065bc <_printf_i+0x21c>)
 800646a:	296f      	cmp	r1, #111	; 0x6f
 800646c:	bf14      	ite	ne
 800646e:	220a      	movne	r2, #10
 8006470:	2208      	moveq	r2, #8
 8006472:	2100      	movs	r1, #0
 8006474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006478:	6865      	ldr	r5, [r4, #4]
 800647a:	60a5      	str	r5, [r4, #8]
 800647c:	2d00      	cmp	r5, #0
 800647e:	f2c0 8095 	blt.w	80065ac <_printf_i+0x20c>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	f021 0104 	bic.w	r1, r1, #4
 8006488:	6021      	str	r1, [r4, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d13d      	bne.n	800650a <_printf_i+0x16a>
 800648e:	2d00      	cmp	r5, #0
 8006490:	f040 808e 	bne.w	80065b0 <_printf_i+0x210>
 8006494:	4665      	mov	r5, ip
 8006496:	2a08      	cmp	r2, #8
 8006498:	d10b      	bne.n	80064b2 <_printf_i+0x112>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	07db      	lsls	r3, r3, #31
 800649e:	d508      	bpl.n	80064b2 <_printf_i+0x112>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	6862      	ldr	r2, [r4, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bfde      	ittt	le
 80064a8:	2330      	movle	r3, #48	; 0x30
 80064aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b2:	ebac 0305 	sub.w	r3, ip, r5
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	f8cd 8000 	str.w	r8, [sp]
 80064bc:	463b      	mov	r3, r7
 80064be:	aa03      	add	r2, sp, #12
 80064c0:	4621      	mov	r1, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff fef6 	bl	80062b4 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d14d      	bne.n	8006568 <_printf_i+0x1c8>
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	b005      	add	sp, #20
 80064d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064d6:	4839      	ldr	r0, [pc, #228]	; (80065bc <_printf_i+0x21c>)
 80064d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064dc:	6813      	ldr	r3, [r2, #0]
 80064de:	6821      	ldr	r1, [r4, #0]
 80064e0:	1d1d      	adds	r5, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6015      	str	r5, [r2, #0]
 80064e6:	060a      	lsls	r2, r1, #24
 80064e8:	d50b      	bpl.n	8006502 <_printf_i+0x162>
 80064ea:	07ca      	lsls	r2, r1, #31
 80064ec:	bf44      	itt	mi
 80064ee:	f041 0120 	orrmi.w	r1, r1, #32
 80064f2:	6021      	strmi	r1, [r4, #0]
 80064f4:	b91b      	cbnz	r3, 80064fe <_printf_i+0x15e>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	f022 0220 	bic.w	r2, r2, #32
 80064fc:	6022      	str	r2, [r4, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	e7b7      	b.n	8006472 <_printf_i+0xd2>
 8006502:	064d      	lsls	r5, r1, #25
 8006504:	bf48      	it	mi
 8006506:	b29b      	uxthmi	r3, r3
 8006508:	e7ef      	b.n	80064ea <_printf_i+0x14a>
 800650a:	4665      	mov	r5, ip
 800650c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006510:	fb02 3311 	mls	r3, r2, r1, r3
 8006514:	5cc3      	ldrb	r3, [r0, r3]
 8006516:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800651a:	460b      	mov	r3, r1
 800651c:	2900      	cmp	r1, #0
 800651e:	d1f5      	bne.n	800650c <_printf_i+0x16c>
 8006520:	e7b9      	b.n	8006496 <_printf_i+0xf6>
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	6961      	ldr	r1, [r4, #20]
 8006528:	1d18      	adds	r0, r3, #4
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	0628      	lsls	r0, r5, #24
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	d501      	bpl.n	8006536 <_printf_i+0x196>
 8006532:	6019      	str	r1, [r3, #0]
 8006534:	e002      	b.n	800653c <_printf_i+0x19c>
 8006536:	066a      	lsls	r2, r5, #25
 8006538:	d5fb      	bpl.n	8006532 <_printf_i+0x192>
 800653a:	8019      	strh	r1, [r3, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	6123      	str	r3, [r4, #16]
 8006540:	4665      	mov	r5, ip
 8006542:	e7b9      	b.n	80064b8 <_printf_i+0x118>
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	1d19      	adds	r1, r3, #4
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	681d      	ldr	r5, [r3, #0]
 800654c:	6862      	ldr	r2, [r4, #4]
 800654e:	2100      	movs	r1, #0
 8006550:	4628      	mov	r0, r5
 8006552:	f7f9 fe3d 	bl	80001d0 <memchr>
 8006556:	b108      	cbz	r0, 800655c <_printf_i+0x1bc>
 8006558:	1b40      	subs	r0, r0, r5
 800655a:	6060      	str	r0, [r4, #4]
 800655c:	6863      	ldr	r3, [r4, #4]
 800655e:	6123      	str	r3, [r4, #16]
 8006560:	2300      	movs	r3, #0
 8006562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006566:	e7a7      	b.n	80064b8 <_printf_i+0x118>
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	462a      	mov	r2, r5
 800656c:	4639      	mov	r1, r7
 800656e:	4630      	mov	r0, r6
 8006570:	47c0      	blx	r8
 8006572:	3001      	adds	r0, #1
 8006574:	d0aa      	beq.n	80064cc <_printf_i+0x12c>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	079b      	lsls	r3, r3, #30
 800657a:	d413      	bmi.n	80065a4 <_printf_i+0x204>
 800657c:	68e0      	ldr	r0, [r4, #12]
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	4298      	cmp	r0, r3
 8006582:	bfb8      	it	lt
 8006584:	4618      	movlt	r0, r3
 8006586:	e7a3      	b.n	80064d0 <_printf_i+0x130>
 8006588:	2301      	movs	r3, #1
 800658a:	464a      	mov	r2, r9
 800658c:	4639      	mov	r1, r7
 800658e:	4630      	mov	r0, r6
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d09a      	beq.n	80064cc <_printf_i+0x12c>
 8006596:	3501      	adds	r5, #1
 8006598:	68e3      	ldr	r3, [r4, #12]
 800659a:	9a03      	ldr	r2, [sp, #12]
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	42ab      	cmp	r3, r5
 80065a0:	dcf2      	bgt.n	8006588 <_printf_i+0x1e8>
 80065a2:	e7eb      	b.n	800657c <_printf_i+0x1dc>
 80065a4:	2500      	movs	r5, #0
 80065a6:	f104 0919 	add.w	r9, r4, #25
 80065aa:	e7f5      	b.n	8006598 <_printf_i+0x1f8>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ac      	bne.n	800650a <_printf_i+0x16a>
 80065b0:	7803      	ldrb	r3, [r0, #0]
 80065b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ba:	e76c      	b.n	8006496 <_printf_i+0xf6>
 80065bc:	08007d01 	.word	0x08007d01
 80065c0:	08007d12 	.word	0x08007d12

080065c4 <_sbrk_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4c06      	ldr	r4, [pc, #24]	; (80065e0 <_sbrk_r+0x1c>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4605      	mov	r5, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	6023      	str	r3, [r4, #0]
 80065d0:	f7fb fb94 	bl	8001cfc <_sbrk>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d102      	bne.n	80065de <_sbrk_r+0x1a>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	b103      	cbz	r3, 80065de <_sbrk_r+0x1a>
 80065dc:	602b      	str	r3, [r5, #0]
 80065de:	bd38      	pop	{r3, r4, r5, pc}
 80065e0:	200002a8 	.word	0x200002a8

080065e4 <__sread>:
 80065e4:	b510      	push	{r4, lr}
 80065e6:	460c      	mov	r4, r1
 80065e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ec:	f000 fa96 	bl	8006b1c <_read_r>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	bfab      	itete	ge
 80065f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065f6:	89a3      	ldrhlt	r3, [r4, #12]
 80065f8:	181b      	addge	r3, r3, r0
 80065fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065fe:	bfac      	ite	ge
 8006600:	6563      	strge	r3, [r4, #84]	; 0x54
 8006602:	81a3      	strhlt	r3, [r4, #12]
 8006604:	bd10      	pop	{r4, pc}

08006606 <__swrite>:
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	461f      	mov	r7, r3
 800660c:	898b      	ldrh	r3, [r1, #12]
 800660e:	05db      	lsls	r3, r3, #23
 8006610:	4605      	mov	r5, r0
 8006612:	460c      	mov	r4, r1
 8006614:	4616      	mov	r6, r2
 8006616:	d505      	bpl.n	8006624 <__swrite+0x1e>
 8006618:	2302      	movs	r3, #2
 800661a:	2200      	movs	r2, #0
 800661c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006620:	f000 f9b6 	bl	8006990 <_lseek_r>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800662a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	4632      	mov	r2, r6
 8006632:	463b      	mov	r3, r7
 8006634:	4628      	mov	r0, r5
 8006636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800663a:	f000 b869 	b.w	8006710 <_write_r>

0800663e <__sseek>:
 800663e:	b510      	push	{r4, lr}
 8006640:	460c      	mov	r4, r1
 8006642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006646:	f000 f9a3 	bl	8006990 <_lseek_r>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	bf15      	itete	ne
 8006650:	6560      	strne	r0, [r4, #84]	; 0x54
 8006652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800665a:	81a3      	strheq	r3, [r4, #12]
 800665c:	bf18      	it	ne
 800665e:	81a3      	strhne	r3, [r4, #12]
 8006660:	bd10      	pop	{r4, pc}

08006662 <__sclose>:
 8006662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006666:	f000 b8d3 	b.w	8006810 <_close_r>
	...

0800666c <__swbuf_r>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	460e      	mov	r6, r1
 8006670:	4614      	mov	r4, r2
 8006672:	4605      	mov	r5, r0
 8006674:	b118      	cbz	r0, 800667e <__swbuf_r+0x12>
 8006676:	6983      	ldr	r3, [r0, #24]
 8006678:	b90b      	cbnz	r3, 800667e <__swbuf_r+0x12>
 800667a:	f7ff fbf7 	bl	8005e6c <__sinit>
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <__swbuf_r+0x98>)
 8006680:	429c      	cmp	r4, r3
 8006682:	d12a      	bne.n	80066da <__swbuf_r+0x6e>
 8006684:	686c      	ldr	r4, [r5, #4]
 8006686:	69a3      	ldr	r3, [r4, #24]
 8006688:	60a3      	str	r3, [r4, #8]
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	071a      	lsls	r2, r3, #28
 800668e:	d52e      	bpl.n	80066ee <__swbuf_r+0x82>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	b363      	cbz	r3, 80066ee <__swbuf_r+0x82>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	6820      	ldr	r0, [r4, #0]
 8006698:	1ac0      	subs	r0, r0, r3
 800669a:	6963      	ldr	r3, [r4, #20]
 800669c:	b2f6      	uxtb	r6, r6
 800669e:	4283      	cmp	r3, r0
 80066a0:	4637      	mov	r7, r6
 80066a2:	dc04      	bgt.n	80066ae <__swbuf_r+0x42>
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f948 	bl	800693c <_fflush_r>
 80066ac:	bb28      	cbnz	r0, 80066fa <__swbuf_r+0x8e>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	60a3      	str	r3, [r4, #8]
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	701e      	strb	r6, [r3, #0]
 80066bc:	6963      	ldr	r3, [r4, #20]
 80066be:	3001      	adds	r0, #1
 80066c0:	4283      	cmp	r3, r0
 80066c2:	d004      	beq.n	80066ce <__swbuf_r+0x62>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	07db      	lsls	r3, r3, #31
 80066c8:	d519      	bpl.n	80066fe <__swbuf_r+0x92>
 80066ca:	2e0a      	cmp	r6, #10
 80066cc:	d117      	bne.n	80066fe <__swbuf_r+0x92>
 80066ce:	4621      	mov	r1, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	f000 f933 	bl	800693c <_fflush_r>
 80066d6:	b190      	cbz	r0, 80066fe <__swbuf_r+0x92>
 80066d8:	e00f      	b.n	80066fa <__swbuf_r+0x8e>
 80066da:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <__swbuf_r+0x9c>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d101      	bne.n	80066e4 <__swbuf_r+0x78>
 80066e0:	68ac      	ldr	r4, [r5, #8]
 80066e2:	e7d0      	b.n	8006686 <__swbuf_r+0x1a>
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <__swbuf_r+0xa0>)
 80066e6:	429c      	cmp	r4, r3
 80066e8:	bf08      	it	eq
 80066ea:	68ec      	ldreq	r4, [r5, #12]
 80066ec:	e7cb      	b.n	8006686 <__swbuf_r+0x1a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4628      	mov	r0, r5
 80066f2:	f000 f81f 	bl	8006734 <__swsetup_r>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d0cc      	beq.n	8006694 <__swbuf_r+0x28>
 80066fa:	f04f 37ff 	mov.w	r7, #4294967295
 80066fe:	4638      	mov	r0, r7
 8006700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006702:	bf00      	nop
 8006704:	08007cb0 	.word	0x08007cb0
 8006708:	08007cd0 	.word	0x08007cd0
 800670c:	08007c90 	.word	0x08007c90

08006710 <_write_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4c07      	ldr	r4, [pc, #28]	; (8006730 <_write_r+0x20>)
 8006714:	4605      	mov	r5, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fa fab6 	bl	8000c90 <_write>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_write_r+0x1e>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	b103      	cbz	r3, 800672e <_write_r+0x1e>
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	200002a8 	.word	0x200002a8

08006734 <__swsetup_r>:
 8006734:	4b32      	ldr	r3, [pc, #200]	; (8006800 <__swsetup_r+0xcc>)
 8006736:	b570      	push	{r4, r5, r6, lr}
 8006738:	681d      	ldr	r5, [r3, #0]
 800673a:	4606      	mov	r6, r0
 800673c:	460c      	mov	r4, r1
 800673e:	b125      	cbz	r5, 800674a <__swsetup_r+0x16>
 8006740:	69ab      	ldr	r3, [r5, #24]
 8006742:	b913      	cbnz	r3, 800674a <__swsetup_r+0x16>
 8006744:	4628      	mov	r0, r5
 8006746:	f7ff fb91 	bl	8005e6c <__sinit>
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <__swsetup_r+0xd0>)
 800674c:	429c      	cmp	r4, r3
 800674e:	d10f      	bne.n	8006770 <__swsetup_r+0x3c>
 8006750:	686c      	ldr	r4, [r5, #4]
 8006752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006756:	b29a      	uxth	r2, r3
 8006758:	0715      	lsls	r5, r2, #28
 800675a:	d42c      	bmi.n	80067b6 <__swsetup_r+0x82>
 800675c:	06d0      	lsls	r0, r2, #27
 800675e:	d411      	bmi.n	8006784 <__swsetup_r+0x50>
 8006760:	2209      	movs	r2, #9
 8006762:	6032      	str	r2, [r6, #0]
 8006764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	f04f 30ff 	mov.w	r0, #4294967295
 800676e:	e03e      	b.n	80067ee <__swsetup_r+0xba>
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <__swsetup_r+0xd4>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d101      	bne.n	800677a <__swsetup_r+0x46>
 8006776:	68ac      	ldr	r4, [r5, #8]
 8006778:	e7eb      	b.n	8006752 <__swsetup_r+0x1e>
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <__swsetup_r+0xd8>)
 800677c:	429c      	cmp	r4, r3
 800677e:	bf08      	it	eq
 8006780:	68ec      	ldreq	r4, [r5, #12]
 8006782:	e7e6      	b.n	8006752 <__swsetup_r+0x1e>
 8006784:	0751      	lsls	r1, r2, #29
 8006786:	d512      	bpl.n	80067ae <__swsetup_r+0x7a>
 8006788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800678a:	b141      	cbz	r1, 800679e <__swsetup_r+0x6a>
 800678c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006790:	4299      	cmp	r1, r3
 8006792:	d002      	beq.n	800679a <__swsetup_r+0x66>
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f973 	bl	8006a80 <_free_r>
 800679a:	2300      	movs	r3, #0
 800679c:	6363      	str	r3, [r4, #52]	; 0x34
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067a4:	81a3      	strh	r3, [r4, #12]
 80067a6:	2300      	movs	r3, #0
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	b94b      	cbnz	r3, 80067ce <__swsetup_r+0x9a>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d003      	beq.n	80067ce <__swsetup_r+0x9a>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f917 	bl	80069fc <__smakebuf_r>
 80067ce:	89a2      	ldrh	r2, [r4, #12]
 80067d0:	f012 0301 	ands.w	r3, r2, #1
 80067d4:	d00c      	beq.n	80067f0 <__swsetup_r+0xbc>
 80067d6:	2300      	movs	r3, #0
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6963      	ldr	r3, [r4, #20]
 80067dc:	425b      	negs	r3, r3
 80067de:	61a3      	str	r3, [r4, #24]
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	b953      	cbnz	r3, 80067fa <__swsetup_r+0xc6>
 80067e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80067ec:	d1ba      	bne.n	8006764 <__swsetup_r+0x30>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	0792      	lsls	r2, r2, #30
 80067f2:	bf58      	it	pl
 80067f4:	6963      	ldrpl	r3, [r4, #20]
 80067f6:	60a3      	str	r3, [r4, #8]
 80067f8:	e7f2      	b.n	80067e0 <__swsetup_r+0xac>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e7f7      	b.n	80067ee <__swsetup_r+0xba>
 80067fe:	bf00      	nop
 8006800:	20000038 	.word	0x20000038
 8006804:	08007cb0 	.word	0x08007cb0
 8006808:	08007cd0 	.word	0x08007cd0
 800680c:	08007c90 	.word	0x08007c90

08006810 <_close_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4c06      	ldr	r4, [pc, #24]	; (800682c <_close_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4605      	mov	r5, r0
 8006818:	4608      	mov	r0, r1
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	f7fb fa39 	bl	8001c92 <_close>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_close_r+0x1a>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	b103      	cbz	r3, 800682a <_close_r+0x1a>
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200002a8 	.word	0x200002a8

08006830 <__sflush_r>:
 8006830:	898a      	ldrh	r2, [r1, #12]
 8006832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006836:	4605      	mov	r5, r0
 8006838:	0710      	lsls	r0, r2, #28
 800683a:	460c      	mov	r4, r1
 800683c:	d458      	bmi.n	80068f0 <__sflush_r+0xc0>
 800683e:	684b      	ldr	r3, [r1, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc05      	bgt.n	8006850 <__sflush_r+0x20>
 8006844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	dc02      	bgt.n	8006850 <__sflush_r+0x20>
 800684a:	2000      	movs	r0, #0
 800684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006852:	2e00      	cmp	r6, #0
 8006854:	d0f9      	beq.n	800684a <__sflush_r+0x1a>
 8006856:	2300      	movs	r3, #0
 8006858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800685c:	682f      	ldr	r7, [r5, #0]
 800685e:	6a21      	ldr	r1, [r4, #32]
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	d032      	beq.n	80068ca <__sflush_r+0x9a>
 8006864:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	075a      	lsls	r2, r3, #29
 800686a:	d505      	bpl.n	8006878 <__sflush_r+0x48>
 800686c:	6863      	ldr	r3, [r4, #4]
 800686e:	1ac0      	subs	r0, r0, r3
 8006870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006872:	b10b      	cbz	r3, 8006878 <__sflush_r+0x48>
 8006874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006876:	1ac0      	subs	r0, r0, r3
 8006878:	2300      	movs	r3, #0
 800687a:	4602      	mov	r2, r0
 800687c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687e:	6a21      	ldr	r1, [r4, #32]
 8006880:	4628      	mov	r0, r5
 8006882:	47b0      	blx	r6
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	d106      	bne.n	8006898 <__sflush_r+0x68>
 800688a:	6829      	ldr	r1, [r5, #0]
 800688c:	291d      	cmp	r1, #29
 800688e:	d848      	bhi.n	8006922 <__sflush_r+0xf2>
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <__sflush_r+0x108>)
 8006892:	40ca      	lsrs	r2, r1
 8006894:	07d6      	lsls	r6, r2, #31
 8006896:	d544      	bpl.n	8006922 <__sflush_r+0xf2>
 8006898:	2200      	movs	r2, #0
 800689a:	6062      	str	r2, [r4, #4]
 800689c:	04d9      	lsls	r1, r3, #19
 800689e:	6922      	ldr	r2, [r4, #16]
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	d504      	bpl.n	80068ae <__sflush_r+0x7e>
 80068a4:	1c42      	adds	r2, r0, #1
 80068a6:	d101      	bne.n	80068ac <__sflush_r+0x7c>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b903      	cbnz	r3, 80068ae <__sflush_r+0x7e>
 80068ac:	6560      	str	r0, [r4, #84]	; 0x54
 80068ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b0:	602f      	str	r7, [r5, #0]
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d0c9      	beq.n	800684a <__sflush_r+0x1a>
 80068b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ba:	4299      	cmp	r1, r3
 80068bc:	d002      	beq.n	80068c4 <__sflush_r+0x94>
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f8de 	bl	8006a80 <_free_r>
 80068c4:	2000      	movs	r0, #0
 80068c6:	6360      	str	r0, [r4, #52]	; 0x34
 80068c8:	e7c0      	b.n	800684c <__sflush_r+0x1c>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b0      	blx	r6
 80068d0:	1c41      	adds	r1, r0, #1
 80068d2:	d1c8      	bne.n	8006866 <__sflush_r+0x36>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0c5      	beq.n	8006866 <__sflush_r+0x36>
 80068da:	2b1d      	cmp	r3, #29
 80068dc:	d001      	beq.n	80068e2 <__sflush_r+0xb2>
 80068de:	2b16      	cmp	r3, #22
 80068e0:	d101      	bne.n	80068e6 <__sflush_r+0xb6>
 80068e2:	602f      	str	r7, [r5, #0]
 80068e4:	e7b1      	b.n	800684a <__sflush_r+0x1a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e7ad      	b.n	800684c <__sflush_r+0x1c>
 80068f0:	690f      	ldr	r7, [r1, #16]
 80068f2:	2f00      	cmp	r7, #0
 80068f4:	d0a9      	beq.n	800684a <__sflush_r+0x1a>
 80068f6:	0793      	lsls	r3, r2, #30
 80068f8:	680e      	ldr	r6, [r1, #0]
 80068fa:	bf08      	it	eq
 80068fc:	694b      	ldreq	r3, [r1, #20]
 80068fe:	600f      	str	r7, [r1, #0]
 8006900:	bf18      	it	ne
 8006902:	2300      	movne	r3, #0
 8006904:	eba6 0807 	sub.w	r8, r6, r7
 8006908:	608b      	str	r3, [r1, #8]
 800690a:	f1b8 0f00 	cmp.w	r8, #0
 800690e:	dd9c      	ble.n	800684a <__sflush_r+0x1a>
 8006910:	4643      	mov	r3, r8
 8006912:	463a      	mov	r2, r7
 8006914:	6a21      	ldr	r1, [r4, #32]
 8006916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006918:	4628      	mov	r0, r5
 800691a:	47b0      	blx	r6
 800691c:	2800      	cmp	r0, #0
 800691e:	dc06      	bgt.n	800692e <__sflush_r+0xfe>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e78e      	b.n	800684c <__sflush_r+0x1c>
 800692e:	4407      	add	r7, r0
 8006930:	eba8 0800 	sub.w	r8, r8, r0
 8006934:	e7e9      	b.n	800690a <__sflush_r+0xda>
 8006936:	bf00      	nop
 8006938:	20400001 	.word	0x20400001

0800693c <_fflush_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	690b      	ldr	r3, [r1, #16]
 8006940:	4605      	mov	r5, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b1db      	cbz	r3, 800697e <_fflush_r+0x42>
 8006946:	b118      	cbz	r0, 8006950 <_fflush_r+0x14>
 8006948:	6983      	ldr	r3, [r0, #24]
 800694a:	b90b      	cbnz	r3, 8006950 <_fflush_r+0x14>
 800694c:	f7ff fa8e 	bl	8005e6c <__sinit>
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <_fflush_r+0x48>)
 8006952:	429c      	cmp	r4, r3
 8006954:	d109      	bne.n	800696a <_fflush_r+0x2e>
 8006956:	686c      	ldr	r4, [r5, #4]
 8006958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695c:	b17b      	cbz	r3, 800697e <_fflush_r+0x42>
 800695e:	4621      	mov	r1, r4
 8006960:	4628      	mov	r0, r5
 8006962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006966:	f7ff bf63 	b.w	8006830 <__sflush_r>
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <_fflush_r+0x4c>)
 800696c:	429c      	cmp	r4, r3
 800696e:	d101      	bne.n	8006974 <_fflush_r+0x38>
 8006970:	68ac      	ldr	r4, [r5, #8]
 8006972:	e7f1      	b.n	8006958 <_fflush_r+0x1c>
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <_fflush_r+0x50>)
 8006976:	429c      	cmp	r4, r3
 8006978:	bf08      	it	eq
 800697a:	68ec      	ldreq	r4, [r5, #12]
 800697c:	e7ec      	b.n	8006958 <_fflush_r+0x1c>
 800697e:	2000      	movs	r0, #0
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	08007cb0 	.word	0x08007cb0
 8006988:	08007cd0 	.word	0x08007cd0
 800698c:	08007c90 	.word	0x08007c90

08006990 <_lseek_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4c07      	ldr	r4, [pc, #28]	; (80069b0 <_lseek_r+0x20>)
 8006994:	4605      	mov	r5, r0
 8006996:	4608      	mov	r0, r1
 8006998:	4611      	mov	r1, r2
 800699a:	2200      	movs	r2, #0
 800699c:	6022      	str	r2, [r4, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fb f99e 	bl	8001ce0 <_lseek>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_lseek_r+0x1e>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_lseek_r+0x1e>
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	200002a8 	.word	0x200002a8

080069b4 <__swhatbuf_r>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	460e      	mov	r6, r1
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	2900      	cmp	r1, #0
 80069be:	b096      	sub	sp, #88	; 0x58
 80069c0:	4614      	mov	r4, r2
 80069c2:	461d      	mov	r5, r3
 80069c4:	da07      	bge.n	80069d6 <__swhatbuf_r+0x22>
 80069c6:	2300      	movs	r3, #0
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	89b3      	ldrh	r3, [r6, #12]
 80069cc:	061a      	lsls	r2, r3, #24
 80069ce:	d410      	bmi.n	80069f2 <__swhatbuf_r+0x3e>
 80069d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d4:	e00e      	b.n	80069f4 <__swhatbuf_r+0x40>
 80069d6:	466a      	mov	r2, sp
 80069d8:	f000 f8b2 	bl	8006b40 <_fstat_r>
 80069dc:	2800      	cmp	r0, #0
 80069de:	dbf2      	blt.n	80069c6 <__swhatbuf_r+0x12>
 80069e0:	9a01      	ldr	r2, [sp, #4]
 80069e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069ea:	425a      	negs	r2, r3
 80069ec:	415a      	adcs	r2, r3
 80069ee:	602a      	str	r2, [r5, #0]
 80069f0:	e7ee      	b.n	80069d0 <__swhatbuf_r+0x1c>
 80069f2:	2340      	movs	r3, #64	; 0x40
 80069f4:	2000      	movs	r0, #0
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	b016      	add	sp, #88	; 0x58
 80069fa:	bd70      	pop	{r4, r5, r6, pc}

080069fc <__smakebuf_r>:
 80069fc:	898b      	ldrh	r3, [r1, #12]
 80069fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a00:	079d      	lsls	r5, r3, #30
 8006a02:	4606      	mov	r6, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	d507      	bpl.n	8006a18 <__smakebuf_r+0x1c>
 8006a08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	2301      	movs	r3, #1
 8006a12:	6163      	str	r3, [r4, #20]
 8006a14:	b002      	add	sp, #8
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
 8006a18:	ab01      	add	r3, sp, #4
 8006a1a:	466a      	mov	r2, sp
 8006a1c:	f7ff ffca 	bl	80069b4 <__swhatbuf_r>
 8006a20:	9900      	ldr	r1, [sp, #0]
 8006a22:	4605      	mov	r5, r0
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff faab 	bl	8005f80 <_malloc_r>
 8006a2a:	b948      	cbnz	r0, 8006a40 <__smakebuf_r+0x44>
 8006a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a30:	059a      	lsls	r2, r3, #22
 8006a32:	d4ef      	bmi.n	8006a14 <__smakebuf_r+0x18>
 8006a34:	f023 0303 	bic.w	r3, r3, #3
 8006a38:	f043 0302 	orr.w	r3, r3, #2
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	e7e3      	b.n	8006a08 <__smakebuf_r+0xc>
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <__smakebuf_r+0x7c>)
 8006a42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	6020      	str	r0, [r4, #0]
 8006a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	6163      	str	r3, [r4, #20]
 8006a52:	9b01      	ldr	r3, [sp, #4]
 8006a54:	6120      	str	r0, [r4, #16]
 8006a56:	b15b      	cbz	r3, 8006a70 <__smakebuf_r+0x74>
 8006a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 f881 	bl	8006b64 <_isatty_r>
 8006a62:	b128      	cbz	r0, 8006a70 <__smakebuf_r+0x74>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f023 0303 	bic.w	r3, r3, #3
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	431d      	orrs	r5, r3
 8006a74:	81a5      	strh	r5, [r4, #12]
 8006a76:	e7cd      	b.n	8006a14 <__smakebuf_r+0x18>
 8006a78:	08005e35 	.word	0x08005e35

08006a7c <__malloc_lock>:
 8006a7c:	4770      	bx	lr

08006a7e <__malloc_unlock>:
 8006a7e:	4770      	bx	lr

08006a80 <_free_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4605      	mov	r5, r0
 8006a84:	2900      	cmp	r1, #0
 8006a86:	d045      	beq.n	8006b14 <_free_r+0x94>
 8006a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a8c:	1f0c      	subs	r4, r1, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bfb8      	it	lt
 8006a92:	18e4      	addlt	r4, r4, r3
 8006a94:	f7ff fff2 	bl	8006a7c <__malloc_lock>
 8006a98:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <_free_r+0x98>)
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	b933      	cbnz	r3, 8006aae <_free_r+0x2e>
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6014      	str	r4, [r2, #0]
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aaa:	f7ff bfe8 	b.w	8006a7e <__malloc_unlock>
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	d90c      	bls.n	8006acc <_free_r+0x4c>
 8006ab2:	6821      	ldr	r1, [r4, #0]
 8006ab4:	1862      	adds	r2, r4, r1
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bf04      	itt	eq
 8006aba:	681a      	ldreq	r2, [r3, #0]
 8006abc:	685b      	ldreq	r3, [r3, #4]
 8006abe:	6063      	str	r3, [r4, #4]
 8006ac0:	bf04      	itt	eq
 8006ac2:	1852      	addeq	r2, r2, r1
 8006ac4:	6022      	streq	r2, [r4, #0]
 8006ac6:	6004      	str	r4, [r0, #0]
 8006ac8:	e7ec      	b.n	8006aa4 <_free_r+0x24>
 8006aca:	4613      	mov	r3, r2
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	b10a      	cbz	r2, 8006ad4 <_free_r+0x54>
 8006ad0:	42a2      	cmp	r2, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x4a>
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	1858      	adds	r0, r3, r1
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x74>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	4401      	add	r1, r0
 8006ae0:	1858      	adds	r0, r3, r1
 8006ae2:	4282      	cmp	r2, r0
 8006ae4:	6019      	str	r1, [r3, #0]
 8006ae6:	d1dd      	bne.n	8006aa4 <_free_r+0x24>
 8006ae8:	6810      	ldr	r0, [r2, #0]
 8006aea:	6852      	ldr	r2, [r2, #4]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	4401      	add	r1, r0
 8006af0:	6019      	str	r1, [r3, #0]
 8006af2:	e7d7      	b.n	8006aa4 <_free_r+0x24>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x7c>
 8006af6:	230c      	movs	r3, #12
 8006af8:	602b      	str	r3, [r5, #0]
 8006afa:	e7d3      	b.n	8006aa4 <_free_r+0x24>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	1821      	adds	r1, r4, r0
 8006b00:	428a      	cmp	r2, r1
 8006b02:	bf04      	itt	eq
 8006b04:	6811      	ldreq	r1, [r2, #0]
 8006b06:	6852      	ldreq	r2, [r2, #4]
 8006b08:	6062      	str	r2, [r4, #4]
 8006b0a:	bf04      	itt	eq
 8006b0c:	1809      	addeq	r1, r1, r0
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	605c      	str	r4, [r3, #4]
 8006b12:	e7c7      	b.n	8006aa4 <_free_r+0x24>
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	200000d0 	.word	0x200000d0

08006b1c <_read_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4c07      	ldr	r4, [pc, #28]	; (8006b3c <_read_r+0x20>)
 8006b20:	4605      	mov	r5, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fb f894 	bl	8001c58 <_read>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_read_r+0x1e>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_read_r+0x1e>
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200002a8 	.word	0x200002a8

08006b40 <_fstat_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4c07      	ldr	r4, [pc, #28]	; (8006b60 <_fstat_r+0x20>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4605      	mov	r5, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	f7fb f8ac 	bl	8001caa <_fstat>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d102      	bne.n	8006b5c <_fstat_r+0x1c>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	b103      	cbz	r3, 8006b5c <_fstat_r+0x1c>
 8006b5a:	602b      	str	r3, [r5, #0]
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	200002a8 	.word	0x200002a8

08006b64 <_isatty_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4c06      	ldr	r4, [pc, #24]	; (8006b80 <_isatty_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	f7fb f8ab 	bl	8001cca <_isatty>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_isatty_r+0x1a>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_isatty_r+0x1a>
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200002a8 	.word	0x200002a8
 8006b84:	00000000 	.word	0x00000000

08006b88 <cos>:
 8006b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b8a:	ec51 0b10 	vmov	r0, r1, d0
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <cos+0x80>)
 8006b90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b94:	4293      	cmp	r3, r2
 8006b96:	dc06      	bgt.n	8006ba6 <cos+0x1e>
 8006b98:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006c00 <cos+0x78>
 8006b9c:	f000 fa74 	bl	8007088 <__kernel_cos>
 8006ba0:	ec51 0b10 	vmov	r0, r1, d0
 8006ba4:	e007      	b.n	8006bb6 <cos+0x2e>
 8006ba6:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <cos+0x84>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	dd09      	ble.n	8006bc0 <cos+0x38>
 8006bac:	ee10 2a10 	vmov	r2, s0
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	f7f9 fb61 	bl	8000278 <__aeabi_dsub>
 8006bb6:	ec41 0b10 	vmov	d0, r0, r1
 8006bba:	b005      	add	sp, #20
 8006bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bc0:	4668      	mov	r0, sp
 8006bc2:	f000 f86d 	bl	8006ca0 <__ieee754_rem_pio2>
 8006bc6:	f000 0003 	and.w	r0, r0, #3
 8006bca:	2801      	cmp	r0, #1
 8006bcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bd0:	ed9d 0b00 	vldr	d0, [sp]
 8006bd4:	d007      	beq.n	8006be6 <cos+0x5e>
 8006bd6:	2802      	cmp	r0, #2
 8006bd8:	d00e      	beq.n	8006bf8 <cos+0x70>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d0de      	beq.n	8006b9c <cos+0x14>
 8006bde:	2001      	movs	r0, #1
 8006be0:	f000 fe5a 	bl	8007898 <__kernel_sin>
 8006be4:	e7dc      	b.n	8006ba0 <cos+0x18>
 8006be6:	f000 fe57 	bl	8007898 <__kernel_sin>
 8006bea:	ec53 2b10 	vmov	r2, r3, d0
 8006bee:	ee10 0a10 	vmov	r0, s0
 8006bf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006bf6:	e7de      	b.n	8006bb6 <cos+0x2e>
 8006bf8:	f000 fa46 	bl	8007088 <__kernel_cos>
 8006bfc:	e7f5      	b.n	8006bea <cos+0x62>
 8006bfe:	bf00      	nop
	...
 8006c08:	3fe921fb 	.word	0x3fe921fb
 8006c0c:	7fefffff 	.word	0x7fefffff

08006c10 <sin>:
 8006c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c12:	ec51 0b10 	vmov	r0, r1, d0
 8006c16:	4a20      	ldr	r2, [pc, #128]	; (8006c98 <sin+0x88>)
 8006c18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	dc07      	bgt.n	8006c30 <sin+0x20>
 8006c20:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006c90 <sin+0x80>
 8006c24:	2000      	movs	r0, #0
 8006c26:	f000 fe37 	bl	8007898 <__kernel_sin>
 8006c2a:	ec51 0b10 	vmov	r0, r1, d0
 8006c2e:	e007      	b.n	8006c40 <sin+0x30>
 8006c30:	4a1a      	ldr	r2, [pc, #104]	; (8006c9c <sin+0x8c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	dd09      	ble.n	8006c4a <sin+0x3a>
 8006c36:	ee10 2a10 	vmov	r2, s0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	f7f9 fb1c 	bl	8000278 <__aeabi_dsub>
 8006c40:	ec41 0b10 	vmov	d0, r0, r1
 8006c44:	b005      	add	sp, #20
 8006c46:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c4a:	4668      	mov	r0, sp
 8006c4c:	f000 f828 	bl	8006ca0 <__ieee754_rem_pio2>
 8006c50:	f000 0003 	and.w	r0, r0, #3
 8006c54:	2801      	cmp	r0, #1
 8006c56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c5a:	ed9d 0b00 	vldr	d0, [sp]
 8006c5e:	d004      	beq.n	8006c6a <sin+0x5a>
 8006c60:	2802      	cmp	r0, #2
 8006c62:	d005      	beq.n	8006c70 <sin+0x60>
 8006c64:	b970      	cbnz	r0, 8006c84 <sin+0x74>
 8006c66:	2001      	movs	r0, #1
 8006c68:	e7dd      	b.n	8006c26 <sin+0x16>
 8006c6a:	f000 fa0d 	bl	8007088 <__kernel_cos>
 8006c6e:	e7dc      	b.n	8006c2a <sin+0x1a>
 8006c70:	2001      	movs	r0, #1
 8006c72:	f000 fe11 	bl	8007898 <__kernel_sin>
 8006c76:	ec53 2b10 	vmov	r2, r3, d0
 8006c7a:	ee10 0a10 	vmov	r0, s0
 8006c7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c82:	e7dd      	b.n	8006c40 <sin+0x30>
 8006c84:	f000 fa00 	bl	8007088 <__kernel_cos>
 8006c88:	e7f5      	b.n	8006c76 <sin+0x66>
 8006c8a:	bf00      	nop
 8006c8c:	f3af 8000 	nop.w
	...
 8006c98:	3fe921fb 	.word	0x3fe921fb
 8006c9c:	7fefffff 	.word	0x7fefffff

08006ca0 <__ieee754_rem_pio2>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	ec57 6b10 	vmov	r6, r7, d0
 8006ca8:	4bc3      	ldr	r3, [pc, #780]	; (8006fb8 <__ieee754_rem_pio2+0x318>)
 8006caa:	b08d      	sub	sp, #52	; 0x34
 8006cac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006cb0:	4598      	cmp	r8, r3
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	9704      	str	r7, [sp, #16]
 8006cb6:	dc07      	bgt.n	8006cc8 <__ieee754_rem_pio2+0x28>
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	ed84 0b00 	vstr	d0, [r4]
 8006cc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cc4:	2500      	movs	r5, #0
 8006cc6:	e027      	b.n	8006d18 <__ieee754_rem_pio2+0x78>
 8006cc8:	4bbc      	ldr	r3, [pc, #752]	; (8006fbc <__ieee754_rem_pio2+0x31c>)
 8006cca:	4598      	cmp	r8, r3
 8006ccc:	dc75      	bgt.n	8006dba <__ieee754_rem_pio2+0x11a>
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	4dbb      	ldr	r5, [pc, #748]	; (8006fc0 <__ieee754_rem_pio2+0x320>)
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	ee10 0a10 	vmov	r0, s0
 8006cd8:	a3a9      	add	r3, pc, #676	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e0>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	4639      	mov	r1, r7
 8006ce0:	dd36      	ble.n	8006d50 <__ieee754_rem_pio2+0xb0>
 8006ce2:	f7f9 fac9 	bl	8000278 <__aeabi_dsub>
 8006ce6:	45a8      	cmp	r8, r5
 8006ce8:	4606      	mov	r6, r0
 8006cea:	460f      	mov	r7, r1
 8006cec:	d018      	beq.n	8006d20 <__ieee754_rem_pio2+0x80>
 8006cee:	a3a6      	add	r3, pc, #664	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2e8>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fac0 	bl	8000278 <__aeabi_dsub>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fab8 	bl	8000278 <__aeabi_dsub>
 8006d08:	a39f      	add	r3, pc, #636	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2e8>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fab3 	bl	8000278 <__aeabi_dsub>
 8006d12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d16:	2501      	movs	r5, #1
 8006d18:	4628      	mov	r0, r5
 8006d1a:	b00d      	add	sp, #52	; 0x34
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	a39b      	add	r3, pc, #620	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f0>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 faa7 	bl	8000278 <__aeabi_dsub>
 8006d2a:	a39b      	add	r3, pc, #620	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2f8>)
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	4606      	mov	r6, r0
 8006d32:	460f      	mov	r7, r1
 8006d34:	f7f9 faa0 	bl	8000278 <__aeabi_dsub>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8006d40:	4630      	mov	r0, r6
 8006d42:	4639      	mov	r1, r7
 8006d44:	f7f9 fa98 	bl	8000278 <__aeabi_dsub>
 8006d48:	a393      	add	r3, pc, #588	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2f8>)
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	e7de      	b.n	8006d0e <__ieee754_rem_pio2+0x6e>
 8006d50:	f7f9 fa94 	bl	800027c <__adddf3>
 8006d54:	45a8      	cmp	r8, r5
 8006d56:	4606      	mov	r6, r0
 8006d58:	460f      	mov	r7, r1
 8006d5a:	d016      	beq.n	8006d8a <__ieee754_rem_pio2+0xea>
 8006d5c:	a38a      	add	r3, pc, #552	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2e8>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fa8b 	bl	800027c <__adddf3>
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	e9c4 2300 	strd	r2, r3, [r4]
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fa81 	bl	8000278 <__aeabi_dsub>
 8006d76:	a384      	add	r3, pc, #528	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2e8>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	f7f9 fa7e 	bl	800027c <__adddf3>
 8006d80:	f04f 35ff 	mov.w	r5, #4294967295
 8006d84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d88:	e7c6      	b.n	8006d18 <__ieee754_rem_pio2+0x78>
 8006d8a:	a381      	add	r3, pc, #516	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f0>)
 8006d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d90:	f7f9 fa74 	bl	800027c <__adddf3>
 8006d94:	a380      	add	r3, pc, #512	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2f8>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	f7f9 fa6d 	bl	800027c <__adddf3>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	e9c4 2300 	strd	r2, r3, [r4]
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	f7f9 fa63 	bl	8000278 <__aeabi_dsub>
 8006db2:	a379      	add	r3, pc, #484	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2f8>)
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	e7e0      	b.n	8006d7c <__ieee754_rem_pio2+0xdc>
 8006dba:	4b82      	ldr	r3, [pc, #520]	; (8006fc4 <__ieee754_rem_pio2+0x324>)
 8006dbc:	4598      	cmp	r8, r3
 8006dbe:	f300 80d0 	bgt.w	8006f62 <__ieee754_rem_pio2+0x2c2>
 8006dc2:	f000 fe23 	bl	8007a0c <fabs>
 8006dc6:	ec57 6b10 	vmov	r6, r7, d0
 8006dca:	ee10 0a10 	vmov	r0, s0
 8006dce:	a374      	add	r3, pc, #464	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x300>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	f7f9 fc07 	bl	80005e8 <__aeabi_dmul>
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4b7a      	ldr	r3, [pc, #488]	; (8006fc8 <__ieee754_rem_pio2+0x328>)
 8006dde:	f7f9 fa4d 	bl	800027c <__adddf3>
 8006de2:	f7f9 fe9b 	bl	8000b1c <__aeabi_d2iz>
 8006de6:	4605      	mov	r5, r0
 8006de8:	f7f9 fb94 	bl	8000514 <__aeabi_i2d>
 8006dec:	a364      	add	r3, pc, #400	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e0>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	f7f9 fbf7 	bl	80005e8 <__aeabi_dmul>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fa39 	bl	8000278 <__aeabi_dsub>
 8006e06:	a360      	add	r3, pc, #384	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2e8>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	468b      	mov	fp, r1
 8006e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e14:	f7f9 fbe8 	bl	80005e8 <__aeabi_dmul>
 8006e18:	2d1f      	cmp	r5, #31
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	460f      	mov	r7, r1
 8006e1e:	dc0c      	bgt.n	8006e3a <__ieee754_rem_pio2+0x19a>
 8006e20:	1e6a      	subs	r2, r5, #1
 8006e22:	4b6a      	ldr	r3, [pc, #424]	; (8006fcc <__ieee754_rem_pio2+0x32c>)
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	4543      	cmp	r3, r8
 8006e2a:	d006      	beq.n	8006e3a <__ieee754_rem_pio2+0x19a>
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	463b      	mov	r3, r7
 8006e30:	4650      	mov	r0, sl
 8006e32:	4659      	mov	r1, fp
 8006e34:	f7f9 fa20 	bl	8000278 <__aeabi_dsub>
 8006e38:	e00e      	b.n	8006e58 <__ieee754_rem_pio2+0x1b8>
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	4650      	mov	r0, sl
 8006e40:	4659      	mov	r1, fp
 8006e42:	f7f9 fa19 	bl	8000278 <__aeabi_dsub>
 8006e46:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	9a05      	ldr	r2, [sp, #20]
 8006e4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	dc02      	bgt.n	8006e5e <__ieee754_rem_pio2+0x1be>
 8006e58:	e9c4 0100 	strd	r0, r1, [r4]
 8006e5c:	e039      	b.n	8006ed2 <__ieee754_rem_pio2+0x232>
 8006e5e:	a34c      	add	r3, pc, #304	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f0>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e68:	f7f9 fbbe 	bl	80005e8 <__aeabi_dmul>
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	460f      	mov	r7, r1
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4650      	mov	r0, sl
 8006e76:	4659      	mov	r1, fp
 8006e78:	f7f9 f9fe 	bl	8000278 <__aeabi_dsub>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4680      	mov	r8, r0
 8006e82:	4689      	mov	r9, r1
 8006e84:	4650      	mov	r0, sl
 8006e86:	4659      	mov	r1, fp
 8006e88:	f7f9 f9f6 	bl	8000278 <__aeabi_dsub>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	463b      	mov	r3, r7
 8006e90:	f7f9 f9f2 	bl	8000278 <__aeabi_dsub>
 8006e94:	a340      	add	r3, pc, #256	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x2f8>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	460f      	mov	r7, r1
 8006e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea2:	f7f9 fba1 	bl	80005e8 <__aeabi_dmul>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f7f9 f9e5 	bl	8000278 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	f7f9 f9dd 	bl	8000278 <__aeabi_dsub>
 8006ebe:	9a05      	ldr	r2, [sp, #20]
 8006ec0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b31      	cmp	r3, #49	; 0x31
 8006ec8:	dc20      	bgt.n	8006f0c <__ieee754_rem_pio2+0x26c>
 8006eca:	e9c4 0100 	strd	r0, r1, [r4]
 8006ece:	46c2      	mov	sl, r8
 8006ed0:	46cb      	mov	fp, r9
 8006ed2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	4659      	mov	r1, fp
 8006ede:	f7f9 f9cb 	bl	8000278 <__aeabi_dsub>
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	f7f9 f9c7 	bl	8000278 <__aeabi_dsub>
 8006eea:	9b04      	ldr	r3, [sp, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ef2:	f6bf af11 	bge.w	8006d18 <__ieee754_rem_pio2+0x78>
 8006ef6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	f8c4 8000 	str.w	r8, [r4]
 8006f00:	60a0      	str	r0, [r4, #8]
 8006f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f06:	60e3      	str	r3, [r4, #12]
 8006f08:	426d      	negs	r5, r5
 8006f0a:	e705      	b.n	8006d18 <__ieee754_rem_pio2+0x78>
 8006f0c:	a326      	add	r3, pc, #152	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x308>)
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f16:	f7f9 fb67 	bl	80005e8 <__aeabi_dmul>
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	460f      	mov	r7, r1
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 f9a7 	bl	8000278 <__aeabi_dsub>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4682      	mov	sl, r0
 8006f30:	468b      	mov	fp, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f99f 	bl	8000278 <__aeabi_dsub>
 8006f3a:	4632      	mov	r2, r6
 8006f3c:	463b      	mov	r3, r7
 8006f3e:	f7f9 f99b 	bl	8000278 <__aeabi_dsub>
 8006f42:	a31b      	add	r3, pc, #108	; (adr r3, 8006fb0 <__ieee754_rem_pio2+0x310>)
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	4606      	mov	r6, r0
 8006f4a:	460f      	mov	r7, r1
 8006f4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f50:	f7f9 fb4a 	bl	80005e8 <__aeabi_dmul>
 8006f54:	4632      	mov	r2, r6
 8006f56:	463b      	mov	r3, r7
 8006f58:	f7f9 f98e 	bl	8000278 <__aeabi_dsub>
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	460f      	mov	r7, r1
 8006f60:	e764      	b.n	8006e2c <__ieee754_rem_pio2+0x18c>
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <__ieee754_rem_pio2+0x330>)
 8006f64:	4598      	cmp	r8, r3
 8006f66:	dd35      	ble.n	8006fd4 <__ieee754_rem_pio2+0x334>
 8006f68:	ee10 2a10 	vmov	r2, s0
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	4630      	mov	r0, r6
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 f981 	bl	8000278 <__aeabi_dsub>
 8006f76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f7a:	e9c4 0100 	strd	r0, r1, [r4]
 8006f7e:	e6a1      	b.n	8006cc4 <__ieee754_rem_pio2+0x24>
 8006f80:	54400000 	.word	0x54400000
 8006f84:	3ff921fb 	.word	0x3ff921fb
 8006f88:	1a626331 	.word	0x1a626331
 8006f8c:	3dd0b461 	.word	0x3dd0b461
 8006f90:	1a600000 	.word	0x1a600000
 8006f94:	3dd0b461 	.word	0x3dd0b461
 8006f98:	2e037073 	.word	0x2e037073
 8006f9c:	3ba3198a 	.word	0x3ba3198a
 8006fa0:	6dc9c883 	.word	0x6dc9c883
 8006fa4:	3fe45f30 	.word	0x3fe45f30
 8006fa8:	2e000000 	.word	0x2e000000
 8006fac:	3ba3198a 	.word	0x3ba3198a
 8006fb0:	252049c1 	.word	0x252049c1
 8006fb4:	397b839a 	.word	0x397b839a
 8006fb8:	3fe921fb 	.word	0x3fe921fb
 8006fbc:	4002d97b 	.word	0x4002d97b
 8006fc0:	3ff921fb 	.word	0x3ff921fb
 8006fc4:	413921fb 	.word	0x413921fb
 8006fc8:	3fe00000 	.word	0x3fe00000
 8006fcc:	08007d24 	.word	0x08007d24
 8006fd0:	7fefffff 	.word	0x7fefffff
 8006fd4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006fd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006fdc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	f7f9 fd9a 	bl	8000b1c <__aeabi_d2iz>
 8006fe8:	f7f9 fa94 	bl	8000514 <__aeabi_i2d>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4639      	mov	r1, r7
 8006ff4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff8:	f7f9 f93e 	bl	8000278 <__aeabi_dsub>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4b1f      	ldr	r3, [pc, #124]	; (800707c <__ieee754_rem_pio2+0x3dc>)
 8007000:	f7f9 faf2 	bl	80005e8 <__aeabi_dmul>
 8007004:	460f      	mov	r7, r1
 8007006:	4606      	mov	r6, r0
 8007008:	f7f9 fd88 	bl	8000b1c <__aeabi_d2iz>
 800700c:	f7f9 fa82 	bl	8000514 <__aeabi_i2d>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4630      	mov	r0, r6
 8007016:	4639      	mov	r1, r7
 8007018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800701c:	f7f9 f92c 	bl	8000278 <__aeabi_dsub>
 8007020:	2200      	movs	r2, #0
 8007022:	4b16      	ldr	r3, [pc, #88]	; (800707c <__ieee754_rem_pio2+0x3dc>)
 8007024:	f7f9 fae0 	bl	80005e8 <__aeabi_dmul>
 8007028:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800702c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007030:	f04f 0803 	mov.w	r8, #3
 8007034:	2600      	movs	r6, #0
 8007036:	2700      	movs	r7, #0
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007040:	f108 3aff 	add.w	sl, r8, #4294967295
 8007044:	f7f9 fd38 	bl	8000ab8 <__aeabi_dcmpeq>
 8007048:	b9b0      	cbnz	r0, 8007078 <__ieee754_rem_pio2+0x3d8>
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <__ieee754_rem_pio2+0x3e0>)
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	2302      	movs	r3, #2
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4643      	mov	r3, r8
 8007056:	4621      	mov	r1, r4
 8007058:	a806      	add	r0, sp, #24
 800705a:	f000 f8dd 	bl	8007218 <__kernel_rem_pio2>
 800705e:	9b04      	ldr	r3, [sp, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	4605      	mov	r5, r0
 8007064:	f6bf ae58 	bge.w	8006d18 <__ieee754_rem_pio2+0x78>
 8007068:	6863      	ldr	r3, [r4, #4]
 800706a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	68e3      	ldr	r3, [r4, #12]
 8007072:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007076:	e746      	b.n	8006f06 <__ieee754_rem_pio2+0x266>
 8007078:	46d0      	mov	r8, sl
 800707a:	e7dd      	b.n	8007038 <__ieee754_rem_pio2+0x398>
 800707c:	41700000 	.word	0x41700000
 8007080:	08007da4 	.word	0x08007da4
 8007084:	00000000 	.word	0x00000000

08007088 <__kernel_cos>:
 8007088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	ec59 8b10 	vmov	r8, r9, d0
 8007090:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007094:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007098:	ed2d 8b02 	vpush	{d8}
 800709c:	eeb0 8a41 	vmov.f32	s16, s2
 80070a0:	eef0 8a61 	vmov.f32	s17, s3
 80070a4:	da07      	bge.n	80070b6 <__kernel_cos+0x2e>
 80070a6:	ee10 0a10 	vmov	r0, s0
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 fd36 	bl	8000b1c <__aeabi_d2iz>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f000 8089 	beq.w	80071c8 <__kernel_cos+0x140>
 80070b6:	4642      	mov	r2, r8
 80070b8:	464b      	mov	r3, r9
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	f7f9 fa93 	bl	80005e8 <__aeabi_dmul>
 80070c2:	2200      	movs	r2, #0
 80070c4:	4b4e      	ldr	r3, [pc, #312]	; (8007200 <__kernel_cos+0x178>)
 80070c6:	4604      	mov	r4, r0
 80070c8:	460d      	mov	r5, r1
 80070ca:	f7f9 fa8d 	bl	80005e8 <__aeabi_dmul>
 80070ce:	a340      	add	r3, pc, #256	; (adr r3, 80071d0 <__kernel_cos+0x148>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	4620      	mov	r0, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 fa84 	bl	80005e8 <__aeabi_dmul>
 80070e0:	a33d      	add	r3, pc, #244	; (adr r3, 80071d8 <__kernel_cos+0x150>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 f8c9 	bl	800027c <__adddf3>
 80070ea:	4622      	mov	r2, r4
 80070ec:	462b      	mov	r3, r5
 80070ee:	f7f9 fa7b 	bl	80005e8 <__aeabi_dmul>
 80070f2:	a33b      	add	r3, pc, #236	; (adr r3, 80071e0 <__kernel_cos+0x158>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 f8be 	bl	8000278 <__aeabi_dsub>
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	f7f9 fa72 	bl	80005e8 <__aeabi_dmul>
 8007104:	a338      	add	r3, pc, #224	; (adr r3, 80071e8 <__kernel_cos+0x160>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 f8b7 	bl	800027c <__adddf3>
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	f7f9 fa69 	bl	80005e8 <__aeabi_dmul>
 8007116:	a336      	add	r3, pc, #216	; (adr r3, 80071f0 <__kernel_cos+0x168>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 f8ac 	bl	8000278 <__aeabi_dsub>
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	f7f9 fa60 	bl	80005e8 <__aeabi_dmul>
 8007128:	a333      	add	r3, pc, #204	; (adr r3, 80071f8 <__kernel_cos+0x170>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 f8a5 	bl	800027c <__adddf3>
 8007132:	4622      	mov	r2, r4
 8007134:	462b      	mov	r3, r5
 8007136:	f7f9 fa57 	bl	80005e8 <__aeabi_dmul>
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f7f9 fa53 	bl	80005e8 <__aeabi_dmul>
 8007142:	ec53 2b18 	vmov	r2, r3, d8
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	f7f9 fa4b 	bl	80005e8 <__aeabi_dmul>
 8007152:	460b      	mov	r3, r1
 8007154:	4602      	mov	r2, r0
 8007156:	4629      	mov	r1, r5
 8007158:	4620      	mov	r0, r4
 800715a:	f7f9 f88d 	bl	8000278 <__aeabi_dsub>
 800715e:	4b29      	ldr	r3, [pc, #164]	; (8007204 <__kernel_cos+0x17c>)
 8007160:	429e      	cmp	r6, r3
 8007162:	4680      	mov	r8, r0
 8007164:	4689      	mov	r9, r1
 8007166:	dc11      	bgt.n	800718c <__kernel_cos+0x104>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4650      	mov	r0, sl
 800716e:	4659      	mov	r1, fp
 8007170:	f7f9 f882 	bl	8000278 <__aeabi_dsub>
 8007174:	460b      	mov	r3, r1
 8007176:	4924      	ldr	r1, [pc, #144]	; (8007208 <__kernel_cos+0x180>)
 8007178:	4602      	mov	r2, r0
 800717a:	2000      	movs	r0, #0
 800717c:	f7f9 f87c 	bl	8000278 <__aeabi_dsub>
 8007180:	ecbd 8b02 	vpop	{d8}
 8007184:	ec41 0b10 	vmov	d0, r0, r1
 8007188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <__kernel_cos+0x184>)
 800718e:	491e      	ldr	r1, [pc, #120]	; (8007208 <__kernel_cos+0x180>)
 8007190:	429e      	cmp	r6, r3
 8007192:	bfcc      	ite	gt
 8007194:	4d1e      	ldrgt	r5, [pc, #120]	; (8007210 <__kernel_cos+0x188>)
 8007196:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800719a:	2400      	movs	r4, #0
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	2000      	movs	r0, #0
 80071a2:	f7f9 f869 	bl	8000278 <__aeabi_dsub>
 80071a6:	4622      	mov	r2, r4
 80071a8:	4606      	mov	r6, r0
 80071aa:	460f      	mov	r7, r1
 80071ac:	462b      	mov	r3, r5
 80071ae:	4650      	mov	r0, sl
 80071b0:	4659      	mov	r1, fp
 80071b2:	f7f9 f861 	bl	8000278 <__aeabi_dsub>
 80071b6:	4642      	mov	r2, r8
 80071b8:	464b      	mov	r3, r9
 80071ba:	f7f9 f85d 	bl	8000278 <__aeabi_dsub>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4630      	mov	r0, r6
 80071c4:	4639      	mov	r1, r7
 80071c6:	e7d9      	b.n	800717c <__kernel_cos+0xf4>
 80071c8:	2000      	movs	r0, #0
 80071ca:	490f      	ldr	r1, [pc, #60]	; (8007208 <__kernel_cos+0x180>)
 80071cc:	e7d8      	b.n	8007180 <__kernel_cos+0xf8>
 80071ce:	bf00      	nop
 80071d0:	be8838d4 	.word	0xbe8838d4
 80071d4:	bda8fae9 	.word	0xbda8fae9
 80071d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80071dc:	3e21ee9e 	.word	0x3e21ee9e
 80071e0:	809c52ad 	.word	0x809c52ad
 80071e4:	3e927e4f 	.word	0x3e927e4f
 80071e8:	19cb1590 	.word	0x19cb1590
 80071ec:	3efa01a0 	.word	0x3efa01a0
 80071f0:	16c15177 	.word	0x16c15177
 80071f4:	3f56c16c 	.word	0x3f56c16c
 80071f8:	5555554c 	.word	0x5555554c
 80071fc:	3fa55555 	.word	0x3fa55555
 8007200:	3fe00000 	.word	0x3fe00000
 8007204:	3fd33332 	.word	0x3fd33332
 8007208:	3ff00000 	.word	0x3ff00000
 800720c:	3fe90000 	.word	0x3fe90000
 8007210:	3fd20000 	.word	0x3fd20000
 8007214:	00000000 	.word	0x00000000

08007218 <__kernel_rem_pio2>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	ed2d 8b02 	vpush	{d8}
 8007220:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007224:	1ed4      	subs	r4, r2, #3
 8007226:	9308      	str	r3, [sp, #32]
 8007228:	9101      	str	r1, [sp, #4]
 800722a:	4bc5      	ldr	r3, [pc, #788]	; (8007540 <__kernel_rem_pio2+0x328>)
 800722c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800722e:	9009      	str	r0, [sp, #36]	; 0x24
 8007230:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	9b08      	ldr	r3, [sp, #32]
 8007238:	3b01      	subs	r3, #1
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	2318      	movs	r3, #24
 800723e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007242:	f06f 0317 	mvn.w	r3, #23
 8007246:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800724a:	fb04 3303 	mla	r3, r4, r3, r3
 800724e:	eb03 0a02 	add.w	sl, r3, r2
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	9a07      	ldr	r2, [sp, #28]
 8007256:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007530 <__kernel_rem_pio2+0x318>
 800725a:	eb03 0802 	add.w	r8, r3, r2
 800725e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007260:	1aa7      	subs	r7, r4, r2
 8007262:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007266:	ae22      	add	r6, sp, #136	; 0x88
 8007268:	2500      	movs	r5, #0
 800726a:	4545      	cmp	r5, r8
 800726c:	dd13      	ble.n	8007296 <__kernel_rem_pio2+0x7e>
 800726e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007530 <__kernel_rem_pio2+0x318>
 8007272:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007276:	2600      	movs	r6, #0
 8007278:	9b04      	ldr	r3, [sp, #16]
 800727a:	429e      	cmp	r6, r3
 800727c:	dc32      	bgt.n	80072e4 <__kernel_rem_pio2+0xcc>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	199d      	adds	r5, r3, r6
 8007286:	ab22      	add	r3, sp, #136	; 0x88
 8007288:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800728c:	9306      	str	r3, [sp, #24]
 800728e:	ec59 8b18 	vmov	r8, r9, d8
 8007292:	2700      	movs	r7, #0
 8007294:	e01f      	b.n	80072d6 <__kernel_rem_pio2+0xbe>
 8007296:	42ef      	cmn	r7, r5
 8007298:	d407      	bmi.n	80072aa <__kernel_rem_pio2+0x92>
 800729a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800729e:	f7f9 f939 	bl	8000514 <__aeabi_i2d>
 80072a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072a6:	3501      	adds	r5, #1
 80072a8:	e7df      	b.n	800726a <__kernel_rem_pio2+0x52>
 80072aa:	ec51 0b18 	vmov	r0, r1, d8
 80072ae:	e7f8      	b.n	80072a2 <__kernel_rem_pio2+0x8a>
 80072b0:	9906      	ldr	r1, [sp, #24]
 80072b2:	9d02      	ldr	r5, [sp, #8]
 80072b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80072b8:	9106      	str	r1, [sp, #24]
 80072ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80072be:	9502      	str	r5, [sp, #8]
 80072c0:	f7f9 f992 	bl	80005e8 <__aeabi_dmul>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4640      	mov	r0, r8
 80072ca:	4649      	mov	r1, r9
 80072cc:	f7f8 ffd6 	bl	800027c <__adddf3>
 80072d0:	3701      	adds	r7, #1
 80072d2:	4680      	mov	r8, r0
 80072d4:	4689      	mov	r9, r1
 80072d6:	9b07      	ldr	r3, [sp, #28]
 80072d8:	429f      	cmp	r7, r3
 80072da:	dde9      	ble.n	80072b0 <__kernel_rem_pio2+0x98>
 80072dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80072e0:	3601      	adds	r6, #1
 80072e2:	e7c9      	b.n	8007278 <__kernel_rem_pio2+0x60>
 80072e4:	9b04      	ldr	r3, [sp, #16]
 80072e6:	aa0e      	add	r2, sp, #56	; 0x38
 80072e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072ec:	930c      	str	r3, [sp, #48]	; 0x30
 80072ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80072f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80072f4:	9c04      	ldr	r4, [sp, #16]
 80072f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f8:	ab9a      	add	r3, sp, #616	; 0x268
 80072fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80072fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007302:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007306:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800730a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800730e:	ab9a      	add	r3, sp, #616	; 0x268
 8007310:	445b      	add	r3, fp
 8007312:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007316:	2500      	movs	r5, #0
 8007318:	1b63      	subs	r3, r4, r5
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc78      	bgt.n	8007410 <__kernel_rem_pio2+0x1f8>
 800731e:	4650      	mov	r0, sl
 8007320:	ec49 8b10 	vmov	d0, r8, r9
 8007324:	f000 fc00 	bl	8007b28 <scalbn>
 8007328:	ec57 6b10 	vmov	r6, r7, d0
 800732c:	2200      	movs	r2, #0
 800732e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007332:	ee10 0a10 	vmov	r0, s0
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 f956 	bl	80005e8 <__aeabi_dmul>
 800733c:	ec41 0b10 	vmov	d0, r0, r1
 8007340:	f000 fb6e 	bl	8007a20 <floor>
 8007344:	2200      	movs	r2, #0
 8007346:	ec51 0b10 	vmov	r0, r1, d0
 800734a:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <__kernel_rem_pio2+0x32c>)
 800734c:	f7f9 f94c 	bl	80005e8 <__aeabi_dmul>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4630      	mov	r0, r6
 8007356:	4639      	mov	r1, r7
 8007358:	f7f8 ff8e 	bl	8000278 <__aeabi_dsub>
 800735c:	460f      	mov	r7, r1
 800735e:	4606      	mov	r6, r0
 8007360:	f7f9 fbdc 	bl	8000b1c <__aeabi_d2iz>
 8007364:	9006      	str	r0, [sp, #24]
 8007366:	f7f9 f8d5 	bl	8000514 <__aeabi_i2d>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f8 ff81 	bl	8000278 <__aeabi_dsub>
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	dd6c      	ble.n	800745a <__kernel_rem_pio2+0x242>
 8007380:	1e62      	subs	r2, r4, #1
 8007382:	ab0e      	add	r3, sp, #56	; 0x38
 8007384:	f1ca 0118 	rsb	r1, sl, #24
 8007388:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800738c:	9d06      	ldr	r5, [sp, #24]
 800738e:	fa40 f301 	asr.w	r3, r0, r1
 8007392:	441d      	add	r5, r3
 8007394:	408b      	lsls	r3, r1
 8007396:	1ac0      	subs	r0, r0, r3
 8007398:	ab0e      	add	r3, sp, #56	; 0x38
 800739a:	9506      	str	r5, [sp, #24]
 800739c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073a0:	f1ca 0317 	rsb	r3, sl, #23
 80073a4:	fa40 f303 	asr.w	r3, r0, r3
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	9b02      	ldr	r3, [sp, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	dd62      	ble.n	8007476 <__kernel_rem_pio2+0x25e>
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	2200      	movs	r2, #0
 80073b4:	3301      	adds	r3, #1
 80073b6:	9306      	str	r3, [sp, #24]
 80073b8:	4615      	mov	r5, r2
 80073ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073be:	4294      	cmp	r4, r2
 80073c0:	f300 8095 	bgt.w	80074ee <__kernel_rem_pio2+0x2d6>
 80073c4:	f1ba 0f00 	cmp.w	sl, #0
 80073c8:	dd07      	ble.n	80073da <__kernel_rem_pio2+0x1c2>
 80073ca:	f1ba 0f01 	cmp.w	sl, #1
 80073ce:	f000 80a2 	beq.w	8007516 <__kernel_rem_pio2+0x2fe>
 80073d2:	f1ba 0f02 	cmp.w	sl, #2
 80073d6:	f000 80c1 	beq.w	800755c <__kernel_rem_pio2+0x344>
 80073da:	9b02      	ldr	r3, [sp, #8]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d14a      	bne.n	8007476 <__kernel_rem_pio2+0x25e>
 80073e0:	4632      	mov	r2, r6
 80073e2:	463b      	mov	r3, r7
 80073e4:	2000      	movs	r0, #0
 80073e6:	4958      	ldr	r1, [pc, #352]	; (8007548 <__kernel_rem_pio2+0x330>)
 80073e8:	f7f8 ff46 	bl	8000278 <__aeabi_dsub>
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	d040      	beq.n	8007476 <__kernel_rem_pio2+0x25e>
 80073f4:	4650      	mov	r0, sl
 80073f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007538 <__kernel_rem_pio2+0x320>
 80073fa:	f000 fb95 	bl	8007b28 <scalbn>
 80073fe:	4630      	mov	r0, r6
 8007400:	4639      	mov	r1, r7
 8007402:	ec53 2b10 	vmov	r2, r3, d0
 8007406:	f7f8 ff37 	bl	8000278 <__aeabi_dsub>
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	e032      	b.n	8007476 <__kernel_rem_pio2+0x25e>
 8007410:	2200      	movs	r2, #0
 8007412:	4b4e      	ldr	r3, [pc, #312]	; (800754c <__kernel_rem_pio2+0x334>)
 8007414:	4640      	mov	r0, r8
 8007416:	4649      	mov	r1, r9
 8007418:	f7f9 f8e6 	bl	80005e8 <__aeabi_dmul>
 800741c:	f7f9 fb7e 	bl	8000b1c <__aeabi_d2iz>
 8007420:	f7f9 f878 	bl	8000514 <__aeabi_i2d>
 8007424:	2200      	movs	r2, #0
 8007426:	4b4a      	ldr	r3, [pc, #296]	; (8007550 <__kernel_rem_pio2+0x338>)
 8007428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742c:	f7f9 f8dc 	bl	80005e8 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4640      	mov	r0, r8
 8007436:	4649      	mov	r1, r9
 8007438:	f7f8 ff1e 	bl	8000278 <__aeabi_dsub>
 800743c:	f7f9 fb6e 	bl	8000b1c <__aeabi_d2iz>
 8007440:	ab0e      	add	r3, sp, #56	; 0x38
 8007442:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007446:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800744a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800744e:	f7f8 ff15 	bl	800027c <__adddf3>
 8007452:	3501      	adds	r5, #1
 8007454:	4680      	mov	r8, r0
 8007456:	4689      	mov	r9, r1
 8007458:	e75e      	b.n	8007318 <__kernel_rem_pio2+0x100>
 800745a:	d105      	bne.n	8007468 <__kernel_rem_pio2+0x250>
 800745c:	1e63      	subs	r3, r4, #1
 800745e:	aa0e      	add	r2, sp, #56	; 0x38
 8007460:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007464:	15c3      	asrs	r3, r0, #23
 8007466:	e79f      	b.n	80073a8 <__kernel_rem_pio2+0x190>
 8007468:	2200      	movs	r2, #0
 800746a:	4b3a      	ldr	r3, [pc, #232]	; (8007554 <__kernel_rem_pio2+0x33c>)
 800746c:	f7f9 fb42 	bl	8000af4 <__aeabi_dcmpge>
 8007470:	2800      	cmp	r0, #0
 8007472:	d139      	bne.n	80074e8 <__kernel_rem_pio2+0x2d0>
 8007474:	9002      	str	r0, [sp, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f9 fb1b 	bl	8000ab8 <__aeabi_dcmpeq>
 8007482:	2800      	cmp	r0, #0
 8007484:	f000 80c7 	beq.w	8007616 <__kernel_rem_pio2+0x3fe>
 8007488:	1e65      	subs	r5, r4, #1
 800748a:	462b      	mov	r3, r5
 800748c:	2200      	movs	r2, #0
 800748e:	9904      	ldr	r1, [sp, #16]
 8007490:	428b      	cmp	r3, r1
 8007492:	da6a      	bge.n	800756a <__kernel_rem_pio2+0x352>
 8007494:	2a00      	cmp	r2, #0
 8007496:	f000 8088 	beq.w	80075aa <__kernel_rem_pio2+0x392>
 800749a:	ab0e      	add	r3, sp, #56	; 0x38
 800749c:	f1aa 0a18 	sub.w	sl, sl, #24
 80074a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 80b4 	beq.w	8007612 <__kernel_rem_pio2+0x3fa>
 80074aa:	4650      	mov	r0, sl
 80074ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007538 <__kernel_rem_pio2+0x320>
 80074b0:	f000 fb3a 	bl	8007b28 <scalbn>
 80074b4:	00ec      	lsls	r4, r5, #3
 80074b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80074b8:	191e      	adds	r6, r3, r4
 80074ba:	ec59 8b10 	vmov	r8, r9, d0
 80074be:	f106 0a08 	add.w	sl, r6, #8
 80074c2:	462f      	mov	r7, r5
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f280 80df 	bge.w	8007688 <__kernel_rem_pio2+0x470>
 80074ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007530 <__kernel_rem_pio2+0x318>
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	eba5 030a 	sub.w	r3, r5, sl
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f2c0 810a 	blt.w	80076f0 <__kernel_rem_pio2+0x4d8>
 80074dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007558 <__kernel_rem_pio2+0x340>
 80074e0:	ec59 8b18 	vmov	r8, r9, d8
 80074e4:	2700      	movs	r7, #0
 80074e6:	e0f5      	b.n	80076d4 <__kernel_rem_pio2+0x4bc>
 80074e8:	2302      	movs	r3, #2
 80074ea:	9302      	str	r3, [sp, #8]
 80074ec:	e760      	b.n	80073b0 <__kernel_rem_pio2+0x198>
 80074ee:	ab0e      	add	r3, sp, #56	; 0x38
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	b94d      	cbnz	r5, 800750a <__kernel_rem_pio2+0x2f2>
 80074f6:	b12b      	cbz	r3, 8007504 <__kernel_rem_pio2+0x2ec>
 80074f8:	a80e      	add	r0, sp, #56	; 0x38
 80074fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80074fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007502:	2301      	movs	r3, #1
 8007504:	3201      	adds	r2, #1
 8007506:	461d      	mov	r5, r3
 8007508:	e759      	b.n	80073be <__kernel_rem_pio2+0x1a6>
 800750a:	a80e      	add	r0, sp, #56	; 0x38
 800750c:	1acb      	subs	r3, r1, r3
 800750e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007512:	462b      	mov	r3, r5
 8007514:	e7f6      	b.n	8007504 <__kernel_rem_pio2+0x2ec>
 8007516:	1e62      	subs	r2, r4, #1
 8007518:	ab0e      	add	r3, sp, #56	; 0x38
 800751a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007522:	a90e      	add	r1, sp, #56	; 0x38
 8007524:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007528:	e757      	b.n	80073da <__kernel_rem_pio2+0x1c2>
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
	...
 800753c:	3ff00000 	.word	0x3ff00000
 8007540:	08007ef0 	.word	0x08007ef0
 8007544:	40200000 	.word	0x40200000
 8007548:	3ff00000 	.word	0x3ff00000
 800754c:	3e700000 	.word	0x3e700000
 8007550:	41700000 	.word	0x41700000
 8007554:	3fe00000 	.word	0x3fe00000
 8007558:	08007eb0 	.word	0x08007eb0
 800755c:	1e62      	subs	r2, r4, #1
 800755e:	ab0e      	add	r3, sp, #56	; 0x38
 8007560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007564:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007568:	e7db      	b.n	8007522 <__kernel_rem_pio2+0x30a>
 800756a:	a90e      	add	r1, sp, #56	; 0x38
 800756c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007570:	3b01      	subs	r3, #1
 8007572:	430a      	orrs	r2, r1
 8007574:	e78b      	b.n	800748e <__kernel_rem_pio2+0x276>
 8007576:	3301      	adds	r3, #1
 8007578:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800757c:	2900      	cmp	r1, #0
 800757e:	d0fa      	beq.n	8007576 <__kernel_rem_pio2+0x35e>
 8007580:	9a08      	ldr	r2, [sp, #32]
 8007582:	4422      	add	r2, r4
 8007584:	00d2      	lsls	r2, r2, #3
 8007586:	a922      	add	r1, sp, #136	; 0x88
 8007588:	18e3      	adds	r3, r4, r3
 800758a:	9206      	str	r2, [sp, #24]
 800758c:	440a      	add	r2, r1
 800758e:	9302      	str	r3, [sp, #8]
 8007590:	f10b 0108 	add.w	r1, fp, #8
 8007594:	f102 0308 	add.w	r3, r2, #8
 8007598:	1c66      	adds	r6, r4, #1
 800759a:	910a      	str	r1, [sp, #40]	; 0x28
 800759c:	2500      	movs	r5, #0
 800759e:	930d      	str	r3, [sp, #52]	; 0x34
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	42b3      	cmp	r3, r6
 80075a4:	da04      	bge.n	80075b0 <__kernel_rem_pio2+0x398>
 80075a6:	461c      	mov	r4, r3
 80075a8:	e6a6      	b.n	80072f8 <__kernel_rem_pio2+0xe0>
 80075aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ac:	2301      	movs	r3, #1
 80075ae:	e7e3      	b.n	8007578 <__kernel_rem_pio2+0x360>
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	18ef      	adds	r7, r5, r3
 80075b4:	ab22      	add	r3, sp, #136	; 0x88
 80075b6:	441f      	add	r7, r3
 80075b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80075be:	f7f8 ffa9 	bl	8000514 <__aeabi_i2d>
 80075c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c4:	461c      	mov	r4, r3
 80075c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075c8:	e9c7 0100 	strd	r0, r1, [r7]
 80075cc:	eb03 0b05 	add.w	fp, r3, r5
 80075d0:	2700      	movs	r7, #0
 80075d2:	f04f 0800 	mov.w	r8, #0
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	9b07      	ldr	r3, [sp, #28]
 80075dc:	429f      	cmp	r7, r3
 80075de:	dd08      	ble.n	80075f2 <__kernel_rem_pio2+0x3da>
 80075e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e2:	aa72      	add	r2, sp, #456	; 0x1c8
 80075e4:	18eb      	adds	r3, r5, r3
 80075e6:	4413      	add	r3, r2
 80075e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80075ec:	3601      	adds	r6, #1
 80075ee:	3508      	adds	r5, #8
 80075f0:	e7d6      	b.n	80075a0 <__kernel_rem_pio2+0x388>
 80075f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80075f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80075fa:	f7f8 fff5 	bl	80005e8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4640      	mov	r0, r8
 8007604:	4649      	mov	r1, r9
 8007606:	f7f8 fe39 	bl	800027c <__adddf3>
 800760a:	3701      	adds	r7, #1
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	e7e3      	b.n	80075da <__kernel_rem_pio2+0x3c2>
 8007612:	3d01      	subs	r5, #1
 8007614:	e741      	b.n	800749a <__kernel_rem_pio2+0x282>
 8007616:	f1ca 0000 	rsb	r0, sl, #0
 800761a:	ec47 6b10 	vmov	d0, r6, r7
 800761e:	f000 fa83 	bl	8007b28 <scalbn>
 8007622:	ec57 6b10 	vmov	r6, r7, d0
 8007626:	2200      	movs	r2, #0
 8007628:	4b99      	ldr	r3, [pc, #612]	; (8007890 <__kernel_rem_pio2+0x678>)
 800762a:	ee10 0a10 	vmov	r0, s0
 800762e:	4639      	mov	r1, r7
 8007630:	f7f9 fa60 	bl	8000af4 <__aeabi_dcmpge>
 8007634:	b1f8      	cbz	r0, 8007676 <__kernel_rem_pio2+0x45e>
 8007636:	2200      	movs	r2, #0
 8007638:	4b96      	ldr	r3, [pc, #600]	; (8007894 <__kernel_rem_pio2+0x67c>)
 800763a:	4630      	mov	r0, r6
 800763c:	4639      	mov	r1, r7
 800763e:	f7f8 ffd3 	bl	80005e8 <__aeabi_dmul>
 8007642:	f7f9 fa6b 	bl	8000b1c <__aeabi_d2iz>
 8007646:	4680      	mov	r8, r0
 8007648:	f7f8 ff64 	bl	8000514 <__aeabi_i2d>
 800764c:	2200      	movs	r2, #0
 800764e:	4b90      	ldr	r3, [pc, #576]	; (8007890 <__kernel_rem_pio2+0x678>)
 8007650:	f7f8 ffca 	bl	80005e8 <__aeabi_dmul>
 8007654:	460b      	mov	r3, r1
 8007656:	4602      	mov	r2, r0
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	f7f8 fe0c 	bl	8000278 <__aeabi_dsub>
 8007660:	f7f9 fa5c 	bl	8000b1c <__aeabi_d2iz>
 8007664:	1c65      	adds	r5, r4, #1
 8007666:	ab0e      	add	r3, sp, #56	; 0x38
 8007668:	f10a 0a18 	add.w	sl, sl, #24
 800766c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007670:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007674:	e719      	b.n	80074aa <__kernel_rem_pio2+0x292>
 8007676:	4630      	mov	r0, r6
 8007678:	4639      	mov	r1, r7
 800767a:	f7f9 fa4f 	bl	8000b1c <__aeabi_d2iz>
 800767e:	ab0e      	add	r3, sp, #56	; 0x38
 8007680:	4625      	mov	r5, r4
 8007682:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007686:	e710      	b.n	80074aa <__kernel_rem_pio2+0x292>
 8007688:	ab0e      	add	r3, sp, #56	; 0x38
 800768a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800768e:	f7f8 ff41 	bl	8000514 <__aeabi_i2d>
 8007692:	4642      	mov	r2, r8
 8007694:	464b      	mov	r3, r9
 8007696:	f7f8 ffa7 	bl	80005e8 <__aeabi_dmul>
 800769a:	2200      	movs	r2, #0
 800769c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80076a0:	4b7c      	ldr	r3, [pc, #496]	; (8007894 <__kernel_rem_pio2+0x67c>)
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f8 ff9f 	bl	80005e8 <__aeabi_dmul>
 80076aa:	3f01      	subs	r7, #1
 80076ac:	4680      	mov	r8, r0
 80076ae:	4689      	mov	r9, r1
 80076b0:	e708      	b.n	80074c4 <__kernel_rem_pio2+0x2ac>
 80076b2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80076be:	f7f8 ff93 	bl	80005e8 <__aeabi_dmul>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f7f8 fdd7 	bl	800027c <__adddf3>
 80076ce:	3701      	adds	r7, #1
 80076d0:	4680      	mov	r8, r0
 80076d2:	4689      	mov	r9, r1
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	429f      	cmp	r7, r3
 80076d8:	dc01      	bgt.n	80076de <__kernel_rem_pio2+0x4c6>
 80076da:	45ba      	cmp	sl, r7
 80076dc:	dae9      	bge.n	80076b2 <__kernel_rem_pio2+0x49a>
 80076de:	ab4a      	add	r3, sp, #296	; 0x128
 80076e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076e4:	e9c3 8900 	strd	r8, r9, [r3]
 80076e8:	f10a 0a01 	add.w	sl, sl, #1
 80076ec:	3e08      	subs	r6, #8
 80076ee:	e6f0      	b.n	80074d2 <__kernel_rem_pio2+0x2ba>
 80076f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d85b      	bhi.n	80077ae <__kernel_rem_pio2+0x596>
 80076f6:	e8df f003 	tbb	[pc, r3]
 80076fa:	264a      	.short	0x264a
 80076fc:	0226      	.short	0x0226
 80076fe:	ab9a      	add	r3, sp, #616	; 0x268
 8007700:	441c      	add	r4, r3
 8007702:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007706:	46a2      	mov	sl, r4
 8007708:	46ab      	mov	fp, r5
 800770a:	f1bb 0f00 	cmp.w	fp, #0
 800770e:	dc6c      	bgt.n	80077ea <__kernel_rem_pio2+0x5d2>
 8007710:	46a2      	mov	sl, r4
 8007712:	46ab      	mov	fp, r5
 8007714:	f1bb 0f01 	cmp.w	fp, #1
 8007718:	f300 8086 	bgt.w	8007828 <__kernel_rem_pio2+0x610>
 800771c:	2000      	movs	r0, #0
 800771e:	2100      	movs	r1, #0
 8007720:	2d01      	cmp	r5, #1
 8007722:	f300 80a0 	bgt.w	8007866 <__kernel_rem_pio2+0x64e>
 8007726:	9b02      	ldr	r3, [sp, #8]
 8007728:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800772c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 809e 	bne.w	8007872 <__kernel_rem_pio2+0x65a>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	e9c3 7800 	strd	r7, r8, [r3]
 800773c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007740:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007744:	e033      	b.n	80077ae <__kernel_rem_pio2+0x596>
 8007746:	3408      	adds	r4, #8
 8007748:	ab4a      	add	r3, sp, #296	; 0x128
 800774a:	441c      	add	r4, r3
 800774c:	462e      	mov	r6, r5
 800774e:	2000      	movs	r0, #0
 8007750:	2100      	movs	r1, #0
 8007752:	2e00      	cmp	r6, #0
 8007754:	da3a      	bge.n	80077cc <__kernel_rem_pio2+0x5b4>
 8007756:	9b02      	ldr	r3, [sp, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d03d      	beq.n	80077d8 <__kernel_rem_pio2+0x5c0>
 800775c:	4602      	mov	r2, r0
 800775e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007762:	9c01      	ldr	r4, [sp, #4]
 8007764:	e9c4 2300 	strd	r2, r3, [r4]
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007770:	f7f8 fd82 	bl	8000278 <__aeabi_dsub>
 8007774:	ae4c      	add	r6, sp, #304	; 0x130
 8007776:	2401      	movs	r4, #1
 8007778:	42a5      	cmp	r5, r4
 800777a:	da30      	bge.n	80077de <__kernel_rem_pio2+0x5c6>
 800777c:	9b02      	ldr	r3, [sp, #8]
 800777e:	b113      	cbz	r3, 8007786 <__kernel_rem_pio2+0x56e>
 8007780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007784:	4619      	mov	r1, r3
 8007786:	9b01      	ldr	r3, [sp, #4]
 8007788:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800778c:	e00f      	b.n	80077ae <__kernel_rem_pio2+0x596>
 800778e:	ab9a      	add	r3, sp, #616	; 0x268
 8007790:	441c      	add	r4, r3
 8007792:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007796:	2000      	movs	r0, #0
 8007798:	2100      	movs	r1, #0
 800779a:	2d00      	cmp	r5, #0
 800779c:	da10      	bge.n	80077c0 <__kernel_rem_pio2+0x5a8>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	b113      	cbz	r3, 80077a8 <__kernel_rem_pio2+0x590>
 80077a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a6:	4619      	mov	r1, r3
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	e9c3 0100 	strd	r0, r1, [r3]
 80077ae:	9b06      	ldr	r3, [sp, #24]
 80077b0:	f003 0007 	and.w	r0, r3, #7
 80077b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80077b8:	ecbd 8b02 	vpop	{d8}
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077c4:	f7f8 fd5a 	bl	800027c <__adddf3>
 80077c8:	3d01      	subs	r5, #1
 80077ca:	e7e6      	b.n	800779a <__kernel_rem_pio2+0x582>
 80077cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80077d0:	f7f8 fd54 	bl	800027c <__adddf3>
 80077d4:	3e01      	subs	r6, #1
 80077d6:	e7bc      	b.n	8007752 <__kernel_rem_pio2+0x53a>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	e7c1      	b.n	8007762 <__kernel_rem_pio2+0x54a>
 80077de:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80077e2:	f7f8 fd4b 	bl	800027c <__adddf3>
 80077e6:	3401      	adds	r4, #1
 80077e8:	e7c6      	b.n	8007778 <__kernel_rem_pio2+0x560>
 80077ea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80077ee:	ed3a 7b02 	vldmdb	sl!, {d7}
 80077f2:	4640      	mov	r0, r8
 80077f4:	ec53 2b17 	vmov	r2, r3, d7
 80077f8:	4649      	mov	r1, r9
 80077fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077fe:	f7f8 fd3d 	bl	800027c <__adddf3>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 fd33 	bl	8000278 <__aeabi_dsub>
 8007812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007816:	f7f8 fd31 	bl	800027c <__adddf3>
 800781a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800781e:	e9ca 0100 	strd	r0, r1, [sl]
 8007822:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007826:	e770      	b.n	800770a <__kernel_rem_pio2+0x4f2>
 8007828:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800782c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007830:	4630      	mov	r0, r6
 8007832:	ec53 2b17 	vmov	r2, r3, d7
 8007836:	4639      	mov	r1, r7
 8007838:	ed8d 7b04 	vstr	d7, [sp, #16]
 800783c:	f7f8 fd1e 	bl	800027c <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4680      	mov	r8, r0
 8007846:	4689      	mov	r9, r1
 8007848:	4630      	mov	r0, r6
 800784a:	4639      	mov	r1, r7
 800784c:	f7f8 fd14 	bl	8000278 <__aeabi_dsub>
 8007850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007854:	f7f8 fd12 	bl	800027c <__adddf3>
 8007858:	f10b 3bff 	add.w	fp, fp, #4294967295
 800785c:	e9ca 0100 	strd	r0, r1, [sl]
 8007860:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007864:	e756      	b.n	8007714 <__kernel_rem_pio2+0x4fc>
 8007866:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800786a:	f7f8 fd07 	bl	800027c <__adddf3>
 800786e:	3d01      	subs	r5, #1
 8007870:	e756      	b.n	8007720 <__kernel_rem_pio2+0x508>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	9a01      	ldr	r2, [sp, #4]
 8007876:	601f      	str	r7, [r3, #0]
 8007878:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800787c:	605c      	str	r4, [r3, #4]
 800787e:	609d      	str	r5, [r3, #8]
 8007880:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007884:	60d3      	str	r3, [r2, #12]
 8007886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788a:	6110      	str	r0, [r2, #16]
 800788c:	6153      	str	r3, [r2, #20]
 800788e:	e78e      	b.n	80077ae <__kernel_rem_pio2+0x596>
 8007890:	41700000 	.word	0x41700000
 8007894:	3e700000 	.word	0x3e700000

08007898 <__kernel_sin>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	ec55 4b10 	vmov	r4, r5, d0
 80078a0:	b085      	sub	sp, #20
 80078a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078a6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80078aa:	ed8d 1b00 	vstr	d1, [sp]
 80078ae:	9002      	str	r0, [sp, #8]
 80078b0:	da06      	bge.n	80078c0 <__kernel_sin+0x28>
 80078b2:	ee10 0a10 	vmov	r0, s0
 80078b6:	4629      	mov	r1, r5
 80078b8:	f7f9 f930 	bl	8000b1c <__aeabi_d2iz>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d051      	beq.n	8007964 <__kernel_sin+0xcc>
 80078c0:	4622      	mov	r2, r4
 80078c2:	462b      	mov	r3, r5
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f8 fe8e 	bl	80005e8 <__aeabi_dmul>
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4620      	mov	r0, r4
 80078d6:	4629      	mov	r1, r5
 80078d8:	f7f8 fe86 	bl	80005e8 <__aeabi_dmul>
 80078dc:	a341      	add	r3, pc, #260	; (adr r3, 80079e4 <__kernel_sin+0x14c>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	4680      	mov	r8, r0
 80078e4:	4689      	mov	r9, r1
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	f7f8 fe7d 	bl	80005e8 <__aeabi_dmul>
 80078ee:	a33f      	add	r3, pc, #252	; (adr r3, 80079ec <__kernel_sin+0x154>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f8 fcc0 	bl	8000278 <__aeabi_dsub>
 80078f8:	4652      	mov	r2, sl
 80078fa:	465b      	mov	r3, fp
 80078fc:	f7f8 fe74 	bl	80005e8 <__aeabi_dmul>
 8007900:	a33c      	add	r3, pc, #240	; (adr r3, 80079f4 <__kernel_sin+0x15c>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fcb9 	bl	800027c <__adddf3>
 800790a:	4652      	mov	r2, sl
 800790c:	465b      	mov	r3, fp
 800790e:	f7f8 fe6b 	bl	80005e8 <__aeabi_dmul>
 8007912:	a33a      	add	r3, pc, #232	; (adr r3, 80079fc <__kernel_sin+0x164>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fcae 	bl	8000278 <__aeabi_dsub>
 800791c:	4652      	mov	r2, sl
 800791e:	465b      	mov	r3, fp
 8007920:	f7f8 fe62 	bl	80005e8 <__aeabi_dmul>
 8007924:	a337      	add	r3, pc, #220	; (adr r3, 8007a04 <__kernel_sin+0x16c>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7f8 fca7 	bl	800027c <__adddf3>
 800792e:	9b02      	ldr	r3, [sp, #8]
 8007930:	4606      	mov	r6, r0
 8007932:	460f      	mov	r7, r1
 8007934:	b9db      	cbnz	r3, 800796e <__kernel_sin+0xd6>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4650      	mov	r0, sl
 800793c:	4659      	mov	r1, fp
 800793e:	f7f8 fe53 	bl	80005e8 <__aeabi_dmul>
 8007942:	a325      	add	r3, pc, #148	; (adr r3, 80079d8 <__kernel_sin+0x140>)
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f7f8 fc96 	bl	8000278 <__aeabi_dsub>
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	f7f8 fe4a 	bl	80005e8 <__aeabi_dmul>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4620      	mov	r0, r4
 800795a:	4629      	mov	r1, r5
 800795c:	f7f8 fc8e 	bl	800027c <__adddf3>
 8007960:	4604      	mov	r4, r0
 8007962:	460d      	mov	r5, r1
 8007964:	ec45 4b10 	vmov	d0, r4, r5
 8007968:	b005      	add	sp, #20
 800796a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796e:	2200      	movs	r2, #0
 8007970:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <__kernel_sin+0x148>)
 8007972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007976:	f7f8 fe37 	bl	80005e8 <__aeabi_dmul>
 800797a:	4632      	mov	r2, r6
 800797c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007980:	463b      	mov	r3, r7
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe2f 	bl	80005e8 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007992:	f7f8 fc71 	bl	8000278 <__aeabi_dsub>
 8007996:	4652      	mov	r2, sl
 8007998:	465b      	mov	r3, fp
 800799a:	f7f8 fe25 	bl	80005e8 <__aeabi_dmul>
 800799e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079a2:	f7f8 fc69 	bl	8000278 <__aeabi_dsub>
 80079a6:	a30c      	add	r3, pc, #48	; (adr r3, 80079d8 <__kernel_sin+0x140>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	4606      	mov	r6, r0
 80079ae:	460f      	mov	r7, r1
 80079b0:	4640      	mov	r0, r8
 80079b2:	4649      	mov	r1, r9
 80079b4:	f7f8 fe18 	bl	80005e8 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 fc5c 	bl	800027c <__adddf3>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fc54 	bl	8000278 <__aeabi_dsub>
 80079d0:	e7c6      	b.n	8007960 <__kernel_sin+0xc8>
 80079d2:	bf00      	nop
 80079d4:	f3af 8000 	nop.w
 80079d8:	55555549 	.word	0x55555549
 80079dc:	3fc55555 	.word	0x3fc55555
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	5acfd57c 	.word	0x5acfd57c
 80079e8:	3de5d93a 	.word	0x3de5d93a
 80079ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80079f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80079f4:	57b1fe7d 	.word	0x57b1fe7d
 80079f8:	3ec71de3 	.word	0x3ec71de3
 80079fc:	19c161d5 	.word	0x19c161d5
 8007a00:	3f2a01a0 	.word	0x3f2a01a0
 8007a04:	1110f8a6 	.word	0x1110f8a6
 8007a08:	3f811111 	.word	0x3f811111

08007a0c <fabs>:
 8007a0c:	ec51 0b10 	vmov	r0, r1, d0
 8007a10:	ee10 2a10 	vmov	r2, s0
 8007a14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007a18:	ec43 2b10 	vmov	d0, r2, r3
 8007a1c:	4770      	bx	lr
	...

08007a20 <floor>:
 8007a20:	ec51 0b10 	vmov	r0, r1, d0
 8007a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a30:	2e13      	cmp	r6, #19
 8007a32:	460c      	mov	r4, r1
 8007a34:	ee10 5a10 	vmov	r5, s0
 8007a38:	4680      	mov	r8, r0
 8007a3a:	dc34      	bgt.n	8007aa6 <floor+0x86>
 8007a3c:	2e00      	cmp	r6, #0
 8007a3e:	da16      	bge.n	8007a6e <floor+0x4e>
 8007a40:	a335      	add	r3, pc, #212	; (adr r3, 8007b18 <floor+0xf8>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f7f8 fc19 	bl	800027c <__adddf3>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f7f9 f85b 	bl	8000b08 <__aeabi_dcmpgt>
 8007a52:	b148      	cbz	r0, 8007a68 <floor+0x48>
 8007a54:	2c00      	cmp	r4, #0
 8007a56:	da59      	bge.n	8007b0c <floor+0xec>
 8007a58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007a5c:	4a30      	ldr	r2, [pc, #192]	; (8007b20 <floor+0x100>)
 8007a5e:	432b      	orrs	r3, r5
 8007a60:	2500      	movs	r5, #0
 8007a62:	42ab      	cmp	r3, r5
 8007a64:	bf18      	it	ne
 8007a66:	4614      	movne	r4, r2
 8007a68:	4621      	mov	r1, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	e025      	b.n	8007aba <floor+0x9a>
 8007a6e:	4f2d      	ldr	r7, [pc, #180]	; (8007b24 <floor+0x104>)
 8007a70:	4137      	asrs	r7, r6
 8007a72:	ea01 0307 	and.w	r3, r1, r7
 8007a76:	4303      	orrs	r3, r0
 8007a78:	d01f      	beq.n	8007aba <floor+0x9a>
 8007a7a:	a327      	add	r3, pc, #156	; (adr r3, 8007b18 <floor+0xf8>)
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	f7f8 fbfc 	bl	800027c <__adddf3>
 8007a84:	2200      	movs	r2, #0
 8007a86:	2300      	movs	r3, #0
 8007a88:	f7f9 f83e 	bl	8000b08 <__aeabi_dcmpgt>
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	d0eb      	beq.n	8007a68 <floor+0x48>
 8007a90:	2c00      	cmp	r4, #0
 8007a92:	bfbe      	ittt	lt
 8007a94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007a98:	fa43 f606 	asrlt.w	r6, r3, r6
 8007a9c:	19a4      	addlt	r4, r4, r6
 8007a9e:	ea24 0407 	bic.w	r4, r4, r7
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	e7e0      	b.n	8007a68 <floor+0x48>
 8007aa6:	2e33      	cmp	r6, #51	; 0x33
 8007aa8:	dd0b      	ble.n	8007ac2 <floor+0xa2>
 8007aaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007aae:	d104      	bne.n	8007aba <floor+0x9a>
 8007ab0:	ee10 2a10 	vmov	r2, s0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	f7f8 fbe1 	bl	800027c <__adddf3>
 8007aba:	ec41 0b10 	vmov	d0, r0, r1
 8007abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	fa23 f707 	lsr.w	r7, r3, r7
 8007ace:	4207      	tst	r7, r0
 8007ad0:	d0f3      	beq.n	8007aba <floor+0x9a>
 8007ad2:	a311      	add	r3, pc, #68	; (adr r3, 8007b18 <floor+0xf8>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f7f8 fbd0 	bl	800027c <__adddf3>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f7f9 f812 	bl	8000b08 <__aeabi_dcmpgt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d0bf      	beq.n	8007a68 <floor+0x48>
 8007ae8:	2c00      	cmp	r4, #0
 8007aea:	da02      	bge.n	8007af2 <floor+0xd2>
 8007aec:	2e14      	cmp	r6, #20
 8007aee:	d103      	bne.n	8007af8 <floor+0xd8>
 8007af0:	3401      	adds	r4, #1
 8007af2:	ea25 0507 	bic.w	r5, r5, r7
 8007af6:	e7b7      	b.n	8007a68 <floor+0x48>
 8007af8:	2301      	movs	r3, #1
 8007afa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007afe:	fa03 f606 	lsl.w	r6, r3, r6
 8007b02:	4435      	add	r5, r6
 8007b04:	4545      	cmp	r5, r8
 8007b06:	bf38      	it	cc
 8007b08:	18e4      	addcc	r4, r4, r3
 8007b0a:	e7f2      	b.n	8007af2 <floor+0xd2>
 8007b0c:	2500      	movs	r5, #0
 8007b0e:	462c      	mov	r4, r5
 8007b10:	e7aa      	b.n	8007a68 <floor+0x48>
 8007b12:	bf00      	nop
 8007b14:	f3af 8000 	nop.w
 8007b18:	8800759c 	.word	0x8800759c
 8007b1c:	7e37e43c 	.word	0x7e37e43c
 8007b20:	bff00000 	.word	0xbff00000
 8007b24:	000fffff 	.word	0x000fffff

08007b28 <scalbn>:
 8007b28:	b570      	push	{r4, r5, r6, lr}
 8007b2a:	ec55 4b10 	vmov	r4, r5, d0
 8007b2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b32:	4606      	mov	r6, r0
 8007b34:	462b      	mov	r3, r5
 8007b36:	b9aa      	cbnz	r2, 8007b64 <scalbn+0x3c>
 8007b38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b3c:	4323      	orrs	r3, r4
 8007b3e:	d03b      	beq.n	8007bb8 <scalbn+0x90>
 8007b40:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <scalbn+0xe0>)
 8007b42:	4629      	mov	r1, r5
 8007b44:	2200      	movs	r2, #0
 8007b46:	ee10 0a10 	vmov	r0, s0
 8007b4a:	f7f8 fd4d 	bl	80005e8 <__aeabi_dmul>
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <scalbn+0xe4>)
 8007b50:	429e      	cmp	r6, r3
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	da12      	bge.n	8007b7e <scalbn+0x56>
 8007b58:	a327      	add	r3, pc, #156	; (adr r3, 8007bf8 <scalbn+0xd0>)
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	f7f8 fd43 	bl	80005e8 <__aeabi_dmul>
 8007b62:	e009      	b.n	8007b78 <scalbn+0x50>
 8007b64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007b68:	428a      	cmp	r2, r1
 8007b6a:	d10c      	bne.n	8007b86 <scalbn+0x5e>
 8007b6c:	ee10 2a10 	vmov	r2, s0
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 fb82 	bl	800027c <__adddf3>
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	e01c      	b.n	8007bb8 <scalbn+0x90>
 8007b7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b82:	460b      	mov	r3, r1
 8007b84:	3a36      	subs	r2, #54	; 0x36
 8007b86:	4432      	add	r2, r6
 8007b88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007b8c:	428a      	cmp	r2, r1
 8007b8e:	dd0b      	ble.n	8007ba8 <scalbn+0x80>
 8007b90:	ec45 4b11 	vmov	d1, r4, r5
 8007b94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007c00 <scalbn+0xd8>
 8007b98:	f000 f83c 	bl	8007c14 <copysign>
 8007b9c:	a318      	add	r3, pc, #96	; (adr r3, 8007c00 <scalbn+0xd8>)
 8007b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba2:	ec51 0b10 	vmov	r0, r1, d0
 8007ba6:	e7da      	b.n	8007b5e <scalbn+0x36>
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	dd08      	ble.n	8007bbe <scalbn+0x96>
 8007bac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bb8:	ec45 4b10 	vmov	d0, r4, r5
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007bc2:	da0d      	bge.n	8007be0 <scalbn+0xb8>
 8007bc4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007bc8:	429e      	cmp	r6, r3
 8007bca:	ec45 4b11 	vmov	d1, r4, r5
 8007bce:	dce1      	bgt.n	8007b94 <scalbn+0x6c>
 8007bd0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007bf8 <scalbn+0xd0>
 8007bd4:	f000 f81e 	bl	8007c14 <copysign>
 8007bd8:	a307      	add	r3, pc, #28	; (adr r3, 8007bf8 <scalbn+0xd0>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	e7e0      	b.n	8007ba2 <scalbn+0x7a>
 8007be0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007be4:	3236      	adds	r2, #54	; 0x36
 8007be6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <scalbn+0xe8>)
 8007bf6:	e7b2      	b.n	8007b5e <scalbn+0x36>
 8007bf8:	c2f8f359 	.word	0xc2f8f359
 8007bfc:	01a56e1f 	.word	0x01a56e1f
 8007c00:	8800759c 	.word	0x8800759c
 8007c04:	7e37e43c 	.word	0x7e37e43c
 8007c08:	43500000 	.word	0x43500000
 8007c0c:	ffff3cb0 	.word	0xffff3cb0
 8007c10:	3c900000 	.word	0x3c900000

08007c14 <copysign>:
 8007c14:	ec51 0b10 	vmov	r0, r1, d0
 8007c18:	ee11 0a90 	vmov	r0, s3
 8007c1c:	ee10 2a10 	vmov	r2, s0
 8007c20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c28:	ea41 0300 	orr.w	r3, r1, r0
 8007c2c:	ec43 2b10 	vmov	d0, r2, r3
 8007c30:	4770      	bx	lr
	...

08007c34 <_init>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr

08007c40 <_fini>:
 8007c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c42:	bf00      	nop
 8007c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c46:	bc08      	pop	{r3}
 8007c48:	469e      	mov	lr, r3
 8007c4a:	4770      	bx	lr
