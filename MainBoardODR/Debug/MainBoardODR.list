
MainBoardODR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053fc  080053fc  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  080053fc  080053fc  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053fc  080053fc  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08005404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000038  0800543c  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  0800543c  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001171a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002434  00000000  00000000  00031782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001008  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00034bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d470  00000000  00000000  00035a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d757  00000000  00000000  00052f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad600  00000000  00000000  00060657  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010dc57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  0010dcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053b4 	.word	0x080053b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	080053b4 	.word	0x080053b4

080001c8 <getBumperStatus>:
 *      Author: Madita
 */
#include "bumper.h"
#include "main.h"

BUMPER_STATUS getBumperStatus(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, BUMPER_Pin) == GPIO_PIN_SET){
 80001cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d4:	f002 fb22 	bl	800281c <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d101      	bne.n	80001e2 <getBumperStatus+0x1a>
		return BUMPER_OK;
 80001de:	2300      	movs	r3, #0
 80001e0:	e000      	b.n	80001e4 <getBumperStatus+0x1c>
	}
	return BUMPER_ERROR;
 80001e2:	2301      	movs	r3, #1
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
	__NOP();
 8000206:	bf00      	nop
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fe57 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f82f 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fb0b 	bl	800083c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000226:	f000 f88d 	bl	8000344 <MX_ADC1_Init>
  MX_ADC2_Init();
 800022a:	f000 f8fb 	bl	8000424 <MX_ADC2_Init>
  MX_I2C1_Init();
 800022e:	f000 f957 	bl	80004e0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000232:	f000 f995 	bl	8000560 <MX_RTC_Init>
  MX_TIM1_Init();
 8000236:	f000 f9b9 	bl	80005ac <MX_TIM1_Init>
  MX_TIM2_Init();
 800023a:	f000 fa77 	bl	800072c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	BUMPER_STATUS bumper = BUMPER_NONE;
 800023e:	23ff      	movs	r3, #255	; 0xff
 8000240:	71fb      	strb	r3, [r7, #7]

	HAL_TIM_Base_Start_IT(&htim2);
 8000242:	480c      	ldr	r0, [pc, #48]	; (8000274 <main+0x60>)
 8000244:	f003 ff8c 	bl	8004160 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);

	htim2.Instance->CCR1 = 25; //channel prescalers
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x60>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2219      	movs	r2, #25
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 75;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0x60>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	224b      	movs	r2, #75	; 0x4b
 8000256:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 50;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x60>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2232      	movs	r2, #50	; 0x32
 800025e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		bumper = getBumperStatus();
 8000260:	f7ff ffb2 	bl	80001c8 <getBumperStatus>
 8000264:	4603      	mov	r3, r0
 8000266:	71fb      	strb	r3, [r7, #7]
		sensorReadValue(&hadc1, &hadc2);
 8000268:	4903      	ldr	r1, [pc, #12]	; (8000278 <main+0x64>)
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <main+0x68>)
 800026c:	f000 fbc2 	bl	80009f4 <sensorReadValue>
		bumper = getBumperStatus();
 8000270:	e7f6      	b.n	8000260 <main+0x4c>
 8000272:	bf00      	nop
 8000274:	200001bc 	.word	0x200001bc
 8000278:	20000070 	.word	0x20000070
 800027c:	2000010c 	.word	0x2000010c

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f005 f888 	bl	80053a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002b6:	230a      	movs	r3, #10
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002ce:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fc0d 	bl	8002af8 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e4:	f000 fb32 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2101      	movs	r1, #1
 8000304:	4618      	mov	r0, r3
 8000306:	f003 faff 	bl	8003908 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000310:	f000 fb1c 	bl	800094c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SystemClock_Config+0xc0>)
 8000316:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800031c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	463b      	mov	r3, r7
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fcd3 	bl	8003cd4 <HAL_RCCEx_PeriphCLKConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000334:	f000 fb0a 	bl	800094c <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3758      	adds	r7, #88	; 0x58
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	00011020 	.word	0x00011020

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	; 0x28
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034a:	f107 031c 	add.w	r3, r7, #28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
 8000364:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000366:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000368:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000370:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_ADC1_Init+0xdc>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xdc>)
 800038a:	2200      	movs	r2, #0
 800038c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000392:	2200      	movs	r2, #0
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000398:	2201      	movs	r2, #1
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039c:	4b20      	ldr	r3, [pc, #128]	; (8000420 <MX_ADC1_Init+0xdc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c2:	4817      	ldr	r0, [pc, #92]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003c4:	f000 fdfc 	bl	8000fc0 <HAL_ADC_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80003ce:	f000 fabd 	bl	800094c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d6:	f107 031c 	add.w	r3, r7, #28
 80003da:	4619      	mov	r1, r3
 80003dc:	4810      	ldr	r0, [pc, #64]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003de:	f001 fe15 	bl	800200c <HAL_ADCEx_MultiModeConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80003e8:	f000 fab0 	bl	800094c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003f8:	2305      	movs	r3, #5
 80003fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0xdc>)
 800040a:	f001 fb3d 	bl	8001a88 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000414:	f000 fa9a 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3728      	adds	r7, #40	; 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000010c 	.word	0x2000010c

08000424 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	463b      	mov	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800043c:	4a27      	ldr	r2, [pc, #156]	; (80004dc <MX_ADC2_Init+0xb8>)
 800043e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000442:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000446:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000456:	2200      	movs	r2, #0
 8000458:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000464:	2200      	movs	r2, #0
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800046a:	2201      	movs	r2, #1
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000476:	2201      	movs	r2, #1
 8000478:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800047c:	2200      	movs	r2, #0
 800047e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000484:	2204      	movs	r2, #4
 8000486:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800048a:	2200      	movs	r2, #0
 800048c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000494:	4810      	ldr	r0, [pc, #64]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000496:	f000 fd93 	bl	8000fc0 <HAL_ADC_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80004a0:	f000 fa54 	bl	800094c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80004b0:	2305      	movs	r3, #5
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_ADC2_Init+0xb4>)
 80004c2:	f001 fae1 	bl	8001a88 <HAL_ADC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80004cc:	f000 fa3e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000070 	.word	0x20000070
 80004dc:	50000100 	.word	0x50000100

080004e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_I2C1_Init+0x74>)
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_I2C1_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_I2C1_Init+0x74>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <MX_I2C1_Init+0x7c>)
 80004ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 46;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_I2C1_Init+0x74>)
 80004f2:	222e      	movs	r2, #46	; 0x2e
 80004f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_I2C1_Init+0x74>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_I2C1_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_I2C1_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_I2C1_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_I2C1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <MX_I2C1_Init+0x74>)
 800051c:	f002 f9c6 	bl	80028ac <HAL_I2C_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000526:	f000 fa11 	bl	800094c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800052a:	2100      	movs	r1, #0
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <MX_I2C1_Init+0x74>)
 800052e:	f002 fa4c 	bl	80029ca <HAL_I2CEx_ConfigAnalogFilter>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000538:	f000 fa08 	bl	800094c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800053c:	2100      	movs	r1, #0
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_I2C1_Init+0x74>)
 8000540:	f002 fa8e 	bl	8002a60 <HAL_I2CEx_ConfigDigitalFilter>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f9ff 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000c0 	.word	0x200000c0
 8000558:	40005400 	.word	0x40005400
 800055c:	2000090e 	.word	0x2000090e

08000560 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_RTC_Init+0x44>)
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <MX_RTC_Init+0x48>)
 8000568:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_RTC_Init+0x44>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_RTC_Init+0x44>)
 8000572:	227f      	movs	r2, #127	; 0x7f
 8000574:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_RTC_Init+0x44>)
 8000578:	22ff      	movs	r2, #255	; 0xff
 800057a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_RTC_Init+0x44>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_RTC_Init+0x44>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_RTC_Init+0x44>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_RTC_Init+0x44>)
 8000590:	f003 fcd6 	bl	8003f40 <HAL_RTC_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800059a:	f000 f9d7 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000015c 	.word	0x2000015c
 80005a8:	40002800 	.word	0x40002800

080005ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09e      	sub	sp, #120	; 0x78
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fed4 	bl	80053a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005fc:	4b49      	ldr	r3, [pc, #292]	; (8000724 <MX_TIM1_Init+0x178>)
 80005fe:	4a4a      	ldr	r2, [pc, #296]	; (8000728 <MX_TIM1_Init+0x17c>)
 8000600:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000602:	4b48      	ldr	r3, [pc, #288]	; (8000724 <MX_TIM1_Init+0x178>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <MX_TIM1_Init+0x178>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800060e:	4b45      	ldr	r3, [pc, #276]	; (8000724 <MX_TIM1_Init+0x178>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <MX_TIM1_Init+0x178>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <MX_TIM1_Init+0x178>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000620:	4b40      	ldr	r3, [pc, #256]	; (8000724 <MX_TIM1_Init+0x178>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000626:	483f      	ldr	r0, [pc, #252]	; (8000724 <MX_TIM1_Init+0x178>)
 8000628:	f003 fd6f 	bl	800410a <HAL_TIM_Base_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000632:	f000 f98b 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800063c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000640:	4619      	mov	r1, r3
 8000642:	4838      	ldr	r0, [pc, #224]	; (8000724 <MX_TIM1_Init+0x178>)
 8000644:	f004 f822 	bl	800468c <HAL_TIM_ConfigClockSource>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800064e:	f000 f97d 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000652:	4834      	ldr	r0, [pc, #208]	; (8000724 <MX_TIM1_Init+0x178>)
 8000654:	f003 fdae 	bl	80041b4 <HAL_TIM_PWM_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800065e:	f000 f975 	bl	800094c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000666:	2300      	movs	r3, #0
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800066a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066e:	4619      	mov	r1, r3
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <MX_TIM1_Init+0x178>)
 8000672:	f004 f8c4 	bl	80047fe <HAL_TIM_SlaveConfigSynchro>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800067c:	f000 f966 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000690:	4619      	mov	r1, r3
 8000692:	4824      	ldr	r0, [pc, #144]	; (8000724 <MX_TIM1_Init+0x178>)
 8000694:	f004 fd5e 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800069e:	f000 f955 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <MX_TIM1_Init+0x178>)
 80006c8:	f003 fec8 	bl	800445c <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80006d2:	f000 f93b 	bl	800094c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM1_Init+0x178>)
 800070c:	f004 fd90 	bl	8005230 <HAL_TIMEx_ConfigBreakDeadTime>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000716:	f000 f919 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3778      	adds	r7, #120	; 0x78
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000017c 	.word	0x2000017c
 8000728:	40012c00 	.word	0x40012c00

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000768:	2230      	movs	r2, #48	; 0x30
 800076a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_TIM2_Init+0x10c>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_TIM2_Init+0x10c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000786:	f003 fcc0 	bl	800410a <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000790:	f000 f8dc 	bl	800094c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4619      	mov	r1, r3
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007a2:	f003 ff73 	bl	800468c <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007ac:	f000 f8ce 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b0:	4821      	ldr	r0, [pc, #132]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007b2:	f003 fcff 	bl	80041b4 <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007bc:	f000 f8c6 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007d0:	f004 fcc0 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007da:	f000 f8b7 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2360      	movs	r3, #96	; 0x60
 80007e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007f6:	f003 fe31 	bl	800445c <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000800:	f000 f8a4 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2204      	movs	r2, #4
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_TIM2_Init+0x10c>)
 800080c:	f003 fe26 	bl	800445c <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000816:	f000 f899 	bl	800094c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	2208      	movs	r2, #8
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000822:	f003 fe1b 	bl	800445c <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800082c:	f000 f88e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001bc 	.word	0x200001bc

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x104>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <MX_GPIO_Init+0x104>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0x104>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x104>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <MX_GPIO_Init+0x104>)
 8000870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x104>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 8000882:	2200      	movs	r2, #0
 8000884:	f648 410e 	movw	r1, #35854	; 0x8c0e
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 ffde 	bl	800284c <HAL_GPIO_WritePin>
                          |MOTOR_IN_3_1_Pin|MOTOR_IN_1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN_1_1_Pin|MOTOR_IN_2_2_Pin|MOTOR_IN_2_1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2138      	movs	r1, #56	; 0x38
 8000894:	482b      	ldr	r0, [pc, #172]	; (8000944 <MX_GPIO_Init+0x108>)
 8000896:	f001 ffd9 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SELECT_2_Pin MUX_SELECT_1_Pin MUX_SELECT_3_Pin MOTOR_IN_3_2_Pin 
                           MOTOR_IN_3_1_Pin MOTOR_IN_1_2_Pin */
  GPIO_InitStruct.Pin = MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 800089a:	f648 430e 	movw	r3, #35854	; 0x8c0e
 800089e:	60fb      	str	r3, [r7, #12]
                          |MOTOR_IN_3_1_Pin|MOTOR_IN_1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f001 fe3f 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_B3_Pin ENCODER_A2_Pin ENCODER_B2_Pin ENCODER_A3_Pin 
                           STATUS_Pin */
  GPIO_InitStruct.Pin = ENCODER_B3_Pin|ENCODER_A2_Pin|ENCODER_B2_Pin|ENCODER_A3_Pin 
 80008ba:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80008be:	60fb      	str	r3, [r7, #12]
                          |STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f001 fe31 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A1_Pin ENCODER_B1_Pin */
  GPIO_InitStruct.Pin = ENCODER_A1_Pin|ENCODER_B1_Pin;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	; (8000944 <MX_GPIO_Init+0x108>)
 80008ea:	f001 fe25 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUMPER_Pin */
  GPIO_InitStruct.Pin = BUMPER_Pin;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_GPIO_Init+0x10c>)
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUMPER_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 fe17 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN_1_1_Pin MOTOR_IN_2_2_Pin MOTOR_IN_2_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_1_1_Pin|MOTOR_IN_2_2_Pin|MOTOR_IN_2_1_Pin;
 800090a:	2338      	movs	r3, #56	; 0x38
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_GPIO_Init+0x108>)
 8000922:	f001 fe09 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	2028      	movs	r0, #40	; 0x28
 800092c:	f001 fdcd 	bl	80024ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000930:	2028      	movs	r0, #40	; 0x28
 8000932:	f001 fde6 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	10210000 	.word	0x10210000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_TIM_PeriodElapsedCallback>:

bool motorSpeedUp(uint8_t factor, uint8_t motorID){
	return true;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if (htim2->Instance == TIM2) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800096c:	d136      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x80>
		pwmCounter++;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000978:	701a      	strb	r2, [r3, #0]

		if (pwmCounter > PWM_MAX) {
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b64      	cmp	r3, #100	; 0x64
 8000980:	d902      	bls.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x2c>
			pwmCounter = 1;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
		}

		for (uint8_t pwmOutput = 0; pwmOutput < AMOUNT_OF_MOTOR_CHANNELS; pwmOutput++){
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]
 800098c:	e023      	b.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			if (pwmCounter > pwm[pwmOutput]) {
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000998:	56d3      	ldrsb	r3, [r2, r3]
 800099a:	4299      	cmp	r1, r3
 800099c:	dd0c      	ble.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x5c>
				HAL_GPIO_WritePin(pwmPinOutBank[pwmOutput], pwmPinOut[pwmOutput], 0);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	f001 ff4b 	bl	800284c <HAL_GPIO_WritePin>
 80009b6:	e00b      	b.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0x74>
			} else {
				HAL_GPIO_WritePin(pwmPinOutBank[pwmOutput], pwmPinOut[pwmOutput], 1);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f001 ff3e 	bl	800284c <HAL_GPIO_WritePin>
		for (uint8_t pwmOutput = 0; pwmOutput < AMOUNT_OF_MOTOR_CHANNELS; pwmOutput++){
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	3301      	adds	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	2b05      	cmp	r3, #5
 80009da:	d9d8      	bls.n	800098e <HAL_TIM_PeriodElapsedCallback+0x32>
			}
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000054 	.word	0x20000054
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000020 	.word	0x20000020

080009f4 <sensorReadValue>:
#include "main.h"
#include "sensors.h"

uint16_t sensorValues[AMOUNT_OF_SENSORS] = {0};

void sensorReadValue(ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc2){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]

	sensorValues[AMOUNT_OF_SENSORS - 1] = sensorGetADCValue(hadc1);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f856 	bl	8000ab0 <sensorGetADCValue>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <sensorReadValue+0xb8>)
 8000a0a:	821a      	strh	r2, [r3, #16]

	int val1 = 0, val2 = 0, val3 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	2300      	movs	r3, #0
 8000a16:	613b      	str	r3, [r7, #16]

	for(uint8_t muxSelect = 0; muxSelect < AMOUNT_OF_SENSORS - 1; muxSelect++){
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
 8000a1c:	e03f      	b.n	8000a9e <sensorReadValue+0xaa>
		uint8_t temp = muxSelect;
 8000a1e:	7ffb      	ldrb	r3, [r7, #31]
 8000a20:	73fb      	strb	r3, [r7, #15]
		val1 = temp&=1;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	61bb      	str	r3, [r7, #24]
		temp = muxSelect;
 8000a2e:	7ffb      	ldrb	r3, [r7, #31]
 8000a30:	73fb      	strb	r3, [r7, #15]
		val2 = (temp&=2)>>1;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	73fb      	strb	r3, [r7, #15]
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	617b      	str	r3, [r7, #20]
		temp = muxSelect;
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	73fb      	strb	r3, [r7, #15]
		val3 = (temp&=4)>>2;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_1_Pin, val1);
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f001 fef3 	bl	800284c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_2_Pin, val2);
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 feeb 	bl	800284c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_3_Pin, val3);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f001 fee3 	bl	800284c <HAL_GPIO_WritePin>
		sensorValues[muxSelect] = sensorGetADCValue(hadc2);
 8000a86:	6838      	ldr	r0, [r7, #0]
 8000a88:	f000 f812 	bl	8000ab0 <sensorGetADCValue>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	7ffb      	ldrb	r3, [r7, #31]
 8000a90:	b291      	uxth	r1, r2
 8000a92:	4a06      	ldr	r2, [pc, #24]	; (8000aac <sensorReadValue+0xb8>)
 8000a94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t muxSelect = 0; muxSelect < AMOUNT_OF_SENSORS - 1; muxSelect++){
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	77fb      	strb	r3, [r7, #31]
 8000a9e:	7ffb      	ldrb	r3, [r7, #31]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d9bc      	bls.n	8000a1e <sensorReadValue+0x2a>
		//HAL_Delay(500);
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000058 	.word	0x20000058

08000ab0 <sensorGetADCValue>:

uint32_t sensorGetADCValue(ADC_HandleTypeDef* hadc){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint32_t adcValue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(hadc);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 fc11 	bl	80012e4 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(hadc, 1000) == HAL_OK){
 8000ac2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f000 fcc2 	bl	8001450 <HAL_ADC_PollForConversion>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d103      	bne.n	8000ada <sensorGetADCValue+0x2a>
		adcValue = HAL_ADC_GetValue(hadc);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fd82 	bl	80015dc <HAL_ADC_GetValue>
 8000ad8:	60f8      	str	r0, [r7, #12]
	}
	return adcValue;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_MspInit+0x44>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_MspInit+0x44>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_MspInit+0x44>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x44>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x44>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x44>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b4c:	d136      	bne.n	8000bbc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	4a39      	ldr	r2, [pc, #228]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10b      	bne.n	8000b78 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	4a36      	ldr	r2, [pc, #216]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	6153      	str	r3, [r2, #20]
 8000b6c:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b78:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	4a30      	ldr	r2, [pc, #192]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b82:	6153      	str	r3, [r2, #20]
 8000b84:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = MUX_OUT_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MUX_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f001 fcc7 	bl	8002538 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2012      	movs	r0, #18
 8000bb0:	f001 fc8b 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bb4:	2012      	movs	r0, #18
 8000bb6:	f001 fca4 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bba:	e03a      	b.n	8000c32 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <HAL_ADC_MspInit+0x118>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d135      	bne.n	8000c32 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000bce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_ADC_MspInit+0x110>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10b      	bne.n	8000bf0 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be2:	6153      	str	r3, [r2, #20]
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	6153      	str	r3, [r2, #20]
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_ADC_MspInit+0x114>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_Pin;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f001 fc8b 	bl	8002538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2012      	movs	r0, #18
 8000c28:	f001 fc4f 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f001 fc68 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000006c 	.word	0x2000006c
 8000c40:	40021000 	.word	0x40021000
 8000c44:	50000100 	.word	0x50000100

08000c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x7c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d127      	bne.n	8000cba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000c82:	23c0      	movs	r3, #192	; 0xc0
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c86:	2312      	movs	r3, #18
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c92:	2304      	movs	r3, #4
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_I2C_MspInit+0x84>)
 8000c9e:	f001 fc4b 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_RTC_MspInit+0x44>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d111      	bne.n	8000d06 <HAL_RTC_MspInit+0x36>
 8000ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_RTC_MspInit+0x48>)
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	461a      	mov	r2, r3
 8000d02:	2301      	movs	r3, #1
 8000d04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40002800 	.word	0x40002800
 8000d18:	10908100 	.word	0x10908100

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <HAL_TIM_Base_MspInit+0x78>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d114      	bne.n	8000d58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201b      	movs	r0, #27
 8000d4c:	f001 fbbd 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d50:	201b      	movs	r0, #27
 8000d52:	f001 fbd6 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d56:	e018      	b.n	8000d8a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d60:	d113      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_TIM_Base_MspInit+0x7c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	201c      	movs	r0, #28
 8000d80:	f001 fba3 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d84:	201c      	movs	r0, #28
 8000d86:	f001 fbbc 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8b2 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <ADC1_2_IRQHandler+0x14>)
 8000dfe:	f000 fbfb 	bl	80015f8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <ADC1_2_IRQHandler+0x18>)
 8000e04:	f000 fbf8 	bl	80015f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000010c 	.word	0x2000010c
 8000e10:	20000070 	.word	0x20000070

08000e14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM1_CC_IRQHandler+0x10>)
 8000e1a:	f003 fa00 	bl	800421e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000017c 	.word	0x2000017c

08000e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM2_IRQHandler+0x10>)
 8000e2e:	f003 f9f6 	bl	800421e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001bc 	.word	0x200001bc

08000e3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000e40:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e44:	f001 fd1a 	bl	800287c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <SystemInit+0x28>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <SystemInit+0x28>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SystemInit+0x28>)
 8000e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e66:	609a      	str	r2, [r3, #8]
#endif
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e7e:	e003      	b.n	8000e88 <LoopCopyDataInit>

08000e80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e86:	3104      	adds	r1, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e90:	d3f6      	bcc.n	8000e80 <CopyDataInit>
	ldr	r2, =_sbss
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e94:	e002      	b.n	8000e9c <LoopFillZerobss>

08000e96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e98:	f842 3b04 	str.w	r3, [r2], #4

08000e9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <LoopForever+0x16>)
	cmp	r2, r3
 8000e9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ea0:	d3f9      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ea2:	f7ff ffd3 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea6:	f004 fa59 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eaa:	f7ff f9b3 	bl	8000214 <main>

08000eae <LoopForever>:

LoopForever:
    b LoopForever
 8000eae:	e7fe      	b.n	8000eae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000eb4:	08005404 	.word	0x08005404
	ldr	r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ebc:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 8000ec0:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 8000ec4:	20000200 	.word	0x20000200

08000ec8 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <CAN_RX0_IRQHandler>
	...

08000ecc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x28>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x28>)
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f001 fae9 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fdfc 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fb01 	bl	800251e <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f001 fac9 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000002c 	.word	0x2000002c
 8000f50:	20000034 	.word	0x20000034
 8000f54:	20000030 	.word	0x20000030

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000034 	.word	0x20000034
 8000f7c:	200001fc 	.word	0x200001fc

08000f80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001fc 	.word	0x200001fc

08000f98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09a      	sub	sp, #104	; 0x68
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e172      	b.n	80012c6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d176      	bne.n	80010e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d152      	bne.n	80010a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fd89 	bl	8000b2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d13b      	bne.n	80010a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f001 f913 	bl	8002254 <ADC_Disable>
 800102e:	4603      	mov	r3, r0
 8001030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	2b00      	cmp	r3, #0
 800103e:	d12f      	bne.n	80010a0 <HAL_ADC_Init+0xe0>
 8001040:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001044:	2b00      	cmp	r3, #0
 8001046:	d12b      	bne.n	80010a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	f043 0202 	orr.w	r2, r3, #2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800106a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800107a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107c:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <HAL_ADC_Init+0x310>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a94      	ldr	r2, [pc, #592]	; (80012d4 <HAL_ADC_Init+0x314>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9a      	lsrs	r2, r3, #18
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001092:	e002      	b.n	800109a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	3b01      	subs	r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f9      	bne.n	8001094 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80010b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010bc:	d110      	bne.n	80010e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f023 0312 	bic.w	r3, r3, #18
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 0310 	and.w	r3, r3, #16
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f040 80df 	bne.w	80012ac <HAL_ADC_Init+0x2ec>
 80010ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f040 80da 	bne.w	80012ac <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 80d2 	bne.w	80012ac <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001110:	f043 0202 	orr.w	r2, r3, #2
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <HAL_ADC_Init+0x318>)
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001124:	d102      	bne.n	800112c <HAL_ADC_Init+0x16c>
 8001126:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <HAL_ADC_Init+0x31c>)
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e002      	b.n	8001132 <HAL_ADC_Init+0x172>
 800112c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001130:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_ADC_Init+0x192>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Init+0x192>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_ADC_Init+0x194>
 8001152:	2300      	movs	r3, #0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d11c      	bne.n	8001192 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001158:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800115a:	2b00      	cmp	r3, #0
 800115c:	d010      	beq.n	8001180 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_ADC_Init+0x1ba>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_Init+0x1ba>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_ADC_Init+0x1bc>
 800117a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800117c:	2b00      	cmp	r3, #0
 800117e:	d108      	bne.n	8001192 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	431a      	orrs	r2, r3
 800118e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001190:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7e5b      	ldrb	r3, [r3, #25]
 8001196:	035b      	lsls	r3, r3, #13
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800119c:	2a01      	cmp	r2, #1
 800119e:	d002      	beq.n	80011a6 <HAL_ADC_Init+0x1e6>
 80011a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a4:	e000      	b.n	80011a8 <HAL_ADC_Init+0x1e8>
 80011a6:	2200      	movs	r2, #0
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011b8:	4313      	orrs	r3, r2
 80011ba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d11b      	bne.n	80011fe <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7e5b      	ldrb	r3, [r3, #25]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	3b01      	subs	r3, #1
 80011d4:	045a      	lsls	r2, r3, #17
 80011d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d8:	4313      	orrs	r3, r2
 80011da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011de:	663b      	str	r3, [r7, #96]	; 0x60
 80011e0:	e00d      	b.n	80011fe <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80011ea:	f043 0220 	orr.w	r2, r3, #32
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	2b01      	cmp	r3, #1
 8001204:	d007      	beq.n	8001216 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	4313      	orrs	r3, r2
 8001210:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001212:	4313      	orrs	r3, r2
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b00      	cmp	r3, #0
 8001222:	d114      	bne.n	800124e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001232:	f023 0302 	bic.w	r3, r3, #2
 8001236:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e1b      	ldrb	r3, [r3, #24]
 800123c:	039a      	lsls	r2, r3, #14
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4313      	orrs	r3, r2
 8001248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800124a:	4313      	orrs	r3, r2
 800124c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_ADC_Init+0x320>)
 8001256:	4013      	ands	r3, r2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800125e:	430b      	orrs	r3, r1
 8001260:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10c      	bne.n	8001284 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f023 010f 	bic.w	r1, r3, #15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	631a      	str	r2, [r3, #48]	; 0x30
 8001282:	e007      	b.n	8001294 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 020f 	bic.w	r2, r2, #15
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f023 0303 	bic.w	r3, r3, #3
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	; 0x40
 80012aa:	e00a      	b.n	80012c2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f023 0312 	bic.w	r3, r3, #18
 80012b4:	f043 0210 	orr.w	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80012bc:	2301      	movs	r3, #1
 80012be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80012c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3768      	adds	r7, #104	; 0x68
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000002c 	.word	0x2000002c
 80012d4:	431bde83 	.word	0x431bde83
 80012d8:	50000300 	.word	0x50000300
 80012dc:	50000100 	.word	0x50000100
 80012e0:	fff0c007 	.word	0xfff0c007

080012e4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 809c 	bne.w	8001438 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <HAL_ADC_Start+0x2a>
 800130a:	2302      	movs	r3, #2
 800130c:	e097      	b.n	800143e <HAL_ADC_Start+0x15a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 ff3e 	bl	8002198 <ADC_Enable>
 800131c:	4603      	mov	r3, r0
 800131e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 8083 	bne.w	800142e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_ADC_Start+0x164>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <HAL_ADC_Start+0x6e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001350:	d115      	bne.n	800137e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d027      	beq.n	80013bc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001374:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800137c:	e01e      	b.n	80013bc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001392:	d004      	beq.n	800139e <HAL_ADC_Start+0xba>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a2c      	ldr	r2, [pc, #176]	; (800144c <HAL_ADC_Start+0x168>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10e      	bne.n	80013bc <HAL_ADC_Start+0xd8>
 800139e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d007      	beq.n	80013bc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c8:	d106      	bne.n	80013d8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f023 0206 	bic.w	r2, r3, #6
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
 80013d6:	e002      	b.n	80013de <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	221c      	movs	r2, #28
 80013ec:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_ADC_Start+0x164>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 031f 	and.w	r3, r3, #31
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d010      	beq.n	800141c <HAL_ADC_Start+0x138>
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_ADC_Start+0x164>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2b05      	cmp	r3, #5
 8001404:	d00a      	beq.n	800141c <HAL_ADC_Start+0x138>
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_Start+0x164>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	2b09      	cmp	r3, #9
 8001410:	d004      	beq.n	800141c <HAL_ADC_Start+0x138>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800141a:	d10f      	bne.n	800143c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0204 	orr.w	r2, r2, #4
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	e006      	b.n	800143c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001436:	e001      	b.n	800143c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001438:	2302      	movs	r3, #2
 800143a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	50000300 	.word	0x50000300
 800144c:	50000100 	.word	0x50000100

08001450 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b08      	cmp	r3, #8
 8001464:	d102      	bne.n	800146c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001466:	2308      	movs	r3, #8
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e02e      	b.n	80014ca <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <HAL_ADC_PollForConversion+0x188>)
 800146e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2b00      	cmp	r3, #0
 800147a:	d112      	bne.n	80014a2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b01      	cmp	r3, #1
 8001488:	d11d      	bne.n	80014c6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e096      	b.n	80015d0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e084      	b.n	80015d0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80014c6:	230c      	movs	r3, #12
 80014c8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014ca:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_ADC_PollForConversion+0x188>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d004      	beq.n	80014e0 <HAL_ADC_PollForConversion+0x90>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014de:	d104      	bne.n	80014ea <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	e003      	b.n	80014f2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80014f2:	f7ff fd45 	bl	8000f80 <HAL_GetTick>
 80014f6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014f8:	e01a      	b.n	8001530 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d016      	beq.n	8001530 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_ADC_PollForConversion+0xc8>
 8001508:	f7ff fd3a 	bl	8000f80 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d20b      	bcs.n	8001530 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e04f      	b.n	80015d0 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0dd      	beq.n	80014fa <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001554:	2b00      	cmp	r3, #0
 8001556:	d131      	bne.n	80015bc <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800155e:	2b00      	cmp	r3, #0
 8001560:	d12c      	bne.n	80015bc <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b08      	cmp	r3, #8
 800156e:	d125      	bne.n	80015bc <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b00      	cmp	r3, #0
 800157c:	d112      	bne.n	80015a4 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d112      	bne.n	80015bc <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40
 80015a2:	e00b      	b.n	80015bc <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f043 0220 	orr.w	r2, r3, #32
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	50000300 	.word	0x50000300

080015dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b04      	cmp	r3, #4
 8001618:	d106      	bne.n	8001628 <HAL_ADC_IRQHandler+0x30>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d00d      	beq.n	8001644 <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001632:	2b08      	cmp	r3, #8
 8001634:	d17a      	bne.n	800172c <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b08      	cmp	r3, #8
 8001642:	d173      	bne.n	800172c <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800165c:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	2b00      	cmp	r3, #0
 8001666:	d010      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001668:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2b05      	cmp	r3, #5
 8001672:	d00a      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	2b09      	cmp	r3, #9
 800167e:	d004      	beq.n	800168a <HAL_ADC_IRQHandler+0x92>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001688:	d104      	bne.n	8001694 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e003      	b.n	800169c <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001694:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d139      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d134      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d12d      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d11a      	bne.n	8001706 <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 020c 	bic.w	r2, r2, #12
 80016de:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d112      	bne.n	800171e <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
 8001704:	e00b      	b.n	800171e <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe fd6d 	bl	80001fe <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	220c      	movs	r2, #12
 800172a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b20      	cmp	r3, #32
 8001738:	d106      	bne.n	8001748 <HAL_ADC_IRQHandler+0x150>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b20      	cmp	r3, #32
 8001746:	d00f      	beq.n	8001768 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	f040 80a9 	bne.w	80018aa <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	f040 80a1 	bne.w	80018aa <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2b00      	cmp	r3, #0
 800177e:	d010      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	2b05      	cmp	r3, #5
 800178a:	d00a      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b09      	cmp	r3, #9
 8001796:	d004      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x1aa>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a0:	d104      	bne.n	80017ac <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e003      	b.n	80017b4 <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d167      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d160      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d15b      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ee:	2b40      	cmp	r3, #64	; 0x40
 80017f0:	d154      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b06      	cmp	r3, #6
 8001808:	d00a      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_ADC_IRQHandler+0x288>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b07      	cmp	r3, #7
 8001814:	d004      	beq.n	8001820 <HAL_ADC_IRQHandler+0x228>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d104      	bne.n	800182a <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e003      	b.n	8001832 <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800182a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d12f      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11c      	bne.n	8001884 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001858:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d114      	bne.n	800189c <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
 800187e:	e00d      	b.n	800189c <HAL_ADC_IRQHandler+0x2a4>
 8001880:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8cb 	bl	8001a38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2260      	movs	r2, #96	; 0x60
 80018a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b4:	2b80      	cmp	r3, #128	; 0x80
 80018b6:	d113      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x2e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b80      	cmp	r3, #128	; 0x80
 80018c4:	d10c      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fb60 	bl	8000f98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ee:	d115      	bne.n	800191c <HAL_ADC_IRQHandler+0x324>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fe:	d10d      	bne.n	800191c <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f8a7 	bl	8001a60 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192a:	d115      	bne.n	8001958 <HAL_ADC_IRQHandler+0x360>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193a:	d10d      	bne.n	8001958 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f893 	bl	8001a74 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b10      	cmp	r3, #16
 8001964:	d13d      	bne.n	80019e2 <HAL_ADC_IRQHandler+0x3ea>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	2b10      	cmp	r3, #16
 8001972:	d136      	bne.n	80019e2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	2b01      	cmp	r3, #1
 800197a:	d102      	bne.n	8001982 <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 800197c:	2301      	movs	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e019      	b.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_ADC_IRQHandler+0x43c>)
 8001984:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d10a      	bne.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019a0:	2301      	movs	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e007      	b.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10e      	bne.n	80019da <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0202 	orr.w	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fae9 	bl	8000fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2210      	movs	r2, #16
 80019e0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f0:	d11b      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x432>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d113      	bne.n	8001a2a <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f043 0208 	orr.w	r2, r3, #8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f811 	bl	8001a4c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	50000300 	.word	0x50000300

08001a38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b09b      	sub	sp, #108	; 0x6c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x22>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e2a5      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x56e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8289 	bne.w	8001fd4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d81c      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	461a      	mov	r2, r3
 8001ade:	231f      	movs	r3, #31
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4019      	ands	r1, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
 8001b02:	e063      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d81e      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	221f      	movs	r2, #31
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4019      	ands	r1, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
 8001b48:	e040      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b0e      	cmp	r3, #14
 8001b50:	d81e      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	3b3c      	subs	r3, #60	; 0x3c
 8001b66:	221f      	movs	r2, #31
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4019      	ands	r1, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3b3c      	subs	r3, #60	; 0x3c
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8e:	e01d      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	3b5a      	subs	r3, #90	; 0x5a
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4019      	ands	r1, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b5a      	subs	r3, #90	; 0x5a
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80e5 	bne.w	8001da6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b09      	cmp	r3, #9
 8001be2:	d91c      	bls.n	8001c1e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6999      	ldr	r1, [r3, #24]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b1e      	subs	r3, #30
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6898      	ldr	r0, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b1e      	subs	r3, #30
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	e019      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6959      	ldr	r1, [r3, #20]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d84f      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0x28c>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_ADC_ConfigChannel+0x1f4>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001caf 	.word	0x08001caf
 8001c84:	08001cd1 	.word	0x08001cd1
 8001c88:	08001cf3 	.word	0x08001cf3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c92:	4b9e      	ldr	r3, [pc, #632]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	0691      	lsls	r1, r2, #26
 8001c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001caa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cac:	e07e      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cb4:	4b95      	ldr	r3, [pc, #596]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	0691      	lsls	r1, r2, #26
 8001cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ccc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cce:	e06d      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cd6:	4b8d      	ldr	r3, [pc, #564]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	0691      	lsls	r1, r2, #26
 8001ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cf0:	e05c      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf8:	4b84      	ldr	r3, [pc, #528]	; (8001f0c <HAL_ADC_ConfigChannel+0x484>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	0691      	lsls	r1, r2, #26
 8001d02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d04:	430a      	orrs	r2, r1
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d10:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d12:	e04b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	069b      	lsls	r3, r3, #26
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d5a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	069b      	lsls	r3, r3, #26
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d107      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d7e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	069b      	lsls	r3, r3, #26
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d10a      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001da4:	e001      	b.n	8001daa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001da6:	bf00      	nop
 8001da8:	e000      	b.n	8001dac <HAL_ADC_ConfigChannel+0x324>
      break;
 8001daa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x344>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x344>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_ADC_ConfigChannel+0x346>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 810b 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d00f      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001dfa:	e049      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d91c      	bls.n	8001e58 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6999      	ldr	r1, [r3, #24]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1b      	subs	r3, #27
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4019      	ands	r1, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6898      	ldr	r0, [r3, #8]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1b      	subs	r3, #27
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	e01b      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6959      	ldr	r1, [r3, #20]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4019      	ands	r1, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	fa00 f203 	lsl.w	r2, r0, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_ADC_ConfigChannel+0x488>)
 8001e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eac:	2b11      	cmp	r3, #17
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ec0:	2b12      	cmp	r3, #18
 8001ec2:	f040 8092 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 808b 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x45c>
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_ADC_ConfigChannel+0x48c>)
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	e002      	b.n	8001eea <HAL_ADC_ConfigChannel+0x462>
 8001ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ee8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10f      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x490>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x490>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e007      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x492>
 8001f0a:	bf00      	nop
 8001f0c:	83fff000 	.word	0x83fff000
 8001f10:	50000300 	.word	0x50000300
 8001f14:	50000100 	.word	0x50000100
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d150      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x4b8>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x4b8>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x4ba>
 8001f40:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d13c      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d11d      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x502>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f56:	d118      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f62:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_ADC_ConfigChannel+0x57c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <HAL_ADC_ConfigChannel+0x580>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9a      	lsrs	r2, r3, #18
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f7a:	e002      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f88:	e02e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d10b      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x522>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa8:	e01e      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fbc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fbe:	e013      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fd2:	e00a      	b.n	8001fea <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	376c      	adds	r7, #108	; 0x6c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000002c 	.word	0x2000002c
 8002008:	431bde83 	.word	0x431bde83

0800200c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800200c:	b480      	push	{r7}
 800200e:	b099      	sub	sp, #100	; 0x64
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002024:	d102      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002026:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	e002      	b.n	8002032 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800202c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002030:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0a2      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002046:	2302      	movs	r3, #2
 8002048:	e09b      	b.n	8002182 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d17f      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d179      	bne.n	8002160 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206c:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800206e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d040      	beq.n	80020fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800208a:	035b      	lsls	r3, r3, #13
 800208c:	430b      	orrs	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002092:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d15c      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80020d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d14b      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020e4:	f023 030f 	bic.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	6811      	ldr	r1, [r2, #0]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	6892      	ldr	r2, [r2, #8]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f8:	e03c      	b.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002104:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002126:	2300      	movs	r3, #0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d123      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002148:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800214e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002156:	f023 030f 	bic.w	r3, r3, #15
 800215a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800215c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800215e:	e009      	b.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002172:	e000      	b.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800217e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002182:	4618      	mov	r0, r3
 8002184:	3764      	adds	r7, #100	; 0x64
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	50000100 	.word	0x50000100
 8002194:	50000300 	.word	0x50000300

08002198 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <ADC_Enable+0x2c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <ADC_Enable+0x2c>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <ADC_Enable+0x2e>
 80021c4:	2300      	movs	r3, #0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d13c      	bne.n	8002244 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <ADC_Enable+0xb8>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00d      	beq.n	80021f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e028      	b.n	8002246 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002204:	f7fe febc 	bl	8000f80 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800220a:	e014      	b.n	8002236 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800220c:	f7fe feb8 	bl	8000f80 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d90d      	bls.n	8002236 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f043 0210 	orr.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e007      	b.n	8002246 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b01      	cmp	r3, #1
 8002242:	d1e3      	bne.n	800220c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	8000003f 	.word	0x8000003f

08002254 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <ADC_Disable+0x2c>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <ADC_Disable+0x2c>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <ADC_Disable+0x2e>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d040      	beq.n	8002308 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030d 	and.w	r3, r3, #13
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10f      	bne.n	80022b4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0202 	orr.w	r2, r2, #2
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2203      	movs	r2, #3
 80022aa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fe68 	bl	8000f80 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b2:	e022      	b.n	80022fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f043 0210 	orr.w	r2, r3, #16
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e01c      	b.n	800230a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022d0:	f7fe fe56 	bl	8000f80 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d90d      	bls.n	80022fa <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d0e3      	beq.n	80022d0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	; (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e14e      	b.n	80027e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8140 	beq.w	80027e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x38>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	6939      	ldr	r1, [r7, #16]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d00b      	beq.n	800260c <HAL_GPIO_Init+0xd4>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002600:	2b11      	cmp	r3, #17
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b12      	cmp	r3, #18
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 809a 	beq.w	80027e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ac:	4b55      	ldr	r3, [pc, #340]	; (8002804 <HAL_GPIO_Init+0x2cc>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x2cc>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x2cc>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ee:	d013      	beq.n	8002718 <HAL_GPIO_Init+0x1e0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a46      	ldr	r2, [pc, #280]	; (800280c <HAL_GPIO_Init+0x2d4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_GPIO_Init+0x1dc>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a45      	ldr	r2, [pc, #276]	; (8002810 <HAL_GPIO_Init+0x2d8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d007      	beq.n	8002710 <HAL_GPIO_Init+0x1d8>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a44      	ldr	r2, [pc, #272]	; (8002814 <HAL_GPIO_Init+0x2dc>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d101      	bne.n	800270c <HAL_GPIO_Init+0x1d4>
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_GPIO_Init+0x1e2>
 800270c:	2305      	movs	r3, #5
 800270e:	e004      	b.n	800271a <HAL_GPIO_Init+0x1e2>
 8002710:	2302      	movs	r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x1e2>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <HAL_GPIO_Init+0x1e2>
 8002718:	2300      	movs	r3, #0
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	f002 0203 	and.w	r2, r2, #3
 8002720:	0092      	lsls	r2, r2, #2
 8002722:	4093      	lsls	r3, r2
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800272a:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_GPIO_Init+0x2d0>)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	3302      	adds	r3, #2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002738:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800275c:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027b0:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027da:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <HAL_GPIO_Init+0x2e0>)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3301      	adds	r3, #1
 80027e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f47f aea9 	bne.w	8002548 <HAL_GPIO_Init+0x10>
  }
}
 80027f6:	bf00      	nop
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40010000 	.word	0x40010000
 800280c:	48000400 	.word	0x48000400
 8002810:	48000800 	.word	0x48000800
 8002814:	48000c00 	.word	0x48000c00
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e001      	b.n	800283e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002868:	e002      	b.n	8002870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002886:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fca4 	bl	80001e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e081      	b.n	80029c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f9b8 	bl	8000c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800290c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	e006      	b.n	8002934 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002932:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d104      	bne.n	8002946 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002944:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002958:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002968:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	ea42 0103 	orr.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	021a      	lsls	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69d9      	ldr	r1, [r3, #28]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d138      	bne.n	8002a52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e032      	b.n	8002a54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2224      	movs	r2, #36	; 0x24
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e000      	b.n	8002a54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
  }
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d139      	bne.n	8002aea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e033      	b.n	8002aec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f000 bef4 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 816a 	beq.w	8002df6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b22:	4bb3      	ldr	r3, [pc, #716]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d00c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b2e:	4bb0      	ldr	r3, [pc, #704]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d159      	bne.n	8002bee <HAL_RCC_OscConfig+0xf6>
 8002b3a:	4bad      	ldr	r3, [pc, #692]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b46:	d152      	bne.n	8002bee <HAL_RCC_OscConfig+0xf6>
 8002b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002b5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_OscConfig+0x82>
 8002b74:	4b9e      	ldr	r3, [pc, #632]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0xae>
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b92:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ba2:	4b93      	ldr	r3, [pc, #588]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002baa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002bae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002bba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 810c 	beq.w	8002df4 <HAL_RCC_OscConfig+0x2fc>
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8106 	bne.w	8002df4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f000 be86 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x110>
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7c      	ldr	r2, [pc, #496]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e030      	b.n	8002c6a <HAL_RCC_OscConfig+0x172>
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x134>
 8002c12:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a76      	ldr	r2, [pc, #472]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b74      	ldr	r3, [pc, #464]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a73      	ldr	r2, [pc, #460]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e01e      	b.n	8002c6a <HAL_RCC_OscConfig+0x172>
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_OscConfig+0x15a>
 8002c38:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e00b      	b.n	8002c6a <HAL_RCC_OscConfig+0x172>
 8002c52:	4b67      	ldr	r3, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a66      	ldr	r2, [pc, #408]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b64      	ldr	r3, [pc, #400]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a63      	ldr	r2, [pc, #396]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c6a:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f023 020f 	bic.w	r2, r3, #15
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	495d      	ldr	r1, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d059      	beq.n	8002d3c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe f97a 	bl	8000f80 <HAL_GetTick>
 8002c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c92:	f7fe f975 	bl	8000f80 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d902      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	f000 be29 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
 8002ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002cbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_OscConfig+0x1e2>
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x20e>
 8002cda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002cf6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002d12:	fa92 f2a2 	rbit	r2, r2
 8002d16:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002d1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002d1e:	fab2 f282 	clz	r2, r2
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	f042 0220 	orr.w	r2, r2, #32
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	f002 021f 	and.w	r2, r2, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f202 	lsl.w	r2, r1, r2
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ab      	beq.n	8002c92 <HAL_RCC_OscConfig+0x19a>
 8002d3a:	e05c      	b.n	8002df6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f920 	bl	8000f80 <HAL_GetTick>
 8002d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d46:	f7fe f91b 	bl	8000f80 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d902      	bls.n	8002d5c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	f000 bdcf 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d70:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e015      	b.n	8002dba <HAL_RCC_OscConfig+0x2c2>
 8002d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002daa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_OscConfig+0x2f8>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dbe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002dc2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002dce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f002 021f 	and.w	r2, r2, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1ab      	bne.n	8002d46 <HAL_RCC_OscConfig+0x24e>
 8002dee:	e002      	b.n	8002df6 <HAL_RCC_OscConfig+0x2fe>
 8002df0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 816f 	beq.w	80030e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e06:	4bd0      	ldr	r3, [pc, #832]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e12:	4bcd      	ldr	r3, [pc, #820]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d16c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x400>
 8002e1e:	4bca      	ldr	r3, [pc, #808]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d166      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x400>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002e3c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0x362>
 8002e54:	4bbc      	ldr	r3, [pc, #752]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	e013      	b.n	8002e82 <HAL_RCC_OscConfig+0x38a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e7e:	4bb2      	ldr	r3, [pc, #712]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2202      	movs	r2, #2
 8002e84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e94:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f002 021f 	and.w	r2, r2, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x3cc>
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	f000 bd1b 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4ba0      	ldr	r3, [pc, #640]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	21f8      	movs	r1, #248	; 0xf8
 8002ed4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002edc:	fa91 f1a1 	rbit	r1, r1
 8002ee0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ee4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ee8:	fab1 f181 	clz	r1, r1
 8002eec:	b2c9      	uxtb	r1, r1
 8002eee:	408b      	lsls	r3, r1
 8002ef0:	4995      	ldr	r1, [pc, #596]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	e0f5      	b.n	80030e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8085 	beq.w	800300e <HAL_RCC_OscConfig+0x516>
 8002f04:	2301      	movs	r3, #1
 8002f06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002f0e:	fa93 f3a3 	rbit	r3, r3
 8002f12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002f16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe f826 	bl	8000f80 <HAL_GetTick>
 8002f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe f821 	bl	8000f80 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d902      	bls.n	8002f50 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	f000 bcd5 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0x488>
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	e013      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4b0>
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f92:	2302      	movs	r3, #2
 8002f94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002fae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002fb2:	fa92 f2a2 	rbit	r2, r2
 8002fb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002fba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f042 0220 	orr.w	r2, r2, #32
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0af      	beq.n	8002f3a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	21f8      	movs	r1, #248	; 0xf8
 8002fea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ff2:	fa91 f1a1 	rbit	r1, r1
 8002ff6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ffa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ffe:	fab1 f181 	clz	r1, r1
 8003002:	b2c9      	uxtb	r1, r1
 8003004:	408b      	lsls	r3, r1
 8003006:	4950      	ldr	r1, [pc, #320]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e06a      	b.n	80030e4 <HAL_RCC_OscConfig+0x5ec>
 800300e:	2301      	movs	r3, #1
 8003010:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800302e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	461a      	mov	r2, r3
 8003036:	2300      	movs	r3, #0
 8003038:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fd ffa1 	bl	8000f80 <HAL_GetTick>
 800303e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003044:	f7fd ff9c 	bl	8000f80 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d902      	bls.n	800305a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	f000 bc50 	b.w	80038fa <HAL_RCC_OscConfig+0xe02>
 800305a:	2302      	movs	r3, #2
 800305c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800306c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <HAL_RCC_OscConfig+0x592>
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	e013      	b.n	80030b2 <HAL_RCC_OscConfig+0x5ba>
 800308a:	2302      	movs	r3, #2
 800308c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80030a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <HAL_RCC_OscConfig+0x650>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2202      	movs	r2, #2
 80030b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80030b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80030c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0220 	orr.w	r2, r2, #32
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1af      	bne.n	8003044 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80da 	beq.w	80032a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f4:	1d3b      	adds	r3, r7, #4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d069      	beq.n	80031d2 <HAL_RCC_OscConfig+0x6da>
 80030fe:	2301      	movs	r3, #1
 8003100:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_OscConfig+0x654>)
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	461a      	mov	r2, r3
 8003124:	2301      	movs	r3, #1
 8003126:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fd ff2a 	bl	8000f80 <HAL_GetTick>
 800312c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003130:	e00e      	b.n	8003150 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003132:	f7fd ff25 	bl	8000f80 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d906      	bls.n	8003150 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e3d9      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	10908120 	.word	0x10908120
 8003150:	2302      	movs	r3, #2
 8003152:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003162:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003166:	2202      	movs	r2, #2
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800317e:	2202      	movs	r2, #2
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003190:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003192:	4ba5      	ldr	r3, [pc, #660]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003196:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800319a:	2102      	movs	r1, #2
 800319c:	6019      	str	r1, [r3, #0]
 800319e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	fa93 f1a3 	rbit	r1, r3
 80031a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031ac:	6019      	str	r1, [r3, #0]
  return result;
 80031ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2101      	movs	r1, #1
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0b0      	beq.n	8003132 <HAL_RCC_OscConfig+0x63a>
 80031d0:	e06a      	b.n	80032a8 <HAL_RCC_OscConfig+0x7b0>
 80031d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031d6:	2201      	movs	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f2a3 	rbit	r2, r3
 80031e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031e8:	601a      	str	r2, [r3, #0]
  return result;
 80031ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80031ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b8c      	ldr	r3, [pc, #560]	; (800342c <HAL_RCC_OscConfig+0x934>)
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fd febc 	bl	8000f80 <HAL_GetTick>
 8003208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e009      	b.n	8003222 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320e:	f7fd feb7 	bl	8000f80 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e36b      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 8003222:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003226:	2202      	movs	r2, #2
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	fa93 f2a3 	rbit	r2, r3
 8003234:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003268:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	4b6f      	ldr	r3, [pc, #444]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800326c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800326e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003272:	2102      	movs	r1, #2
 8003274:	6019      	str	r1, [r3, #0]
 8003276:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	fa93 f1a3 	rbit	r1, r3
 8003280:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003284:	6019      	str	r1, [r3, #0]
  return result;
 8003286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1b2      	bne.n	800320e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8158 	beq.w	8003568 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032be:	4b5a      	ldr	r3, [pc, #360]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	4b57      	ldr	r3, [pc, #348]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b54      	ldr	r3, [pc, #336]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_RCC_OscConfig+0x938>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11a      	bne.n	8003332 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fc:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x938>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <HAL_RCC_OscConfig+0x938>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003308:	f7fd fe3a 	bl	8000f80 <HAL_GetTick>
 800330c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e009      	b.n	8003326 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd fe35 	bl	8000f80 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e2e9      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b42      	ldr	r3, [pc, #264]	; (8003430 <HAL_RCC_OscConfig+0x938>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ef      	beq.n	8003312 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x852>
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a39      	ldr	r2, [pc, #228]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	e02f      	b.n	80033aa <HAL_RCC_OscConfig+0x8b2>
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10c      	bne.n	800336e <HAL_RCC_OscConfig+0x876>
 8003354:	4b34      	ldr	r3, [pc, #208]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4a33      	ldr	r2, [pc, #204]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	6213      	str	r3, [r2, #32]
 8003360:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a30      	ldr	r2, [pc, #192]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003366:	f023 0304 	bic.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	e01d      	b.n	80033aa <HAL_RCC_OscConfig+0x8b2>
 800336e:	1d3b      	adds	r3, r7, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b05      	cmp	r3, #5
 8003376:	d10c      	bne.n	8003392 <HAL_RCC_OscConfig+0x89a>
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6213      	str	r3, [r2, #32]
 8003384:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e00b      	b.n	80033aa <HAL_RCC_OscConfig+0x8b2>
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a24      	ldr	r2, [pc, #144]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4a21      	ldr	r2, [pc, #132]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d06b      	beq.n	800348c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b4:	f7fd fde4 	bl	8000f80 <HAL_GetTick>
 80033b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00b      	b.n	80033d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fd fddf 	bl	8000f80 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e291      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 80033d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003404:	601a      	str	r2, [r3, #0]
  return result;
 8003406:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800340a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d109      	bne.n	8003434 <HAL_RCC_OscConfig+0x93c>
 8003420:	4b01      	ldr	r3, [pc, #4]	; (8003428 <HAL_RCC_OscConfig+0x930>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x958>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	10908120 	.word	0x10908120
 8003430:	40007000 	.word	0x40007000
 8003434:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003438:	2202      	movs	r2, #2
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	4bbb      	ldr	r3, [pc, #748]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003454:	2102      	movs	r1, #2
 8003456:	6011      	str	r1, [r2, #0]
 8003458:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	fa92 f1a2 	rbit	r1, r2
 8003462:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003466:	6011      	str	r1, [r2, #0]
  return result;
 8003468:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d099      	beq.n	80033be <HAL_RCC_OscConfig+0x8c6>
 800348a:	e063      	b.n	8003554 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fd fd78 	bl	8000f80 <HAL_GetTick>
 8003490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003494:	e00b      	b.n	80034ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fd73 	bl	8000f80 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e225      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 80034ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034b2:	2202      	movs	r2, #2
 80034b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	fa93 f2a3 	rbit	r2, r3
 80034c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034ca:	2202      	movs	r2, #2
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034dc:	601a      	str	r2, [r3, #0]
  return result;
 80034de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80034e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_OscConfig+0xa06>
 80034f8:	4b90      	ldr	r3, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	e00d      	b.n	800351a <HAL_RCC_OscConfig+0xa22>
 80034fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003502:	2202      	movs	r2, #2
 8003504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800351e:	2102      	movs	r1, #2
 8003520:	6011      	str	r1, [r2, #0]
 8003522:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	fa92 f1a2 	rbit	r1, r2
 800352c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003530:	6011      	str	r1, [r2, #0]
  return result;
 8003532:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	f002 021f 	and.w	r2, r2, #31
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1a0      	bne.n	8003496 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003554:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b77      	ldr	r3, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4a76      	ldr	r2, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003566:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 81c2 	beq.w	80038f8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	f000 819c 	beq.w	80038ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003582:	1d3b      	adds	r3, r7, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b02      	cmp	r3, #2
 800358a:	f040 8114 	bne.w	80037b6 <HAL_RCC_OscConfig+0xcbe>
 800358e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	fa93 f2a3 	rbit	r2, r3
 80035a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035a6:	601a      	str	r2, [r3, #0]
  return result;
 80035a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80035ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fd fcdc 	bl	8000f80 <HAL_GetTick>
 80035c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e009      	b.n	80035e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fd fcd7 	bl	8000f80 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e18b      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 80035e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003600:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_RCC_OscConfig+0xb24>
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e01b      	b.n	8003654 <HAL_RCC_OscConfig+0xb5c>
 800361c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	fa92 f1a2 	rbit	r1, r2
 8003668:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800366c:	6011      	str	r1, [r2, #0]
  return result;
 800366e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	fab2 f282 	clz	r2, r2
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f002 021f 	and.w	r2, r2, #31
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d19e      	bne.n	80035ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4925      	ldr	r1, [pc, #148]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036c4:	601a      	str	r2, [r3, #0]
  return result;
 80036c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	461a      	mov	r2, r3
 80036de:	2301      	movs	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fd fc4d 	bl	8000f80 <HAL_GetTick>
 80036e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ea:	e009      	b.n	8003700 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd fc48 	bl	8000f80 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e0fc      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 8003700:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003718:	601a      	str	r2, [r3, #0]
  return result;
 800371a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800371e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0xc48>
 8003734:	4b01      	ldr	r3, [pc, #4]	; (800373c <HAL_RCC_OscConfig+0xc44>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	e01e      	b.n	8003778 <HAL_RCC_OscConfig+0xc80>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	fa93 f2a3 	rbit	r2, r3
 8003754:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_OscConfig+0xe0c>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800377c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	fa92 f1a2 	rbit	r1, r2
 800378c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003790:	6011      	str	r1, [r2, #0]
  return result;
 8003792:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	f042 0220 	orr.w	r2, r2, #32
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f002 021f 	and.w	r2, r2, #31
 80037a8:	2101      	movs	r1, #1
 80037aa:	fa01 f202 	lsl.w	r2, r1, r2
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d09b      	beq.n	80036ec <HAL_RCC_OscConfig+0xbf4>
 80037b4:	e0a0      	b.n	80038f8 <HAL_RCC_OscConfig+0xe00>
 80037b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	fa93 f2a3 	rbit	r2, r3
 80037ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ce:	601a      	str	r2, [r3, #0]
  return result;
 80037d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fbc8 	bl	8000f80 <HAL_GetTick>
 80037f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f4:	e009      	b.n	800380a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd fbc3 	bl	8000f80 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e077      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
 800380a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800380e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fa93 f2a3 	rbit	r2, r3
 800381e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003822:	601a      	str	r2, [r3, #0]
  return result;
 8003824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382a:	fab3 f383 	clz	r3, r3
 800382e:	b2db      	uxtb	r3, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_RCC_OscConfig+0xd4c>
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <HAL_RCC_OscConfig+0xe0c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	e01b      	b.n	800387c <HAL_RCC_OscConfig+0xd84>
 8003844:	f107 0320 	add.w	r3, r7, #32
 8003848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f107 0320 	add.w	r3, r7, #32
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f107 0318 	add.w	r3, r7, #24
 8003862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	fa93 f2a3 	rbit	r2, r3
 8003872:	f107 0314 	add.w	r3, r7, #20
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_OscConfig+0xe0c>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f107 0210 	add.w	r2, r7, #16
 8003880:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	f107 0210 	add.w	r2, r7, #16
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	fa92 f1a2 	rbit	r1, r2
 8003890:	f107 020c 	add.w	r2, r7, #12
 8003894:	6011      	str	r1, [r2, #0]
  return result;
 8003896:	f107 020c 	add.w	r2, r7, #12
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d19e      	bne.n	80037f6 <HAL_RCC_OscConfig+0xcfe>
 80038b8:	e01e      	b.n	80038f8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCC_OscConfig+0xe0c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b09e      	sub	sp, #120	; 0x78
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e162      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b90      	ldr	r3, [pc, #576]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	498b      	ldr	r1, [pc, #556]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e14a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b82      	ldr	r3, [pc, #520]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	497f      	ldr	r1, [pc, #508]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80dc 	beq.w	8003b34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d13c      	bne.n	80039fe <HAL_RCC_ClockConfig+0xf6>
 8003984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003988:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398c:	fa93 f3a3 	rbit	r3, r3
 8003990:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003994:	fab3 f383 	clz	r3, r3
 8003998:	b2db      	uxtb	r3, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	b2db      	uxtb	r3, r3
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_ClockConfig+0xa6>
 80039a8:	4b6f      	ldr	r3, [pc, #444]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	e00f      	b.n	80039ce <HAL_RCC_ClockConfig+0xc6>
 80039ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
 80039bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039c0:	663b      	str	r3, [r7, #96]	; 0x60
 80039c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ca:	4b67      	ldr	r3, [pc, #412]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80039d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039d6:	fa92 f2a2 	rbit	r2, r2
 80039da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039de:	fab2 f282 	clz	r2, r2
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f042 0220 	orr.w	r2, r2, #32
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f002 021f 	and.w	r2, r2, #31
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d17b      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e0f3      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d13c      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x178>
 8003a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x128>
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	e00f      	b.n	8003a50 <HAL_RCC_ClockConfig+0x148>
 8003a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40
 8003a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a4c:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a54:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a58:	fa92 f2a2 	rbit	r2, r2
 8003a5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f042 0220 	orr.w	r2, r2, #32
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f002 021f 	and.w	r2, r2, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d13a      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b2      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
 8003a80:	2302      	movs	r3, #2
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x1a0>
 8003aa2:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	e00d      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x1bc>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	fa93 f3a3 	rbit	r3, r3
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	61ba      	str	r2, [r7, #24]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	fa92 f2a2 	rbit	r2, r2
 8003ace:	617a      	str	r2, [r7, #20]
  return result;
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	fab2 f282 	clz	r2, r2
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f042 0220 	orr.w	r2, r2, #32
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f002 021f 	and.w	r2, r2, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e079      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	491a      	ldr	r1, [pc, #104]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fd fa3c 	bl	8000f80 <HAL_GetTick>
 8003b08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fa38 	bl	8000f80 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e061      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d214      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 0207 	bic.w	r2, r3, #7
 8003b4a:	4906      	ldr	r1, [pc, #24]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_ClockConfig+0x25c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e040      	b.n	8003be6 <HAL_RCC_ClockConfig+0x2de>
 8003b64:	40022000 	.word	0x40022000
 8003b68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003baa:	f000 f829 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bae:	4601      	mov	r1, r0
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb8:	22f0      	movs	r2, #240	; 0xf0
 8003bba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	fa92 f2a2 	rbit	r2, r2
 8003bc2:	60fa      	str	r2, [r7, #12]
  return result;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	fab2 f282 	clz	r2, r2
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	40d3      	lsrs	r3, r2
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x2ec>)
 8003bd0:	5cd3      	ldrb	r3, [r2, r3]
 8003bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_RCC_ClockConfig+0x2f0>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_RCC_ClockConfig+0x2f4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fd f98a 	bl	8000ef8 <HAL_InitTick>
  
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3778      	adds	r7, #120	; 0x78
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	080053cc 	.word	0x080053cc
 8003bf8:	2000002c 	.word	0x2000002c
 8003bfc:	20000030 	.word	0x20000030

08003c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b08b      	sub	sp, #44	; 0x2c
 8003c04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x30>
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x36>
 8003c2e:	e03c      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c32:	623b      	str	r3, [r7, #32]
      break;
 8003c34:	e03c      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	fa92 f2a2 	rbit	r2, r2
 8003c48:	607a      	str	r2, [r7, #4]
  return result;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	fab2 f282 	clz	r2, r2
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	40d3      	lsrs	r3, r2
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c56:	5cd3      	ldrb	r3, [r2, r3]
 8003c58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	220f      	movs	r2, #15
 8003c64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	fa92 f2a2 	rbit	r2, r2
 8003c6c:	60fa      	str	r2, [r7, #12]
  return result;
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	40d3      	lsrs	r3, r2
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c7a:	5cd3      	ldrb	r3, [r2, r3]
 8003c7c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c88:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
 8003c98:	e004      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	623b      	str	r3, [r7, #32]
      break;
 8003ca8:	e002      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cac:	623b      	str	r3, [r7, #32]
      break;
 8003cae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	372c      	adds	r7, #44	; 0x2c
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	007a1200 	.word	0x007a1200
 8003cc8:	080053dc 	.word	0x080053dc
 8003ccc:	080053ec 	.word	0x080053ec
 8003cd0:	003d0900 	.word	0x003d0900

08003cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	; 0x48
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80d0 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf8:	4b8e      	ldr	r3, [pc, #568]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10e      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d04:	4b8b      	ldr	r3, [pc, #556]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4a8a      	ldr	r2, [pc, #552]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	61d3      	str	r3, [r2, #28]
 8003d10:	4b88      	ldr	r3, [pc, #544]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b82      	ldr	r3, [pc, #520]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a81      	ldr	r2, [pc, #516]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fd f921 	bl	8000f80 <HAL_GetTick>
 8003d3e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e008      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d42:	f7fd f91d 	bl	8000f80 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b64      	cmp	r3, #100	; 0x64
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0ea      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d60:	4b74      	ldr	r3, [pc, #464]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07d      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d076      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7e:	4b6d      	ldr	r3, [pc, #436]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d8c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	461a      	mov	r2, r3
 8003da8:	2301      	movs	r3, #1
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	fa93 f3a3 	rbit	r3, r3
 8003db8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2300      	movs	r3, #0
 8003dce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d045      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd f8ce 	bl	8000f80 <HAL_GetTick>
 8003de4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd f8ca 	bl	8000f80 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e095      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	61fb      	str	r3, [r7, #28]
  return result;
 8003e16:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0302 	orr.w	r3, r3, #2
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	e007      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	fa93 f3a3 	rbit	r3, r3
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2202      	movs	r2, #2
 8003e44:	613a      	str	r2, [r7, #16]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	fa92 f2a2 	rbit	r2, r2
 8003e4c:	60fa      	str	r2, [r7, #12]
  return result;
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	fab2 f282 	clz	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f002 021f 	and.w	r2, r2, #31
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0bd      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	492e      	ldr	r1, [pc, #184]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9e:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4922      	ldr	r1, [pc, #136]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f023 0210 	bic.w	r2, r3, #16
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	491a      	ldr	r1, [pc, #104]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eda:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4913      	ldr	r1, [pc, #76]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	490b      	ldr	r1, [pc, #44]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3748      	adds	r7, #72	; 0x48
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	10908100 	.word	0x10908100

08003f40 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e083      	b.n	800405a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7f5b      	ldrb	r3, [r3, #29]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc feb4 	bl	8000cd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	22ca      	movs	r2, #202	; 0xca
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2253      	movs	r2, #83	; 0x53
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f897 	bl	80040b2 <RTC_EnterInitMode>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e05e      	b.n	800405a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6919      	ldr	r1, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10e      	bne.n	8004028 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f829 	bl	8004062 <HAL_RTC_WaitForSynchro>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e018      	b.n	800405a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	22ff      	movs	r2, #255	; 0xff
 8004050:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004058:	2300      	movs	r3, #0
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800407c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800407e:	f7fc ff7f 	bl	8000f80 <HAL_GetTick>
 8004082:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004084:	e009      	b.n	800409a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004086:	f7fc ff7b 	bl	8000f80 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004094:	d901      	bls.n	800409a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e007      	b.n	80040aa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0ee      	beq.n	8004086 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d119      	bne.n	8004100 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80040d6:	f7fc ff53 	bl	8000f80 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040dc:	e009      	b.n	80040f2 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040de:	f7fc ff4f 	bl	8000f80 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ec:	d901      	bls.n	80040f2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e007      	b.n	8004102 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e01d      	b.n	8004158 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fc fdf3 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f000 fbc3 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <HAL_TIM_Base_Start_IT+0x50>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d00b      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x42>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d007      	beq.n	80041a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	00010007 	.word	0x00010007

080041b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e01d      	b.n	8004202 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f815 	bl	800420a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	3304      	adds	r3, #4
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f000 fb6e 	bl	80048d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b02      	cmp	r3, #2
 8004232:	d122      	bne.n	800427a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d11b      	bne.n	800427a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0202 	mvn.w	r2, #2
 800424a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb18 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004266:	e005      	b.n	8004274 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb0a 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fb1b 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d122      	bne.n	80042ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d11b      	bne.n	80042ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0204 	mvn.w	r2, #4
 800429e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 faee 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 80042ba:	e005      	b.n	80042c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fae0 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 faf1 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d122      	bne.n	8004322 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d11b      	bne.n	8004322 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f06f 0208 	mvn.w	r2, #8
 80042f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fac4 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 800430e:	e005      	b.n	800431c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fab6 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fac7 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b10      	cmp	r3, #16
 800432e:	d122      	bne.n	8004376 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d11b      	bne.n	8004376 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f06f 0210 	mvn.w	r2, #16
 8004346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2208      	movs	r2, #8
 800434c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa9a 	bl	8004896 <HAL_TIM_IC_CaptureCallback>
 8004362:	e005      	b.n	8004370 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fa8c 	bl	8004882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa9d 	bl	80048aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10e      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f06f 0201 	mvn.w	r2, #1
 800439a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fc fadd 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ac:	2b80      	cmp	r3, #128	; 0x80
 80043ae:	d10e      	bne.n	80043ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d107      	bne.n	80043ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 ffb3 	bl	8005334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043dc:	d10e      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d107      	bne.n	80043fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 ffa6 	bl	8005348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d10e      	bne.n	8004428 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d107      	bne.n	8004428 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa4b 	bl	80048be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	d10e      	bne.n	8004454 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b20      	cmp	r3, #32
 8004442:	d107      	bne.n	8004454 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0220 	mvn.w	r2, #32
 800444c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 ff66 	bl	8005320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004472:	2302      	movs	r3, #2
 8004474:	e105      	b.n	8004682 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b14      	cmp	r3, #20
 800448a:	f200 80f0 	bhi.w	800466e <HAL_TIM_PWM_ConfigChannel+0x212>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044e9 	.word	0x080044e9
 8004498:	0800466f 	.word	0x0800466f
 800449c:	0800466f 	.word	0x0800466f
 80044a0:	0800466f 	.word	0x0800466f
 80044a4:	08004529 	.word	0x08004529
 80044a8:	0800466f 	.word	0x0800466f
 80044ac:	0800466f 	.word	0x0800466f
 80044b0:	0800466f 	.word	0x0800466f
 80044b4:	0800456b 	.word	0x0800456b
 80044b8:	0800466f 	.word	0x0800466f
 80044bc:	0800466f 	.word	0x0800466f
 80044c0:	0800466f 	.word	0x0800466f
 80044c4:	080045ab 	.word	0x080045ab
 80044c8:	0800466f 	.word	0x0800466f
 80044cc:	0800466f 	.word	0x0800466f
 80044d0:	0800466f 	.word	0x0800466f
 80044d4:	080045ed 	.word	0x080045ed
 80044d8:	0800466f 	.word	0x0800466f
 80044dc:	0800466f 	.word	0x0800466f
 80044e0:	0800466f 	.word	0x0800466f
 80044e4:	0800462d 	.word	0x0800462d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fa68 	bl	80049c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	619a      	str	r2, [r3, #24]
      break;
 8004526:	e0a3      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 face 	bl	8004ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      break;
 8004568:	e082      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fb2d 	bl	8004bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0208 	orr.w	r2, r2, #8
 8004584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0204 	bic.w	r2, r2, #4
 8004594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
      break;
 80045a8:	e062      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fb8b 	bl	8004ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	61da      	str	r2, [r3, #28]
      break;
 80045ea:	e041      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fbce 	bl	8004d94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800462a:	e021      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fc0c 	bl	8004e50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	021a      	lsls	r2, r3, #8
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800466c:	e000      	b.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800466e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop

0800468c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0a8      	b.n	80047f6 <HAL_TIM_ConfigClockSource+0x16a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d067      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0x124>
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d80b      	bhi.n	80046fc <HAL_TIM_ConfigClockSource+0x70>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d073      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x144>
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d802      	bhi.n	80046f2 <HAL_TIM_ConfigClockSource+0x66>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d06f      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046f0:	e078      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d06c      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x144>
 80046f6:	2b30      	cmp	r3, #48	; 0x30
 80046f8:	d06a      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80046fa:	e073      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d00d      	beq.n	800471c <HAL_TIM_ConfigClockSource+0x90>
 8004700:	2b70      	cmp	r3, #112	; 0x70
 8004702:	d804      	bhi.n	800470e <HAL_TIM_ConfigClockSource+0x82>
 8004704:	2b50      	cmp	r3, #80	; 0x50
 8004706:	d033      	beq.n	8004770 <HAL_TIM_ConfigClockSource+0xe4>
 8004708:	2b60      	cmp	r3, #96	; 0x60
 800470a:	d041      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800470c:	e06a      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	d066      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x156>
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d017      	beq.n	800474a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800471a:	e063      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6899      	ldr	r1, [r3, #8]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f000 fcf2 	bl	8005114 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]
      break;
 8004748:	e04c      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f000 fcdb 	bl	8005114 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476c:	609a      	str	r2, [r3, #8]
      break;
 800476e:	e039      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	461a      	mov	r2, r3
 800477e:	f000 fc4f 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2150      	movs	r1, #80	; 0x50
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fca8 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 800478e:	e029      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	461a      	mov	r2, r3
 800479e:	f000 fc6e 	bl	800507e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2160      	movs	r1, #96	; 0x60
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc98 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 80047ae:	e019      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	461a      	mov	r2, r3
 80047be:	f000 fc2f 	bl	8005020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2140      	movs	r1, #64	; 0x40
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fc88 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 80047ce:	e009      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	4610      	mov	r0, r2
 80047dc:	f000 fc7f 	bl	80050de <TIM_ITRx_SetConfig>
      break;
 80047e0:	e000      	b.n	80047e4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80047e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004812:	2302      	movs	r3, #2
 8004814:	e031      	b.n	800487a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb71 	bl	8004f10 <TIM_SlaveTimer_SetConfig>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e018      	b.n	800487a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004866:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <TIM_Base_SetConfig+0xdc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x28>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x28>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <TIM_Base_SetConfig+0xe0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <TIM_Base_SetConfig+0xdc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <TIM_Base_SetConfig+0x6a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d00f      	beq.n	800493e <TIM_Base_SetConfig+0x6a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a24      	ldr	r2, [pc, #144]	; (80049b4 <TIM_Base_SetConfig+0xe0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x6a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <TIM_Base_SetConfig+0xe4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x6a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a22      	ldr	r2, [pc, #136]	; (80049bc <TIM_Base_SetConfig+0xe8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x6a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <TIM_Base_SetConfig+0xec>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0e      	ldr	r2, [pc, #56]	; (80049b0 <TIM_Base_SetConfig+0xdc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0xc0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <TIM_Base_SetConfig+0xe4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0xc0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0d      	ldr	r2, [pc, #52]	; (80049bc <TIM_Base_SetConfig+0xe8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0xc0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <TIM_Base_SetConfig+0xec>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d103      	bne.n	800499c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	615a      	str	r2, [r3, #20]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40014400 	.word	0x40014400
 80049c0:	40014800 	.word	0x40014800

080049c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f023 0201 	bic.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 0302 	bic.w	r3, r3, #2
 8004a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a28      	ldr	r2, [pc, #160]	; (8004ac0 <TIM_OC1_SetConfig+0xfc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <TIM_OC1_SetConfig+0x78>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a27      	ldr	r2, [pc, #156]	; (8004ac4 <TIM_OC1_SetConfig+0x100>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d007      	beq.n	8004a3c <TIM_OC1_SetConfig+0x78>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <TIM_OC1_SetConfig+0x104>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC1_SetConfig+0x78>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a25      	ldr	r2, [pc, #148]	; (8004acc <TIM_OC1_SetConfig+0x108>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10c      	bne.n	8004a56 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0308 	bic.w	r3, r3, #8
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <TIM_OC1_SetConfig+0xfc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_OC1_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC1_SetConfig+0x100>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_OC1_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC1_SetConfig+0x104>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_OC1_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a16      	ldr	r2, [pc, #88]	; (8004acc <TIM_OC1_SetConfig+0x108>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	621a      	str	r2, [r3, #32]
}
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0210 	bic.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0320 	bic.w	r3, r3, #32
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <TIM_OC2_SetConfig+0xf0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10d      	bne.n	8004b50 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <TIM_OC2_SetConfig+0xf0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <TIM_OC2_SetConfig+0xa0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	; (8004bc4 <TIM_OC2_SetConfig+0xf4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d007      	beq.n	8004b70 <TIM_OC2_SetConfig+0xa0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <TIM_OC2_SetConfig+0xf8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC2_SetConfig+0xa0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <TIM_OC2_SetConfig+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d113      	bne.n	8004b98 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800

08004bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <TIM_OC3_SetConfig+0xec>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10d      	bne.n	8004c4e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c4c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <TIM_OC3_SetConfig+0xec>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00b      	beq.n	8004c6e <TIM_OC3_SetConfig+0x9e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <TIM_OC3_SetConfig+0xf0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <TIM_OC3_SetConfig+0x9e>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a18      	ldr	r2, [pc, #96]	; (8004cc4 <TIM_OC3_SetConfig+0xf4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x9e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <TIM_OC3_SetConfig+0xf8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40014400 	.word	0x40014400
 8004cc8:	40014800 	.word	0x40014800

08004ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC4_SetConfig+0xb8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_OC4_SetConfig+0x7c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC4_SetConfig+0xbc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_OC4_SetConfig+0x7c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_OC4_SetConfig+0xc0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC4_SetConfig+0x7c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <TIM_OC4_SetConfig+0xc4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d109      	bne.n	8004d5c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	019b      	lsls	r3, r3, #6
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800

08004d94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <TIM_OC5_SetConfig+0xac>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_OC5_SetConfig+0x72>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <TIM_OC5_SetConfig+0xb0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_OC5_SetConfig+0x72>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <TIM_OC5_SetConfig+0xb4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_OC5_SetConfig+0x72>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <TIM_OC5_SetConfig+0xb8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d109      	bne.n	8004e1a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40012c00 	.word	0x40012c00
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40014400 	.word	0x40014400
 8004e4c:	40014800 	.word	0x40014800

08004e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	051b      	lsls	r3, r3, #20
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <TIM_OC6_SetConfig+0xb0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_OC6_SetConfig+0x74>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <TIM_OC6_SetConfig+0xb4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_OC6_SetConfig+0x74>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <TIM_OC6_SetConfig+0xb8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_OC6_SetConfig+0x74>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <TIM_OC6_SetConfig+0xbc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d109      	bne.n	8004ed8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b30      	cmp	r3, #48	; 0x30
 8004f58:	d05c      	beq.n	8005014 <TIM_SlaveTimer_SetConfig+0x104>
 8004f5a:	2b30      	cmp	r3, #48	; 0x30
 8004f5c:	d806      	bhi.n	8004f6c <TIM_SlaveTimer_SetConfig+0x5c>
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d058      	beq.n	8005014 <TIM_SlaveTimer_SetConfig+0x104>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d056      	beq.n	8005014 <TIM_SlaveTimer_SetConfig+0x104>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d054      	beq.n	8005014 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004f6a:	e054      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004f6c:	2b50      	cmp	r3, #80	; 0x50
 8004f6e:	d03d      	beq.n	8004fec <TIM_SlaveTimer_SetConfig+0xdc>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d802      	bhi.n	8004f7a <TIM_SlaveTimer_SetConfig+0x6a>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d010      	beq.n	8004f9a <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8004f78:	e04d      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004f7a:	2b60      	cmp	r3, #96	; 0x60
 8004f7c:	d040      	beq.n	8005000 <TIM_SlaveTimer_SetConfig+0xf0>
 8004f7e:	2b70      	cmp	r3, #112	; 0x70
 8004f80:	d000      	beq.n	8004f84 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8004f82:	e048      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68d9      	ldr	r1, [r3, #12]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f000 f8be 	bl	8005114 <TIM_ETR_SetConfig>
      break;
 8004f98:	e03d      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d101      	bne.n	8004fa6 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e038      	b.n	8005018 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a1a      	ldr	r2, [r3, #32]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fcc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
      break;
 8004fea:	e014      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f000 f811 	bl	8005020 <TIM_TI1_ConfigInputStage>
      break;
 8004ffe:	e00a      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	461a      	mov	r2, r3
 800500e:	f000 f836 	bl	800507e <TIM_TI2_ConfigInputStage>
      break;
 8005012:	e000      	b.n	8005016 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8005014:	bf00      	nop
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0210 	bic.w	r2, r3, #16
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	031b      	lsls	r3, r3, #12
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	621a      	str	r2, [r3, #32]
}
 80050d2:	bf00      	nop
 80050d4:	371c      	adds	r7, #28
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f043 0307 	orr.w	r3, r3, #7
 8005100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	021a      	lsls	r2, r3, #8
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	431a      	orrs	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4313      	orrs	r3, r2
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005168:	2302      	movs	r3, #2
 800516a:	e054      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800519c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a17      	ldr	r2, [pc, #92]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40014000 	.word	0x40014000

08005230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005248:	2302      	movs	r3, #2
 800524a:	e060      	b.n	800530e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a14      	ldr	r2, [pc, #80]	; (800531c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d115      	bne.n	80052fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	051b      	lsls	r3, r3, #20
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40012c00 	.word	0x40012c00

08005320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4e0d      	ldr	r6, [pc, #52]	; (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	; (8005398 <__libc_init_array+0x3c>)
 8005362:	1ba4      	subs	r4, r4, r6
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2500      	movs	r5, #0
 8005368:	42a5      	cmp	r5, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4e0b      	ldr	r6, [pc, #44]	; (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	; (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 f820 	bl	80053b4 <_init>
 8005374:	1ba4      	subs	r4, r4, r6
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2500      	movs	r5, #0
 800537a:	42a5      	cmp	r5, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005384:	4798      	blx	r3
 8005386:	3501      	adds	r5, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800538e:	4798      	blx	r3
 8005390:	3501      	adds	r5, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	080053fc 	.word	0x080053fc
 8005398:	080053fc 	.word	0x080053fc
 800539c:	080053fc 	.word	0x080053fc
 80053a0:	08005400 	.word	0x08005400

080053a4 <memset>:
 80053a4:	4402      	add	r2, r0
 80053a6:	4603      	mov	r3, r0
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d100      	bne.n	80053ae <memset+0xa>
 80053ac:	4770      	bx	lr
 80053ae:	f803 1b01 	strb.w	r1, [r3], #1
 80053b2:	e7f9      	b.n	80053a8 <memset+0x4>

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
