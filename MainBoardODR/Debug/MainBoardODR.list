
MainBoardODR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800428c  0800428c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800428c  0800428c  0001428c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  080042a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080042a0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb32  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d3f  00000000  00000000  0002eb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  000308b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00031730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbc4  00000000  00000000  000324b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b901  00000000  00000000  0004f07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad026  00000000  00000000  0005a97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001079a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  00107a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004244 	.word	0x08004244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004244 	.word	0x08004244

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc52 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f818 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa6e 	bl	80006b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f878 	bl	80002cc <MX_ADC1_Init>
  MX_ADC2_Init();
 80001dc:	f000 f8e6 	bl	80003ac <MX_ADC2_Init>
  MX_I2C1_Init();
 80001e0:	f000 f942 	bl	8000468 <MX_I2C1_Init>
  MX_RTC_Init();
 80001e4:	f000 f980 	bl	80004e8 <MX_RTC_Init>
  MX_TIM1_Init();
 80001e8:	f000 f9a4 	bl	8000534 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_TEST_Pin);
 80001ec:	2102      	movs	r1, #2
 80001ee:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x38>)
 80001f0:	f001 fcb2 	bl	8001b58 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f8:	f000 fca2 	bl	8000b40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_TEST_Pin);
 80001fc:	e7f6      	b.n	80001ec <main+0x24>
 80001fe:	bf00      	nop
 8000200:	48000400 	.word	0x48000400

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f004 f80e 	bl	8004234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 031c 	add.w	r3, r7, #28
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]
 8000236:	615a      	str	r2, [r3, #20]
 8000238:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800023a:	230a      	movs	r3, #10
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800024e:	2300      	movs	r3, #0
 8000250:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000252:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000256:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fdbb 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000268:	f000 fa62 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	f107 031c 	add.w	r3, r7, #28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fcae 	bl	8002be8 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 fa4d 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <SystemClock_Config+0xc4>)
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800029a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800029e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fe7f 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002bc:	f000 fa38 	bl	8000730 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3758      	adds	r7, #88	; 0x58
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	000110a0 	.word	0x000110a0

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800034a:	f000 fc1b 	bl	8000b84 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000354:	f000 f9ec 	bl	8000730 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000364:	f001 f862 	bl	800142c <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800036e:	f000 f9df 	bl	8000730 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000390:	f000 fd8a 	bl	8000ea8 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800039a:	f000 f9c9 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3728      	adds	r7, #40	; 0x28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000c8 	.word	0x200000c8

080003ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	463b      	mov	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80003c2:	4b27      	ldr	r3, [pc, #156]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003c4:	4a27      	ldr	r2, [pc, #156]	; (8000464 <MX_ADC2_Init+0xb8>)
 80003c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c8:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003ce:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003d4:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003da:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003f0:	2201      	movs	r2, #1
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80003fa:	4b19      	ldr	r3, [pc, #100]	; (8000460 <MX_ADC2_Init+0xb4>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000402:	2200      	movs	r2, #0
 8000404:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000408:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_ADC2_Init+0xb4>)
 800040a:	2204      	movs	r2, #4
 800040c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000410:	2200      	movs	r2, #0
 8000412:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000414:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000416:	2200      	movs	r2, #0
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_ADC2_Init+0xb4>)
 800041c:	f000 fbb2 	bl	8000b84 <HAL_ADC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000426:	f000 f983 	bl	8000730 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800042a:	2301      	movs	r3, #1
 800042c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2301      	movs	r3, #1
 8000430:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800043a:	2300      	movs	r3, #0
 800043c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000442:	463b      	mov	r3, r7
 8000444:	4619      	mov	r1, r3
 8000446:	4806      	ldr	r0, [pc, #24]	; (8000460 <MX_ADC2_Init+0xb4>)
 8000448:	f000 fd2e 	bl	8000ea8 <HAL_ADC_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000452:	f000 f96d 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	2000002c 	.word	0x2000002c
 8000464:	50000100 	.word	0x50000100

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <MX_I2C1_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <MX_I2C1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <MX_I2C1_Init+0x74>)
 8000474:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <MX_I2C1_Init+0x7c>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <MX_I2C1_Init+0x74>)
 8000480:	2201      	movs	r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000484:	4b15      	ldr	r3, [pc, #84]	; (80004dc <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a2:	480e      	ldr	r0, [pc, #56]	; (80004dc <MX_I2C1_Init+0x74>)
 80004a4:	f001 fb72 	bl	8001b8c <HAL_I2C_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ae:	f000 f93f 	bl	8000730 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b2:	2100      	movs	r1, #0
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_I2C1_Init+0x74>)
 80004b6:	f001 fbf8 	bl	8001caa <HAL_I2CEx_ConfigAnalogFilter>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c0:	f000 f936 	bl	8000730 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c4:	2100      	movs	r1, #0
 80004c6:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_I2C1_Init+0x74>)
 80004c8:	f001 fc3a 	bl	8001d40 <HAL_I2CEx_ConfigDigitalFilter>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f92d 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000007c 	.word	0x2000007c
 80004e0:	40005400 	.word	0x40005400
 80004e4:	2000090e 	.word	0x2000090e

080004e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_RTC_Init+0x44>)
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_RTC_Init+0x48>)
 80004f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <MX_RTC_Init+0x44>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <MX_RTC_Init+0x44>)
 80004fa:	227f      	movs	r2, #127	; 0x7f
 80004fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <MX_RTC_Init+0x44>)
 8000500:	22ff      	movs	r2, #255	; 0xff
 8000502:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_RTC_Init+0x44>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <MX_RTC_Init+0x44>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_RTC_Init+0x44>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_RTC_Init+0x44>)
 8000518:	f002 fe82 	bl	8003220 <HAL_RTC_Init>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000522:	f000 f905 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000118 	.word	0x20000118
 8000530:	40002800 	.word	0x40002800

08000534 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b09e      	sub	sp, #120	; 0x78
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000558:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
 8000574:	615a      	str	r2, [r3, #20]
 8000576:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	222c      	movs	r2, #44	; 0x2c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fe58 	bl	8004234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000584:	4b49      	ldr	r3, [pc, #292]	; (80006ac <MX_TIM1_Init+0x178>)
 8000586:	4a4a      	ldr	r2, [pc, #296]	; (80006b0 <MX_TIM1_Init+0x17c>)
 8000588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <MX_TIM1_Init+0x178>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b46      	ldr	r3, [pc, #280]	; (80006ac <MX_TIM1_Init+0x178>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <MX_TIM1_Init+0x178>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	4b43      	ldr	r3, [pc, #268]	; (80006ac <MX_TIM1_Init+0x178>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a2:	4b42      	ldr	r3, [pc, #264]	; (80006ac <MX_TIM1_Init+0x178>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b40      	ldr	r3, [pc, #256]	; (80006ac <MX_TIM1_Init+0x178>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ae:	483f      	ldr	r0, [pc, #252]	; (80006ac <MX_TIM1_Init+0x178>)
 80005b0:	f002 ff1b 	bl	80033ea <HAL_TIM_Base_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80005ba:	f000 f8b9 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005c8:	4619      	mov	r1, r3
 80005ca:	4838      	ldr	r0, [pc, #224]	; (80006ac <MX_TIM1_Init+0x178>)
 80005cc:	f002 ffec 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80005d6:	f000 f8ab 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005da:	4834      	ldr	r0, [pc, #208]	; (80006ac <MX_TIM1_Init+0x178>)
 80005dc:	f002 ff30 	bl	8003440 <HAL_TIM_OC_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80005e6:	f000 f8a3 	bl	8000730 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f6:	4619      	mov	r1, r3
 80005f8:	482c      	ldr	r0, [pc, #176]	; (80006ac <MX_TIM1_Init+0x178>)
 80005fa:	f003 f88e 	bl	800371a <HAL_TIM_SlaveConfigSynchro>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000604:	f000 f894 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000614:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000618:	4619      	mov	r1, r3
 800061a:	4824      	ldr	r0, [pc, #144]	; (80006ac <MX_TIM1_Init+0x178>)
 800061c:	f003 fd00 	bl	8004020 <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000626:	f000 f883 	bl	8000730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800062a:	2300      	movs	r3, #0
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000632:	2300      	movs	r3, #0
 8000634:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000636:	2300      	movs	r3, #0
 8000638:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800063e:	2300      	movs	r3, #0
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000646:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <MX_TIM1_Init+0x178>)
 8000650:	f002 ff2c 	bl	80034ac <HAL_TIM_OC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800065a:	f000 f869 	bl	8000730 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000684:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_TIM1_Init+0x178>)
 8000694:	f003 fd32 	bl	80040fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 800069e:	f000 f847 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3778      	adds	r7, #120	; 0x78
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000138 	.word	0x20000138
 80006b0:	40012c00 	.word	0x40012c00

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_GPIO_Init+0x74>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4a16      	ldr	r2, [pc, #88]	; (8000728 <MX_GPIO_Init+0x74>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_GPIO_Init+0x74>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_GPIO_Init+0x74>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <MX_GPIO_Init+0x74>)
 80006e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_GPIO_Init+0x74>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <MX_GPIO_Init+0x78>)
 8000700:	f001 fa12 	bl	8001b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_TEST_Pin */
  GPIO_InitStruct.Pin = GPIO_TEST_Pin;
 8000704:	2302      	movs	r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_TEST_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_GPIO_Init+0x78>)
 800071c:	f001 f892 	bl	8001844 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	48000400 	.word	0x48000400

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a8:	d12e      	bne.n	8000808 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a31      	ldr	r2, [pc, #196]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 80007b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10b      	bne.n	80007d4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007bc:	4b2f      	ldr	r3, [pc, #188]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a2e      	ldr	r2, [pc, #184]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6153      	str	r3, [r2, #20]
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a28      	ldr	r2, [pc, #160]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007de:	6153      	str	r3, [r2, #20]
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <HAL_ADC_MspInit+0xf4>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f001 f81f 	bl	8001844 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000806:	e032      	b.n	800086e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <HAL_ADC_MspInit+0xf8>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d12d      	bne.n	800086e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 800081a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800081c:	4b16      	ldr	r3, [pc, #88]	; (8000878 <HAL_ADC_MspInit+0xf0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10b      	bne.n	800083c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_ADC_MspInit+0xf4>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_ADC_MspInit+0xf4>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6153      	str	r3, [r2, #20]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_ADC_MspInit+0xf4>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_ADC_MspInit+0xf4>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_ADC_MspInit+0xf4>)
 8000842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000846:	6153      	str	r3, [r2, #20]
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_ADC_MspInit+0xf4>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_2_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000858:	2303      	movs	r3, #3
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_2_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f000 ffeb 	bl	8001844 <HAL_GPIO_Init>
}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	; 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000028 	.word	0x20000028
 800087c:	40021000 	.word	0x40021000
 8000880:	50000100 	.word	0x50000100

08000884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_I2C_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d127      	bne.n	80008f6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ce:	2304      	movs	r3, #4
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_I2C_MspInit+0x84>)
 80008da:	f000 ffb3 	bl	8001844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_I2C_MspInit+0x80>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40005400 	.word	0x40005400
 8000904:	40021000 	.word	0x40021000
 8000908:	48000400 	.word	0x48000400

0800090c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_RTC_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d111      	bne.n	8000942 <HAL_RTC_MspInit+0x36>
 800091e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000922:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	fa93 f3a3 	rbit	r3, r3
 800092a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800092c:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800092e:	fab3 f383 	clz	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_RTC_MspInit+0x48>)
 8000938:	4413      	add	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	461a      	mov	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40002800 	.word	0x40002800
 8000954:	10908100 	.word	0x10908100

08000958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_TIM_Base_MspInit+0x38>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10b      	bne.n	8000982 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_TIM_Base_MspInit+0x3c>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_TIM_Base_MspInit+0x3c>)
 8000970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40021000 	.word	0x40021000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f888 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <SystemInit+0x28>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <SystemInit+0x28>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <SystemInit+0x28>)
 8000a0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a26:	e003      	b.n	8000a30 <LoopCopyDataInit>

08000a28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a2e:	3104      	adds	r1, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a38:	d3f6      	bcc.n	8000a28 <CopyDataInit>
	ldr	r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a3c:	e002      	b.n	8000a44 <LoopFillZerobss>

08000a3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a40:	f842 3b04 	str.w	r3, [r2], #4

08000a44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <LoopForever+0x16>)
	cmp	r2, r3
 8000a46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a48:	d3f9      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a4a:	f7ff ffd3 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f003 fbcd 	bl	80041ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a52:	f7ff fbb9 	bl	80001c8 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a58:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a5c:	08004294 	.word	0x08004294
	ldr	r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a64:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a6c:	2000017c 	.word	0x2000017c

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fea9 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fe56 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 feb3 	bl	800182a <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 fe89 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000178 	.word	0x20000178

08000b28 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000178 	.word	0x20000178

08000b40 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_Delay+0x40>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b09a      	sub	sp, #104	; 0x68
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e172      	b.n	8000e8a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d176      	bne.n	8000ca4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d152      	bne.n	8000c64 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fdd5 	bl	8000788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d13b      	bne.n	8000c64 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fce3 	bl	80015b8 <ADC_Disable>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d12f      	bne.n	8000c64 <HAL_ADC_Init+0xe0>
 8000c04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d12b      	bne.n	8000c64 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c14:	f023 0302 	bic.w	r3, r3, #2
 8000c18:	f043 0202 	orr.w	r2, r3, #2
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c2e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c3e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c40:	4b94      	ldr	r3, [pc, #592]	; (8000e94 <HAL_ADC_Init+0x310>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_ADC_Init+0x314>)
 8000c46:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4a:	0c9a      	lsrs	r2, r3, #18
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c56:	e002      	b.n	8000c5e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f9      	bne.n	8000c58 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c80:	d110      	bne.n	8000ca4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f023 0312 	bic.w	r3, r3, #18
 8000c8a:	f043 0210 	orr.w	r2, r3, #16
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f040 80df 	bne.w	8000e70 <HAL_ADC_Init+0x2ec>
 8000cb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80da 	bne.w	8000e70 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 80d2 	bne.w	8000e70 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cd4:	f043 0202 	orr.w	r2, r3, #2
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cdc:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <HAL_ADC_Init+0x318>)
 8000cde:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ce8:	d102      	bne.n	8000cf0 <HAL_ADC_Init+0x16c>
 8000cea:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <HAL_ADC_Init+0x31c>)
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e002      	b.n	8000cf6 <HAL_ADC_Init+0x172>
 8000cf0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cf4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <HAL_ADC_Init+0x192>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_ADC_Init+0x192>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <HAL_ADC_Init+0x194>
 8000d16:	2300      	movs	r3, #0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d11c      	bne.n	8000d56 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d010      	beq.n	8000d44 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d107      	bne.n	8000d3e <HAL_ADC_Init+0x1ba>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <HAL_ADC_Init+0x1ba>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_ADC_Init+0x1bc>
 8000d3e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d108      	bne.n	8000d56 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d54:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7e5b      	ldrb	r3, [r3, #25]
 8000d5a:	035b      	lsls	r3, r3, #13
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d002      	beq.n	8000d6a <HAL_ADC_Init+0x1e6>
 8000d64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d68:	e000      	b.n	8000d6c <HAL_ADC_Init+0x1e8>
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d11b      	bne.n	8000dc2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d109      	bne.n	8000da6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	3b01      	subs	r3, #1
 8000d98:	045a      	lsls	r2, r3, #17
 8000d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da2:	663b      	str	r3, [r7, #96]	; 0x60
 8000da4:	e00d      	b.n	8000dc2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000dae:	f043 0220 	orr.w	r2, r3, #32
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d007      	beq.n	8000dda <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d114      	bne.n	8000e12 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000df6:	f023 0302 	bic.w	r3, r3, #2
 8000dfa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e1b      	ldrb	r3, [r3, #24]
 8000e00:	039a      	lsls	r2, r3, #14
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <HAL_ADC_Init+0x320>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e22:	430b      	orrs	r3, r1
 8000e24:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d10c      	bne.n	8000e48 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f023 010f 	bic.w	r1, r3, #15
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	631a      	str	r2, [r3, #48]	; 0x30
 8000e46:	e007      	b.n	8000e58 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 020f 	bic.w	r2, r2, #15
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f023 0303 	bic.w	r3, r3, #3
 8000e66:	f043 0201 	orr.w	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6e:	e00a      	b.n	8000e86 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f023 0312 	bic.w	r3, r3, #18
 8000e78:	f043 0210 	orr.w	r2, r3, #16
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3768      	adds	r7, #104	; 0x68
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	50000300 	.word	0x50000300
 8000ea0:	50000100 	.word	0x50000100
 8000ea4:	fff0c007 	.word	0xfff0c007

08000ea8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b09b      	sub	sp, #108	; 0x6c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x22>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e2a5      	b.n	8001416 <HAL_ADC_ConfigChannel+0x56e>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f040 8289 	bne.w	80013f4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d81c      	bhi.n	8000f24 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	461a      	mov	r2, r3
 8000efe:	231f      	movs	r3, #31
 8000f00:	4093      	lsls	r3, r2
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4019      	ands	r1, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	4413      	add	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
 8000f22:	e063      	b.n	8000fec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	d81e      	bhi.n	8000f6a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	3b1e      	subs	r3, #30
 8000f40:	221f      	movs	r2, #31
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4019      	ands	r1, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	3b1e      	subs	r3, #30
 8000f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
 8000f68:	e040      	b.n	8000fec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b0e      	cmp	r3, #14
 8000f70:	d81e      	bhi.n	8000fb0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	3b3c      	subs	r3, #60	; 0x3c
 8000f86:	221f      	movs	r2, #31
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	3b3c      	subs	r3, #60	; 0x3c
 8000fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	639a      	str	r2, [r3, #56]	; 0x38
 8000fae:	e01d      	b.n	8000fec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	3b5a      	subs	r3, #90	; 0x5a
 8000fc4:	221f      	movs	r2, #31
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4019      	ands	r1, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	3b5a      	subs	r3, #90	; 0x5a
 8000fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80e5 	bne.w	80011c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b09      	cmp	r3, #9
 8001002:	d91c      	bls.n	800103e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6999      	ldr	r1, [r3, #24]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	3b1e      	subs	r3, #30
 8001016:	2207      	movs	r2, #7
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	4019      	ands	r1, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	6898      	ldr	r0, [r3, #8]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	3b1e      	subs	r3, #30
 8001030:	fa00 f203 	lsl.w	r2, r0, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	619a      	str	r2, [r3, #24]
 800103c:	e019      	b.n	8001072 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6959      	ldr	r1, [r3, #20]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	2207      	movs	r2, #7
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	4019      	ands	r1, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	6898      	ldr	r0, [r3, #8]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	fa00 f203 	lsl.w	r2, r0, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	695a      	ldr	r2, [r3, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	3b01      	subs	r3, #1
 8001090:	2b03      	cmp	r3, #3
 8001092:	d84f      	bhi.n	8001134 <HAL_ADC_ConfigChannel+0x28c>
 8001094:	a201      	add	r2, pc, #4	; (adr r2, 800109c <HAL_ADC_ConfigChannel+0x1f4>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010cf 	.word	0x080010cf
 80010a4:	080010f1 	.word	0x080010f1
 80010a8:	08001113 	.word	0x08001113
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b2:	4b9e      	ldr	r3, [pc, #632]	; (800132c <HAL_ADC_ConfigChannel+0x484>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	0691      	lsls	r1, r2, #26
 80010bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010be:	430a      	orrs	r2, r1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010cc:	e07e      	b.n	80011cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010d4:	4b95      	ldr	r3, [pc, #596]	; (800132c <HAL_ADC_ConfigChannel+0x484>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	0691      	lsls	r1, r2, #26
 80010de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e0:	430a      	orrs	r2, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010ee:	e06d      	b.n	80011cc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010f6:	4b8d      	ldr	r3, [pc, #564]	; (800132c <HAL_ADC_ConfigChannel+0x484>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	0691      	lsls	r1, r2, #26
 8001100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001102:	430a      	orrs	r2, r1
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800110e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001110:	e05c      	b.n	80011cc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001118:	4b84      	ldr	r3, [pc, #528]	; (800132c <HAL_ADC_ConfigChannel+0x484>)
 800111a:	4013      	ands	r3, r2
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	0691      	lsls	r1, r2, #26
 8001122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001124:	430a      	orrs	r2, r1
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001130:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001132:	e04b      	b.n	80011cc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800113a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	069b      	lsls	r3, r3, #26
 8001144:	429a      	cmp	r2, r3
 8001146:	d107      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001156:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800115e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	069b      	lsls	r3, r3, #26
 8001168:	429a      	cmp	r2, r3
 800116a:	d107      	bne.n	800117c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800117a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	069b      	lsls	r3, r3, #26
 800118c:	429a      	cmp	r2, r3
 800118e:	d107      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800119e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	069b      	lsls	r3, r3, #26
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d10a      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80011c4:	e001      	b.n	80011ca <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <HAL_ADC_ConfigChannel+0x324>
      break;
 80011ca:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x344>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x344>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_ADC_ConfigChannel+0x346>
 80011ec:	2300      	movs	r3, #0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f040 810b 	bne.w	800140a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d00f      	beq.n	800121c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800121a:	e049      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	409a      	lsls	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b09      	cmp	r3, #9
 800123c:	d91c      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6999      	ldr	r1, [r3, #24]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	3b1b      	subs	r3, #27
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	4019      	ands	r1, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	6898      	ldr	r0, [r3, #8]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	3b1b      	subs	r3, #27
 800126a:	fa00 f203 	lsl.w	r2, r0, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	619a      	str	r2, [r3, #24]
 8001276:	e01b      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6959      	ldr	r1, [r3, #20]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6898      	ldr	r0, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <HAL_ADC_ConfigChannel+0x488>)
 80012b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b10      	cmp	r3, #16
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d015      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012cc:	2b11      	cmp	r3, #17
 80012ce:	d105      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	f040 8092 	bne.w	800140a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80012e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 808b 	bne.w	800140a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d102      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x45c>
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_ADC_ConfigChannel+0x48c>)
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e002      	b.n	800130a <HAL_ADC_ConfigChannel+0x462>
 8001304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001308:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10f      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x490>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d108      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x490>
 8001326:	2301      	movs	r3, #1
 8001328:	e007      	b.n	800133a <HAL_ADC_ConfigChannel+0x492>
 800132a:	bf00      	nop
 800132c:	83fff000 	.word	0x83fff000
 8001330:	50000300 	.word	0x50000300
 8001334:	50000100 	.word	0x50000100
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d150      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800133e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001340:	2b00      	cmp	r3, #0
 8001342:	d010      	beq.n	8001366 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d107      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x4b8>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x4b8>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_ADC_ConfigChannel+0x4ba>
 8001360:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001362:	2b00      	cmp	r3, #0
 8001364:	d13c      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d11d      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x502>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001376:	d118      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001382:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_ADC_ConfigChannel+0x57c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_ADC_ConfigChannel+0x580>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	0c9a      	lsrs	r2, r3, #18
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800139a:	e002      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3b01      	subs	r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f9      	bne.n	800139c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013a8:	e02e      	b.n	8001408 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b11      	cmp	r3, #17
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x522>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ba:	d106      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80013c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013c8:	e01e      	b.n	8001408 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d11a      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80013d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013de:	e013      	b.n	8001408 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f043 0220 	orr.w	r2, r3, #32
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013f2:	e00a      	b.n	800140a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f043 0220 	orr.w	r2, r3, #32
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001406:	e000      	b.n	800140a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001408:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001416:	4618      	mov	r0, r3
 8001418:	376c      	adds	r7, #108	; 0x6c
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800142c:	b480      	push	{r7}
 800142e:	b099      	sub	sp, #100	; 0x64
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d102      	bne.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e002      	b.n	8001452 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800144c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001450:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0a2      	b.n	80015a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001466:	2302      	movs	r3, #2
 8001468:	e09b      	b.n	80015a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d17f      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d179      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148c:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800148e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d040      	beq.n	800151a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014aa:	035b      	lsls	r3, r3, #13
 80014ac:	430b      	orrs	r3, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d108      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80014d4:	2300      	movs	r3, #0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d15c      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80014f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d14b      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001504:	f023 030f 	bic.w	r3, r3, #15
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6811      	ldr	r1, [r2, #0]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	6892      	ldr	r2, [r2, #8]
 8001510:	430a      	orrs	r2, r1
 8001512:	431a      	orrs	r2, r3
 8001514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001516:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001518:	e03c      	b.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800151a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001524:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001546:	2300      	movs	r3, #0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d123      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001568:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800156a:	2b00      	cmp	r3, #0
 800156c:	d112      	bne.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800156e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001576:	f023 030f 	bic.w	r3, r3, #15
 800157a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800157c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800157e:	e009      	b.n	8001594 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001592:	e000      	b.n	8001596 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001594:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800159e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80015a2:	4618      	mov	r0, r3
 80015a4:	3764      	adds	r7, #100	; 0x64
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	50000100 	.word	0x50000100
 80015b4:	50000300 	.word	0x50000300

080015b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d108      	bne.n	80015e4 <ADC_Disable+0x2c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <ADC_Disable+0x2c>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <ADC_Disable+0x2e>
 80015e4:	2300      	movs	r3, #0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030d 	and.w	r3, r3, #13
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10f      	bne.n	8001618 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0202 	orr.w	r2, r2, #2
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2203      	movs	r2, #3
 800160e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001610:	f7ff fa8a 	bl	8000b28 <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001616:	e022      	b.n	800165e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0210 	orr.w	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e01c      	b.n	800166e <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001634:	f7ff fa78 	bl	8000b28 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d90d      	bls.n	800165e <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e007      	b.n	800166e <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b01      	cmp	r3, #1
 800166a:	d0e3      	beq.n	8001634 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff47 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff5c 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb0 	bl	8001798 <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e14e      	b.n	8001af2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8140 	beq.w	8001aec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x38>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b12      	cmp	r3, #18
 800187a:	d123      	bne.n	80018c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	08da      	lsrs	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3208      	adds	r2, #8
 8001884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	691a      	ldr	r2, [r3, #16]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	08da      	lsrs	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3208      	adds	r2, #8
 80018be:	6939      	ldr	r1, [r7, #16]
 80018c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00b      	beq.n	8001918 <HAL_GPIO_Init+0xd4>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d007      	beq.n	8001918 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190c:	2b11      	cmp	r3, #17
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b12      	cmp	r3, #18
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 0201 	and.w	r2, r3, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4013      	ands	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 809a 	beq.w	8001aec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <HAL_GPIO_Init+0x2cc>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fa:	d013      	beq.n	8001a24 <HAL_GPIO_Init+0x1e0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a46      	ldr	r2, [pc, #280]	; (8001b18 <HAL_GPIO_Init+0x2d4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a45      	ldr	r2, [pc, #276]	; (8001b1c <HAL_GPIO_Init+0x2d8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1d8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a44      	ldr	r2, [pc, #272]	; (8001b20 <HAL_GPIO_Init+0x2dc>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1d4>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e006      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a18:	2305      	movs	r3, #5
 8001a1a:	e004      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e002      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_GPIO_Init+0x1e2>
 8001a24:	2300      	movs	r3, #0
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	f002 0203 	and.w	r2, r2, #3
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	4093      	lsls	r3, r2
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_GPIO_Init+0x2d0>)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	089b      	lsrs	r3, r3, #2
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a68:	4a2e      	ldr	r2, [pc, #184]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_GPIO_Init+0x2e0>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f47f aea9 	bne.w	8001854 <HAL_GPIO_Init+0x10>
  }
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000
 8001b18:	48000400 	.word	0x48000400
 8001b1c:	48000800 	.word	0x48000800
 8001b20:	48000c00 	.word	0x48000c00
 8001b24:	40010400 	.word	0x40010400

08001b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b38:	787b      	ldrb	r3, [r7, #1]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e081      	b.n	8001ca2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe fe66 	bl	8000884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e006      	b.n	8001c14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d104      	bne.n	8001c26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	ea42 0103 	orr.w	r1, r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	021a      	lsls	r2, r3, #8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69d9      	ldr	r1, [r3, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d138      	bne.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e032      	b.n	8001d34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2224      	movs	r2, #36	; 0x24
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d139      	bne.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e033      	b.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dca:	2302      	movs	r3, #2
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f000 bef4 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 816a 	beq.w	80020d6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e02:	4bb3      	ldr	r3, [pc, #716]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0e:	4bb0      	ldr	r3, [pc, #704]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d159      	bne.n	8001ece <HAL_RCC_OscConfig+0xf6>
 8001e1a:	4bad      	ldr	r3, [pc, #692]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e26:	d152      	bne.n	8001ece <HAL_RCC_OscConfig+0xf6>
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001e3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_OscConfig+0x82>
 8001e54:	4b9e      	ldr	r3, [pc, #632]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0xae>
 8001e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e72:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e76:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001e82:	4b93      	ldr	r3, [pc, #588]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e8a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001e8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001e9a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f002 021f 	and.w	r2, r2, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 810c 	beq.w	80020d4 <HAL_RCC_OscConfig+0x2fc>
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f040 8106 	bne.w	80020d4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f000 be86 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x110>
 8001eda:	4b7d      	ldr	r3, [pc, #500]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e030      	b.n	8001f4a <HAL_RCC_OscConfig+0x172>
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x134>
 8001ef2:	4b77      	ldr	r3, [pc, #476]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a76      	ldr	r2, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a73      	ldr	r2, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01e      	b.n	8001f4a <HAL_RCC_OscConfig+0x172>
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x15a>
 8001f18:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6c      	ldr	r2, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e00b      	b.n	8001f4a <HAL_RCC_OscConfig+0x172>
 8001f32:	4b67      	ldr	r3, [pc, #412]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a66      	ldr	r2, [pc, #408]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a63      	ldr	r2, [pc, #396]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f023 020f 	bic.w	r2, r3, #15
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	495d      	ldr	r1, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d059      	beq.n	800201c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fdde 	bl	8000b28 <HAL_GetTick>
 8001f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f72:	f7fe fdd9 	bl	8000b28 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d902      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	f000 be29 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
 8001f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001f9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x1e2>
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x20e>
 8001fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fbe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001fee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ffa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0220 	orr.w	r2, r2, #32
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ab      	beq.n	8001f72 <HAL_RCC_OscConfig+0x19a>
 800201a:	e05c      	b.n	80020d6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fd84 	bl	8000b28 <HAL_GetTick>
 8002020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002026:	f7fe fd7f 	bl	8000b28 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d902      	bls.n	800203c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	f000 bdcf 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002050:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x296>
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x2c2>
 800206e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002072:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002086:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800208a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCC_OscConfig+0x2f8>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800209e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020b2:	fab2 f282 	clz	r2, r2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f042 0220 	orr.w	r2, r2, #32
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ab      	bne.n	8002026 <HAL_RCC_OscConfig+0x24e>
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_OscConfig+0x2fe>
 80020d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 816f 	beq.w	80023c4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020e6:	4bd0      	ldr	r3, [pc, #832]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020f2:	4bcd      	ldr	r3, [pc, #820]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d16c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x400>
 80020fe:	4bca      	ldr	r3, [pc, #808]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d166      	bne.n	80021d8 <HAL_RCC_OscConfig+0x400>
 800210a:	2302      	movs	r3, #2
 800210c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800211c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x362>
 8002134:	4bbc      	ldr	r3, [pc, #752]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	e013      	b.n	8002162 <HAL_RCC_OscConfig+0x38a>
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002152:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800215e:	4bb2      	ldr	r3, [pc, #712]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2202      	movs	r2, #2
 8002164:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002168:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002174:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f042 0220 	orr.w	r2, r2, #32
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f002 021f 	and.w	r2, r2, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f202 	lsl.w	r2, r1, r2
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_RCC_OscConfig+0x3cc>
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d002      	beq.n	80021a4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 bd1b 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	21f8      	movs	r1, #248	; 0xf8
 80021b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021bc:	fa91 f1a1 	rbit	r1, r1
 80021c0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021c8:	fab1 f181 	clz	r1, r1
 80021cc:	b2c9      	uxtb	r1, r1
 80021ce:	408b      	lsls	r3, r1
 80021d0:	4995      	ldr	r1, [pc, #596]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e0f5      	b.n	80023c4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8085 	beq.w	80022ee <HAL_RCC_OscConfig+0x516>
 80021e4:	2301      	movs	r3, #1
 80021e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80021f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fc8a 	bl	8000b28 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fc85 	bl	8000b28 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	f000 bcd5 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
 8002230:	2302      	movs	r3, #2
 8002232:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002242:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x488>
 800225a:	4b73      	ldr	r3, [pc, #460]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x4b0>
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002272:	2302      	movs	r3, #2
 8002274:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002278:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2202      	movs	r2, #2
 800228a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800228e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002292:	fa92 f2a2 	rbit	r2, r2
 8002296:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800229a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800229e:	fab2 f282 	clz	r2, r2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f042 0220 	orr.w	r2, r2, #32
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f002 021f 	and.w	r2, r2, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0af      	beq.n	800221a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	21f8      	movs	r1, #248	; 0xf8
 80022ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022d2:	fa91 f1a1 	rbit	r1, r1
 80022d6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022da:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022de:	fab1 f181 	clz	r1, r1
 80022e2:	b2c9      	uxtb	r1, r1
 80022e4:	408b      	lsls	r3, r1
 80022e6:	4950      	ldr	r1, [pc, #320]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e06a      	b.n	80023c4 <HAL_RCC_OscConfig+0x5ec>
 80022ee:	2301      	movs	r3, #1
 80022f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002304:	fab3 f383 	clz	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800230e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	461a      	mov	r2, r3
 8002316:	2300      	movs	r3, #0
 8002318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fc05 	bl	8000b28 <HAL_GetTick>
 800231e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fc00 	bl	8000b28 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d902      	bls.n	800233a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	f000 bc50 	b.w	8002bda <HAL_RCC_OscConfig+0xe02>
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800234c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d102      	bne.n	800236a <HAL_RCC_OscConfig+0x592>
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	e013      	b.n	8002392 <HAL_RCC_OscConfig+0x5ba>
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800237c:	2302      	movs	r3, #2
 800237e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x650>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	2202      	movs	r2, #2
 8002394:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002398:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800239c:	fa92 f2a2 	rbit	r2, r2
 80023a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f002 021f 	and.w	r2, r2, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1af      	bne.n	8002324 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80da 	beq.w	8002588 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d069      	beq.n	80024b2 <HAL_RCC_OscConfig+0x6da>
 80023de:	2301      	movs	r3, #1
 80023e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80023f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_OscConfig+0x654>)
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2301      	movs	r3, #1
 8002406:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7fe fb8e 	bl	8000b28 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002410:	e00e      	b.n	8002430 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fb89 	bl	8000b28 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d906      	bls.n	8002430 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e3d9      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	10908120 	.word	0x10908120
 8002430:	2302      	movs	r3, #2
 8002432:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002442:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002446:	2202      	movs	r2, #2
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002470:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	4ba5      	ldr	r3, [pc, #660]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002476:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800247a:	2102      	movs	r1, #2
 800247c:	6019      	str	r1, [r3, #0]
 800247e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f1a3 	rbit	r1, r3
 8002488:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800248c:	6019      	str	r1, [r3, #0]
  return result;
 800248e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0b0      	beq.n	8002412 <HAL_RCC_OscConfig+0x63a>
 80024b0:	e06a      	b.n	8002588 <HAL_RCC_OscConfig+0x7b0>
 80024b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b8c      	ldr	r3, [pc, #560]	; (800270c <HAL_RCC_OscConfig+0x934>)
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	461a      	mov	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e4:	f7fe fb20 	bl	8000b28 <HAL_GetTick>
 80024e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e009      	b.n	8002502 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fb1b 	bl	8000b28 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e36b      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 8002502:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002536:	2202      	movs	r2, #2
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	fa93 f2a3 	rbit	r2, r3
 8002544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002548:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800254c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002552:	2102      	movs	r1, #2
 8002554:	6019      	str	r1, [r3, #0]
 8002556:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f1a3 	rbit	r1, r3
 8002560:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002564:	6019      	str	r1, [r3, #0]
  return result;
 8002566:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
 8002572:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1b2      	bne.n	80024ee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8158 	beq.w	8002848 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d112      	bne.n	80025d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f107 0308 	add.w	r3, r7, #8
 80025c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b4f      	ldr	r3, [pc, #316]	; (8002710 <HAL_RCC_OscConfig+0x938>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11a      	bne.n	8002612 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x938>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_RCC_OscConfig+0x938>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e8:	f7fe fa9e 	bl	8000b28 <HAL_GetTick>
 80025ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e009      	b.n	8002606 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fa99 	bl	8000b28 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e2e9      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b42      	ldr	r3, [pc, #264]	; (8002710 <HAL_RCC_OscConfig+0x938>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ef      	beq.n	80025f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x852>
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a39      	ldr	r2, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e02f      	b.n	800268a <HAL_RCC_OscConfig+0x8b2>
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x876>
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a30      	ldr	r2, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e01d      	b.n	800268a <HAL_RCC_OscConfig+0x8b2>
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b05      	cmp	r3, #5
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x89a>
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e00b      	b.n	800268a <HAL_RCC_OscConfig+0x8b2>
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d06b      	beq.n	800276c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002694:	f7fe fa48 	bl	8000b28 <HAL_GetTick>
 8002698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fa43 	bl	8000b28 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e291      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 80026b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026ba:	2202      	movs	r2, #2
 80026bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026e4:	601a      	str	r2, [r3, #0]
  return result;
 80026e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d109      	bne.n	8002714 <HAL_RCC_OscConfig+0x93c>
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <HAL_RCC_OscConfig+0x930>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x958>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	10908120 	.word	0x10908120
 8002710:	40007000 	.word	0x40007000
 8002714:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002718:	2202      	movs	r2, #2
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	4bbb      	ldr	r3, [pc, #748]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002734:	2102      	movs	r1, #2
 8002736:	6011      	str	r1, [r2, #0]
 8002738:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	fa92 f1a2 	rbit	r1, r2
 8002742:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002746:	6011      	str	r1, [r2, #0]
  return result;
 8002748:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d099      	beq.n	800269e <HAL_RCC_OscConfig+0x8c6>
 800276a:	e063      	b.n	8002834 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7fe f9dc 	bl	8000b28 <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002774:	e00b      	b.n	800278e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe f9d7 	bl	8000b28 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e225      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 800278e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002792:	2202      	movs	r2, #2
 8002794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	fa93 f2a3 	rbit	r2, r3
 80027a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027aa:	2202      	movs	r2, #2
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa93 f2a3 	rbit	r2, r3
 80027b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027bc:	601a      	str	r2, [r3, #0]
  return result;
 80027be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d102      	bne.n	80027de <HAL_RCC_OscConfig+0xa06>
 80027d8:	4b90      	ldr	r3, [pc, #576]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	e00d      	b.n	80027fa <HAL_RCC_OscConfig+0xa22>
 80027de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	fa93 f2a3 	rbit	r2, r3
 80027f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027fe:	2102      	movs	r1, #2
 8002800:	6011      	str	r1, [r2, #0]
 8002802:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fa92 f1a2 	rbit	r1, r2
 800280c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1a0      	bne.n	8002776 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002834:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283c:	4b77      	ldr	r3, [pc, #476]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	4a76      	ldr	r2, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002846:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 81c2 	beq.w	8002bd8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	f000 819c 	beq.w	8002b9a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b02      	cmp	r3, #2
 800286a:	f040 8114 	bne.w	8002a96 <HAL_RCC_OscConfig+0xcbe>
 800286e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002886:	601a      	str	r2, [r3, #0]
  return result;
 8002888:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800288c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	461a      	mov	r2, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f940 	bl	8000b28 <HAL_GetTick>
 80028a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fe f93b 	bl	8000b28 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e18b      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 80028c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_RCC_OscConfig+0xb24>
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0xb5c>
 80028fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800291a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800293c:	6011      	str	r1, [r2, #0]
 800293e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	fa92 f1a2 	rbit	r1, r2
 8002948:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800294c:	6011      	str	r1, [r2, #0]
  return result;
 800294e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f042 0220 	orr.w	r2, r2, #32
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f002 021f 	and.w	r2, r2, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d19e      	bne.n	80028ae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	430b      	orrs	r3, r1
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	fa93 f2a3 	rbit	r2, r3
 80029a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029a4:	601a      	str	r2, [r3, #0]
  return result;
 80029a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2301      	movs	r3, #1
 80029c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe f8b1 	bl	8000b28 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ca:	e009      	b.n	80029e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe f8ac 	bl	8000b28 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0fc      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 80029e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	fa93 f2a3 	rbit	r2, r3
 80029f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029f8:	601a      	str	r2, [r3, #0]
  return result;
 80029fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0xc48>
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <HAL_RCC_OscConfig+0xc44>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	e01e      	b.n	8002a58 <HAL_RCC_OscConfig+0xc80>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	fa93 f2a3 	rbit	r2, r3
 8002a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0xe0c>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a60:	6011      	str	r1, [r2, #0]
 8002a62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	fa92 f1a2 	rbit	r1, r2
 8002a6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a70:	6011      	str	r1, [r2, #0]
  return result;
 8002a72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	f042 0220 	orr.w	r2, r2, #32
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	f002 021f 	and.w	r2, r2, #31
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d09b      	beq.n	80029cc <HAL_RCC_OscConfig+0xbf4>
 8002a94:	e0a0      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe00>
 8002a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	fa93 f2a3 	rbit	r2, r3
 8002aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aae:	601a      	str	r2, [r3, #0]
  return result;
 8002ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe f82c 	bl	8000b28 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad4:	e009      	b.n	8002aea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe f827 	bl	8000b28 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e077      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
 8002aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	fa93 f2a3 	rbit	r2, r3
 8002afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b02:	601a      	str	r2, [r3, #0]
  return result;
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0xd4c>
 8002b1e:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <HAL_RCC_OscConfig+0xe0c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	e01b      	b.n	8002b5c <HAL_RCC_OscConfig+0xd84>
 8002b24:	f107 0320 	add.w	r3, r7, #32
 8002b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f107 0320 	add.w	r3, r7, #32
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	fa93 f2a3 	rbit	r2, r3
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f107 0318 	add.w	r3, r7, #24
 8002b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f107 0318 	add.w	r3, r7, #24
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f2a3 	rbit	r2, r3
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0xe0c>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f107 0210 	add.w	r2, r7, #16
 8002b60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	f107 0210 	add.w	r2, r7, #16
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	fa92 f1a2 	rbit	r1, r2
 8002b70:	f107 020c 	add.w	r2, r7, #12
 8002b74:	6011      	str	r1, [r2, #0]
  return result;
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	fab2 f282 	clz	r2, r2
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f042 0220 	orr.w	r2, r2, #32
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f002 021f 	and.w	r2, r2, #31
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d19e      	bne.n	8002ad6 <HAL_RCC_OscConfig+0xcfe>
 8002b98:	e01e      	b.n	8002bd8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e018      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_OscConfig+0xe0c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b09e      	sub	sp, #120	; 0x78
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e162      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b90      	ldr	r3, [pc, #576]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b8d      	ldr	r3, [pc, #564]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	498b      	ldr	r1, [pc, #556]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e14a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b82      	ldr	r3, [pc, #520]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	497f      	ldr	r1, [pc, #508]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80dc 	beq.w	8002e14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d13c      	bne.n	8002cde <HAL_RCC_ClockConfig+0xf6>
 8002c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xa6>
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	e00f      	b.n	8002cae <HAL_RCC_ClockConfig+0xc6>
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002caa:	4b67      	ldr	r3, [pc, #412]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cb6:	fa92 f2a2 	rbit	r2, r2
 8002cba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cbe:	fab2 f282 	clz	r2, r2
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	f042 0220 	orr.w	r2, r2, #32
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f002 021f 	and.w	r2, r2, #31
 8002cce:	2101      	movs	r1, #1
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d17b      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0f3      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d13c      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x178>
 8002ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x128>
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_ClockConfig+0x148>
 8002d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d34:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d38:	fa92 f2a2 	rbit	r2, r2
 8002d3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0220 	orr.w	r2, r2, #32
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d13a      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0b2      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
 8002d60:	2302      	movs	r3, #2
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x1a0>
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	e00d      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1bc>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
 8002d94:	2302      	movs	r3, #2
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2202      	movs	r2, #2
 8002da6:	61ba      	str	r2, [r7, #24]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	617a      	str	r2, [r7, #20]
  return result;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	fab2 f282 	clz	r2, r2
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f002 021f 	and.w	r2, r2, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e079      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	491a      	ldr	r1, [pc, #104]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de4:	f7fd fea0 	bl	8000b28 <HAL_GetTick>
 8002de8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dec:	f7fd fe9c 	bl	8000b28 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e061      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 020c 	and.w	r2, r3, #12
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d1eb      	bne.n	8002dec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d214      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 0207 	bic.w	r2, r3, #7
 8002e2a:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_ClockConfig+0x25c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e040      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x2de>
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	491a      	ldr	r1, [pc, #104]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4912      	ldr	r1, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e8a:	f000 f829 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4601      	mov	r1, r0
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e98:	22f0      	movs	r2, #240	; 0xf0
 8002e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	40d3      	lsrs	r3, r2
 8002eae:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x2ec>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <HAL_RCC_ClockConfig+0x2f0>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCC_ClockConfig+0x2f4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fdee 	bl	8000aa0 <HAL_InitTick>
  
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3778      	adds	r7, #120	; 0x78
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	0800425c 	.word	0x0800425c
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b08b      	sub	sp, #44	; 0x2c
 8002ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x30>
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0x36>
 8002f0e:	e03c      	b.n	8002f8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f12:	623b      	str	r3, [r7, #32]
      break;
 8002f14:	e03c      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	fa92 f2a2 	rbit	r2, r2
 8002f28:	607a      	str	r2, [r7, #4]
  return result;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	40d3      	lsrs	r3, r2
 8002f34:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	220f      	movs	r2, #15
 8002f44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	fa92 f2a2 	rbit	r2, r2
 8002f4c:	60fa      	str	r2, [r7, #12]
  return result;
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	fab2 f282 	clz	r2, r2
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	40d3      	lsrs	r3, r2
 8002f58:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	e004      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	623b      	str	r3, [r7, #32]
      break;
 8002f88:	e002      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f8c:	623b      	str	r3, [r7, #32]
      break;
 8002f8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f90:	6a3b      	ldr	r3, [r7, #32]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	372c      	adds	r7, #44	; 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	0800426c 	.word	0x0800426c
 8002fac:	0800427c 	.word	0x0800427c
 8002fb0:	003d0900 	.word	0x003d0900

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	; 0x48
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80d0 	beq.w	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd8:	4b8e      	ldr	r3, [pc, #568]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10e      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	4a8a      	ldr	r2, [pc, #552]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fee:	61d3      	str	r3, [r2, #28]
 8002ff0:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b82      	ldr	r3, [pc, #520]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a81      	ldr	r2, [pc, #516]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fd85 	bl	8000b28 <HAL_GetTick>
 800301e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fd81 	bl	8000b28 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0ea      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b78      	ldr	r3, [pc, #480]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b74      	ldr	r3, [pc, #464]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	2b00      	cmp	r3, #0
 800304e:	d07d      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800305a:	429a      	cmp	r2, r3
 800305c:	d076      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305e:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	4b66      	ldr	r3, [pc, #408]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	461a      	mov	r2, r3
 8003088:	2301      	movs	r3, #1
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b0:	4a58      	ldr	r2, [pc, #352]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d045      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd fd32 	bl	8000b28 <HAL_GetTick>
 80030c4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00a      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fd fd2e 	bl	8000b28 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e095      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x256>
 80030de:	2302      	movs	r3, #2
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	2302      	movs	r3, #2
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	61fb      	str	r3, [r7, #28]
  return result;
 80030f6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f043 0302 	orr.w	r3, r3, #2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d102      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	e007      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2202      	movs	r2, #2
 8003124:	613a      	str	r2, [r7, #16]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	fa92 f2a2 	rbit	r2, r2
 800312c:	60fa      	str	r2, [r7, #12]
  return result;
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	fab2 f282 	clz	r2, r2
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f202 	lsl.w	r2, r1, r2
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0bd      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800314c:	4b31      	ldr	r3, [pc, #196]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	492e      	ldr	r1, [pc, #184]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	4313      	orrs	r3, r2
 800315c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800315e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003162:	2b01      	cmp	r3, #1
 8003164:	d105      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003170:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4922      	ldr	r1, [pc, #136]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318c:	4313      	orrs	r3, r2
 800318e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f023 0210 	bic.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	491a      	ldr	r1, [pc, #104]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	4913      	ldr	r1, [pc, #76]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	490b      	ldr	r1, [pc, #44]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4904      	ldr	r1, [pc, #16]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	4313      	orrs	r3, r2
 8003206:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3748      	adds	r7, #72	; 0x48
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	10908100 	.word	0x10908100

08003220 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e083      	b.n	800333a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7f5b      	ldrb	r3, [r3, #29]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d105      	bne.n	8003248 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fb62 	bl	800090c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	22ca      	movs	r2, #202	; 0xca
 8003254:	625a      	str	r2, [r3, #36]	; 0x24
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2253      	movs	r2, #83	; 0x53
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f897 	bl	8003392 <RTC_EnterInitMode>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	22ff      	movs	r2, #255	; 0xff
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e05e      	b.n	800333a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6899      	ldr	r1, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6919      	ldr	r1, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	041a      	lsls	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10e      	bne.n	8003308 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f829 	bl	8003342 <HAL_RTC_WaitForSynchro>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	22ff      	movs	r2, #255	; 0xff
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2204      	movs	r2, #4
 8003302:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e018      	b.n	800333a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800335e:	f7fd fbe3 	bl	8000b28 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003364:	e009      	b.n	800337a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fd fbdf 	bl	8000b28 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d119      	bne.n	80033e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80033b6:	f7fd fbb7 	bl	8000b28 <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033bc:	e009      	b.n	80033d2 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033be:	f7fd fbb3 	bl	8000b28 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033cc:	d901      	bls.n	80033d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e007      	b.n	80033e2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e01d      	b.n	8003438 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7fd faa1 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f000 f9b9 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e01d      	b.n	800348e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f815 	bl	8003496 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f000 f98e 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e06c      	b.n	80035a0 <HAL_TIM_OC_ConfigChannel+0xf4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b14      	cmp	r3, #20
 80034da:	d857      	bhi.n	800358c <HAL_TIM_OC_ConfigChannel+0xe0>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003539 	.word	0x08003539
 80034e8:	0800358d 	.word	0x0800358d
 80034ec:	0800358d 	.word	0x0800358d
 80034f0:	0800358d 	.word	0x0800358d
 80034f4:	08003547 	.word	0x08003547
 80034f8:	0800358d 	.word	0x0800358d
 80034fc:	0800358d 	.word	0x0800358d
 8003500:	0800358d 	.word	0x0800358d
 8003504:	08003555 	.word	0x08003555
 8003508:	0800358d 	.word	0x0800358d
 800350c:	0800358d 	.word	0x0800358d
 8003510:	0800358d 	.word	0x0800358d
 8003514:	08003563 	.word	0x08003563
 8003518:	0800358d 	.word	0x0800358d
 800351c:	0800358d 	.word	0x0800358d
 8003520:	0800358d 	.word	0x0800358d
 8003524:	08003571 	.word	0x08003571
 8003528:	0800358d 	.word	0x0800358d
 800352c:	0800358d 	.word	0x0800358d
 8003530:	0800358d 	.word	0x0800358d
 8003534:	0800357f 	.word	0x0800357f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f9a6 	bl	8003890 <TIM_OC1_SetConfig>
      break;
 8003544:	e023      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fa25 	bl	800399c <TIM_OC2_SetConfig>
      break;
 8003552:	e01c      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa9e 	bl	8003a9c <TIM_OC3_SetConfig>
      break;
 8003560:	e015      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fb15 	bl	8003b98 <TIM_OC4_SetConfig>
      break;
 800356e:	e00e      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fb72 	bl	8003c60 <TIM_OC5_SetConfig>
      break;
 800357c:	e007      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fbc9 	bl	8003d1c <TIM_OC6_SetConfig>
      break;
 800358a:	e000      	b.n	800358e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800358c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_ConfigClockSource+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0a8      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x16a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d067      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x124>
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	d80b      	bhi.n	8003618 <HAL_TIM_ConfigClockSource+0x70>
 8003600:	2b10      	cmp	r3, #16
 8003602:	d073      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x144>
 8003604:	2b10      	cmp	r3, #16
 8003606:	d802      	bhi.n	800360e <HAL_TIM_ConfigClockSource+0x66>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d06f      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800360c:	e078      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800360e:	2b20      	cmp	r3, #32
 8003610:	d06c      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x144>
 8003612:	2b30      	cmp	r3, #48	; 0x30
 8003614:	d06a      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003616:	e073      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d00d      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0x90>
 800361c:	2b70      	cmp	r3, #112	; 0x70
 800361e:	d804      	bhi.n	800362a <HAL_TIM_ConfigClockSource+0x82>
 8003620:	2b50      	cmp	r3, #80	; 0x50
 8003622:	d033      	beq.n	800368c <HAL_TIM_ConfigClockSource+0xe4>
 8003624:	2b60      	cmp	r3, #96	; 0x60
 8003626:	d041      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003628:	e06a      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d066      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003634:	d017      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003636:	e063      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6899      	ldr	r1, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f000 fcca 	bl	8003fe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800365a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
      break;
 8003664:	e04c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f000 fcb3 	bl	8003fe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003688:	609a      	str	r2, [r3, #8]
      break;
 800368a:	e039      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 fc27 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2150      	movs	r1, #80	; 0x50
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fc80 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80036aa:	e029      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	461a      	mov	r2, r3
 80036ba:	f000 fc46 	bl	8003f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2160      	movs	r1, #96	; 0x60
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fc70 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80036ca:	e019      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	461a      	mov	r2, r3
 80036da:	f000 fc07 	bl	8003eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2140      	movs	r1, #64	; 0x40
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fc60 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80036ea:	e009      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fc57 	bl	8003faa <TIM_ITRx_SetConfig>
      break;
 80036fc:	e000      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80036fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_TIM_SlaveConfigSynchro+0x18>
 800372e:	2302      	movs	r3, #2
 8003730:	e031      	b.n	8003796 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb49 	bl	8003ddc <TIM_SlaveTimer_SetConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e018      	b.n	8003796 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003772:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003782:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a32      	ldr	r2, [pc, #200]	; (800387c <TIM_Base_SetConfig+0xdc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_Base_SetConfig+0x28>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x28>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a2f      	ldr	r2, [pc, #188]	; (8003880 <TIM_Base_SetConfig+0xe0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a27      	ldr	r2, [pc, #156]	; (800387c <TIM_Base_SetConfig+0xdc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <TIM_Base_SetConfig+0x6a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d00f      	beq.n	800380a <TIM_Base_SetConfig+0x6a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a24      	ldr	r2, [pc, #144]	; (8003880 <TIM_Base_SetConfig+0xe0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_Base_SetConfig+0x6a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a23      	ldr	r2, [pc, #140]	; (8003884 <TIM_Base_SetConfig+0xe4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_Base_SetConfig+0x6a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a22      	ldr	r2, [pc, #136]	; (8003888 <TIM_Base_SetConfig+0xe8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_Base_SetConfig+0x6a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a21      	ldr	r2, [pc, #132]	; (800388c <TIM_Base_SetConfig+0xec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d108      	bne.n	800381c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0e      	ldr	r2, [pc, #56]	; (800387c <TIM_Base_SetConfig+0xdc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_Base_SetConfig+0xc0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <TIM_Base_SetConfig+0xe4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_Base_SetConfig+0xc0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <TIM_Base_SetConfig+0xe8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_Base_SetConfig+0xc0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0c      	ldr	r2, [pc, #48]	; (800388c <TIM_Base_SetConfig+0xec>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	615a      	str	r2, [r3, #20]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00
 8003880:	40000400 	.word	0x40000400
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0302 	bic.w	r3, r3, #2
 80038dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a28      	ldr	r2, [pc, #160]	; (800398c <TIM_OC1_SetConfig+0xfc>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_OC1_SetConfig+0x78>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a27      	ldr	r2, [pc, #156]	; (8003990 <TIM_OC1_SetConfig+0x100>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_OC1_SetConfig+0x78>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a26      	ldr	r2, [pc, #152]	; (8003994 <TIM_OC1_SetConfig+0x104>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_OC1_SetConfig+0x78>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <TIM_OC1_SetConfig+0x108>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10c      	bne.n	8003922 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0308 	bic.w	r3, r3, #8
 800390e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <TIM_OC1_SetConfig+0xfc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00b      	beq.n	8003942 <TIM_OC1_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a18      	ldr	r2, [pc, #96]	; (8003990 <TIM_OC1_SetConfig+0x100>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d007      	beq.n	8003942 <TIM_OC1_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <TIM_OC1_SetConfig+0x104>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d003      	beq.n	8003942 <TIM_OC1_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <TIM_OC1_SetConfig+0x108>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d111      	bne.n	8003966 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	621a      	str	r2, [r3, #32]
}
 8003980:	bf00      	nop
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800

0800399c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f023 0210 	bic.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0320 	bic.w	r3, r3, #32
 80039ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <TIM_OC2_SetConfig+0xf0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10d      	bne.n	8003a1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <TIM_OC2_SetConfig+0xf0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_OC2_SetConfig+0xa0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <TIM_OC2_SetConfig+0xf4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_OC2_SetConfig+0xa0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <TIM_OC2_SetConfig+0xf8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_OC2_SetConfig+0xa0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <TIM_OC2_SetConfig+0xfc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d113      	bne.n	8003a64 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a42:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a4a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40014400 	.word	0x40014400
 8003a98:	40014800 	.word	0x40014800

08003a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <TIM_OC3_SetConfig+0xec>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10d      	bne.n	8003b1a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <TIM_OC3_SetConfig+0xec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <TIM_OC3_SetConfig+0xf0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <TIM_OC3_SetConfig+0xf4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC3_SetConfig+0x9e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <TIM_OC3_SetConfig+0xf8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d113      	bne.n	8003b62 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	031b      	lsls	r3, r3, #12
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <TIM_OC4_SetConfig+0xb8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_OC4_SetConfig+0x7c>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <TIM_OC4_SetConfig+0xbc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <TIM_OC4_SetConfig+0x7c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <TIM_OC4_SetConfig+0xc0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_OC4_SetConfig+0x7c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <TIM_OC4_SetConfig+0xc4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d109      	bne.n	8003c28 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800

08003c60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ca4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <TIM_OC5_SetConfig+0xac>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_OC5_SetConfig+0x72>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <TIM_OC5_SetConfig+0xb0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC5_SetConfig+0x72>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <TIM_OC5_SetConfig+0xb4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC5_SetConfig+0x72>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <TIM_OC5_SetConfig+0xb8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d109      	bne.n	8003ce6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	621a      	str	r2, [r3, #32]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	051b      	lsls	r3, r3, #20
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <TIM_OC6_SetConfig+0xb0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_OC6_SetConfig+0x74>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <TIM_OC6_SetConfig+0xb4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_OC6_SetConfig+0x74>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <TIM_OC6_SetConfig+0xb8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_OC6_SetConfig+0x74>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <TIM_OC6_SetConfig+0xbc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d109      	bne.n	8003da4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800

08003ddc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e06:	f023 0307 	bic.w	r3, r3, #7
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b30      	cmp	r3, #48	; 0x30
 8003e24:	d05c      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x104>
 8003e26:	2b30      	cmp	r3, #48	; 0x30
 8003e28:	d806      	bhi.n	8003e38 <TIM_SlaveTimer_SetConfig+0x5c>
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d058      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x104>
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d056      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x104>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d054      	beq.n	8003ee0 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8003e36:	e054      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d03d      	beq.n	8003eb8 <TIM_SlaveTimer_SetConfig+0xdc>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d802      	bhi.n	8003e46 <TIM_SlaveTimer_SetConfig+0x6a>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d010      	beq.n	8003e66 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8003e44:	e04d      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8003e46:	2b60      	cmp	r3, #96	; 0x60
 8003e48:	d040      	beq.n	8003ecc <TIM_SlaveTimer_SetConfig+0xf0>
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d000      	beq.n	8003e50 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8003e4e:	e048      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68d9      	ldr	r1, [r3, #12]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f000 f8be 	bl	8003fe0 <TIM_ETR_SetConfig>
      break;
 8003e64:	e03d      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d101      	bne.n	8003e72 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e038      	b.n	8003ee4 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e98:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
      break;
 8003eb6:	e014      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f000 f811 	bl	8003eec <TIM_TI1_ConfigInputStage>
      break;
 8003eca:	e00a      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f000 f836 	bl	8003f4a <TIM_TI2_ConfigInputStage>
      break;
 8003ede:	e000      	b.n	8003ee2 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8003ee0:	bf00      	nop
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f023 030a 	bic.w	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0210 	bic.w	r2, r3, #16
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	031b      	lsls	r3, r3, #12
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f043 0307 	orr.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021a      	lsls	r2, r3, #8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	431a      	orrs	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4313      	orrs	r3, r2
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	609a      	str	r2, [r3, #8]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004034:	2302      	movs	r3, #2
 8004036:	e054      	b.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d108      	bne.n	8004074 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004068:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a17      	ldr	r2, [pc, #92]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d00e      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a0:	d009      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d004      	beq.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10c      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40014000 	.word	0x40014000

080040fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004114:	2302      	movs	r3, #2
 8004116:	e060      	b.n	80041da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d115      	bne.n	80041c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	051b      	lsls	r3, r3, #20
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00

080041ec <__libc_init_array>:
 80041ec:	b570      	push	{r4, r5, r6, lr}
 80041ee:	4e0d      	ldr	r6, [pc, #52]	; (8004224 <__libc_init_array+0x38>)
 80041f0:	4c0d      	ldr	r4, [pc, #52]	; (8004228 <__libc_init_array+0x3c>)
 80041f2:	1ba4      	subs	r4, r4, r6
 80041f4:	10a4      	asrs	r4, r4, #2
 80041f6:	2500      	movs	r5, #0
 80041f8:	42a5      	cmp	r5, r4
 80041fa:	d109      	bne.n	8004210 <__libc_init_array+0x24>
 80041fc:	4e0b      	ldr	r6, [pc, #44]	; (800422c <__libc_init_array+0x40>)
 80041fe:	4c0c      	ldr	r4, [pc, #48]	; (8004230 <__libc_init_array+0x44>)
 8004200:	f000 f820 	bl	8004244 <_init>
 8004204:	1ba4      	subs	r4, r4, r6
 8004206:	10a4      	asrs	r4, r4, #2
 8004208:	2500      	movs	r5, #0
 800420a:	42a5      	cmp	r5, r4
 800420c:	d105      	bne.n	800421a <__libc_init_array+0x2e>
 800420e:	bd70      	pop	{r4, r5, r6, pc}
 8004210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004214:	4798      	blx	r3
 8004216:	3501      	adds	r5, #1
 8004218:	e7ee      	b.n	80041f8 <__libc_init_array+0xc>
 800421a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800421e:	4798      	blx	r3
 8004220:	3501      	adds	r5, #1
 8004222:	e7f2      	b.n	800420a <__libc_init_array+0x1e>
 8004224:	0800428c 	.word	0x0800428c
 8004228:	0800428c 	.word	0x0800428c
 800422c:	0800428c 	.word	0x0800428c
 8004230:	08004290 	.word	0x08004290

08004234 <memset>:
 8004234:	4402      	add	r2, r0
 8004236:	4603      	mov	r3, r0
 8004238:	4293      	cmp	r3, r2
 800423a:	d100      	bne.n	800423e <memset+0xa>
 800423c:	4770      	bx	lr
 800423e:	f803 1b01 	strb.w	r1, [r3], #1
 8004242:	e7f9      	b.n	8004238 <memset+0x4>

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	bf00      	nop
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
