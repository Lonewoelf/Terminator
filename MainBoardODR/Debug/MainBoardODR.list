
MainBoardODR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000513c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f4  080052f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080052f4  080052f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052f4  080052f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f4  080052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08005308  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08005308  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022e9  00000000  00000000  000310e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  000333d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  000343a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d277  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d087  00000000  00000000  000524bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad5ed  00000000  00000000  0005f546  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cb33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  0010cbb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052ac 	.word	0x080052ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052ac 	.word	0x080052ac

080001c8 <getBumperStatus>:
 *      Author: Madita
 */
#include "bumper.h"
#include "main.h"

BUMPER_STATUS getBumperStatus(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, BUMPER_Pin) == GPIO_PIN_SET){
 80001cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d4:	f002 fab6 	bl	8002744 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d101      	bne.n	80001e2 <getBumperStatus+0x1a>
		return BUMPER_OK;
 80001de:	2300      	movs	r3, #0
 80001e0:	e000      	b.n	80001e4 <getBumperStatus+0x1c>
	}
	return BUMPER_ERROR;
 80001e2:	2301      	movs	r3, #1
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <HAL_ADC_ConvCpltCallback>:
	for (i = 0; i < len; i++)
		ITM_SendChar((*ptr++));
	return len;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	__NOP();
 80001f0:	bf00      	nop
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr

080001fe <HAL_TIM_PeriodElapsedCallback>:
		MOTOR_IN_2_1_Pin,
		MOTOR_IN_2_2_Pin,
		MOTOR_IN_3_1_Pin,
		MOTOR_IN_3_2_Pin};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 80001fe:	b480      	push	{r7}
 8000200:	b083      	sub	sp, #12
 8000202:	af00      	add	r7, sp, #0
 8000204:	6078      	str	r0, [r7, #4]
//			} else {
//				HAL_GPIO_WritePin(pwmPinOutBank[pwmOutput], pwmPinOut[pwmOutput], 1);
//			}
//		}
//	}
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fdeb 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f82f 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 fb0b 	bl	800083c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000226:	f000 f88d 	bl	8000344 <MX_ADC1_Init>
  MX_ADC2_Init();
 800022a:	f000 f8fb 	bl	8000424 <MX_ADC2_Init>
  MX_I2C1_Init();
 800022e:	f000 f957 	bl	80004e0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000232:	f000 f995 	bl	8000560 <MX_RTC_Init>
  MX_TIM1_Init();
 8000236:	f000 f9b9 	bl	80005ac <MX_TIM1_Init>
  MX_TIM2_Init();
 800023a:	f000 fa77 	bl	800072c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	uint32_t adc, adc2;

	BUMPER_STATUS bumper = BUMPER_NONE;
 800023e:	23ff      	movs	r3, #255	; 0xff
 8000240:	71fb      	strb	r3, [r7, #7]

	HAL_TIM_Base_Start_IT(&htim2);
 8000242:	480c      	ldr	r0, [pc, #48]	; (8000274 <main+0x60>)
 8000244:	f003 ff08 	bl	8004058 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);

	htim2.Instance->CCR1 = 25; //channel prescalers
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x60>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2219      	movs	r2, #25
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
	htim2.Instance->CCR2 = 75;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <main+0x60>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	224b      	movs	r2, #75	; 0x4b
 8000256:	639a      	str	r2, [r3, #56]	; 0x38
	htim2.Instance->CCR3 = 50;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <main+0x60>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2232      	movs	r2, #50	; 0x32
 800025e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		bumper = getBumperStatus();
 8000260:	f7ff ffb2 	bl	80001c8 <getBumperStatus>
 8000264:	4603      	mov	r3, r0
 8000266:	71fb      	strb	r3, [r7, #7]
//		}
		//HAL_ADC_PollForConversion(&hadc2, 1000);

		//	adc2 = HAL_ADC_GetValue(&hadc2);

		sensorReadValue(&hadc1, &hadc2);
 8000268:	4903      	ldr	r1, [pc, #12]	; (8000278 <main+0x64>)
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <main+0x68>)
 800026c:	f000 fb5e 	bl	800092c <sensorReadValue>
		bumper = getBumperStatus();
 8000270:	e7f6      	b.n	8000260 <main+0x4c>
 8000272:	bf00      	nop
 8000274:	2000018c 	.word	0x2000018c
 8000278:	20000040 	.word	0x20000040
 800027c:	200000dc 	.word	0x200000dc

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f005 f804 	bl	800529c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 031c 	add.w	r3, r7, #28
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	619a      	str	r2, [r3, #24]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002b6:	230a      	movs	r3, #10
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002ce:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fb89 	bl	80029f0 <HAL_RCC_OscConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002e4:	f000 fb1a 	bl	800091c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e8:	230f      	movs	r3, #15
 80002ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ec:	2302      	movs	r3, #2
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2101      	movs	r1, #1
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fa7b 	bl	8003800 <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000310:	f000 fb04 	bl	800091c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SystemClock_Config+0xc0>)
 8000316:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800031c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000320:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	463b      	mov	r3, r7
 8000328:	4618      	mov	r0, r3
 800032a:	f003 fc4f 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000334:	f000 faf2 	bl	800091c <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3758      	adds	r7, #88	; 0x58
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	00011020 	.word	0x00011020

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	; 0x28
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800034a:	f107 031c 	add.w	r3, r7, #28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
 8000364:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000366:	4b2e      	ldr	r3, [pc, #184]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000368:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000370:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_ADC1_Init+0xdc>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xdc>)
 800038a:	2200      	movs	r2, #0
 800038c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000390:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000392:	2200      	movs	r2, #0
 8000394:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000396:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xdc>)
 8000398:	2201      	movs	r2, #1
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039c:	4b20      	ldr	r3, [pc, #128]	; (8000420 <MX_ADC1_Init+0xdc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c2:	4817      	ldr	r0, [pc, #92]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003c4:	f000 fd90 	bl	8000ee8 <HAL_ADC_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80003ce:	f000 faa5 	bl	800091c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003d6:	f107 031c 	add.w	r3, r7, #28
 80003da:	4619      	mov	r1, r3
 80003dc:	4810      	ldr	r0, [pc, #64]	; (8000420 <MX_ADC1_Init+0xdc>)
 80003de:	f001 fda9 	bl	8001f34 <HAL_ADCEx_MultiModeConfigChannel>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80003e8:	f000 fa98 	bl	800091c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003f8:	2305      	movs	r3, #5
 80003fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_ADC1_Init+0xdc>)
 800040a:	f001 fad1 	bl	80019b0 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000414:	f000 fa82 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3728      	adds	r7, #40	; 0x28
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200000dc 	.word	0x200000dc

08000424 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	463b      	mov	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800043c:	4a27      	ldr	r2, [pc, #156]	; (80004dc <MX_ADC2_Init+0xb8>)
 800043e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000440:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000442:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000446:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000448:	4b23      	ldr	r3, [pc, #140]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000454:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000456:	2200      	movs	r2, #0
 8000458:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000464:	2200      	movs	r2, #0
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800046a:	2201      	movs	r2, #1
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000476:	2201      	movs	r2, #1
 8000478:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800047c:	2200      	movs	r2, #0
 800047e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000484:	2204      	movs	r2, #4
 8000486:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_ADC2_Init+0xb4>)
 800048a:	2200      	movs	r2, #0
 800048c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000494:	4810      	ldr	r0, [pc, #64]	; (80004d8 <MX_ADC2_Init+0xb4>)
 8000496:	f000 fd27 	bl	8000ee8 <HAL_ADC_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80004a0:	f000 fa3c 	bl	800091c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004a4:	2301      	movs	r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80004b0:	2305      	movs	r3, #5
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	4619      	mov	r1, r3
 80004c0:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_ADC2_Init+0xb4>)
 80004c2:	f001 fa75 	bl	80019b0 <HAL_ADC_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80004cc:	f000 fa26 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000040 	.word	0x20000040
 80004dc:	50000100 	.word	0x50000100

080004e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_I2C1_Init+0x74>)
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_I2C1_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_I2C1_Init+0x74>)
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <MX_I2C1_Init+0x7c>)
 80004ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 46;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_I2C1_Init+0x74>)
 80004f2:	222e      	movs	r2, #46	; 0x2e
 80004f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <MX_I2C1_Init+0x74>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <MX_I2C1_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_I2C1_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <MX_I2C1_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_I2C1_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <MX_I2C1_Init+0x74>)
 800051c:	f002 f942 	bl	80027a4 <HAL_I2C_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000526:	f000 f9f9 	bl	800091c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800052a:	2100      	movs	r1, #0
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <MX_I2C1_Init+0x74>)
 800052e:	f002 f9c8 	bl	80028c2 <HAL_I2CEx_ConfigAnalogFilter>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000538:	f000 f9f0 	bl	800091c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800053c:	2100      	movs	r1, #0
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_I2C1_Init+0x74>)
 8000540:	f002 fa0a 	bl	8002958 <HAL_I2CEx_ConfigDigitalFilter>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f9e7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090
 8000558:	40005400 	.word	0x40005400
 800055c:	2000090e 	.word	0x2000090e

08000560 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_RTC_Init+0x44>)
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <MX_RTC_Init+0x48>)
 8000568:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_RTC_Init+0x44>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_RTC_Init+0x44>)
 8000572:	227f      	movs	r2, #127	; 0x7f
 8000574:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_RTC_Init+0x44>)
 8000578:	22ff      	movs	r2, #255	; 0xff
 800057a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_RTC_Init+0x44>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_RTC_Init+0x44>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_RTC_Init+0x44>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_RTC_Init+0x44>)
 8000590:	f003 fc52 	bl	8003e38 <HAL_RTC_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800059a:	f000 f9bf 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000012c 	.word	0x2000012c
 80005a8:	40002800 	.word	0x40002800

080005ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09e      	sub	sp, #120	; 0x78
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	222c      	movs	r2, #44	; 0x2c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fe50 	bl	800529c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005fc:	4b49      	ldr	r3, [pc, #292]	; (8000724 <MX_TIM1_Init+0x178>)
 80005fe:	4a4a      	ldr	r2, [pc, #296]	; (8000728 <MX_TIM1_Init+0x17c>)
 8000600:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000602:	4b48      	ldr	r3, [pc, #288]	; (8000724 <MX_TIM1_Init+0x178>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b46      	ldr	r3, [pc, #280]	; (8000724 <MX_TIM1_Init+0x178>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800060e:	4b45      	ldr	r3, [pc, #276]	; (8000724 <MX_TIM1_Init+0x178>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b43      	ldr	r3, [pc, #268]	; (8000724 <MX_TIM1_Init+0x178>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800061a:	4b42      	ldr	r3, [pc, #264]	; (8000724 <MX_TIM1_Init+0x178>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000620:	4b40      	ldr	r3, [pc, #256]	; (8000724 <MX_TIM1_Init+0x178>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000626:	483f      	ldr	r0, [pc, #252]	; (8000724 <MX_TIM1_Init+0x178>)
 8000628:	f003 fceb 	bl	8004002 <HAL_TIM_Base_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000632:	f000 f973 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800063c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000640:	4619      	mov	r1, r3
 8000642:	4838      	ldr	r0, [pc, #224]	; (8000724 <MX_TIM1_Init+0x178>)
 8000644:	f003 ff9e 	bl	8004584 <HAL_TIM_ConfigClockSource>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800064e:	f000 f965 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000652:	4834      	ldr	r0, [pc, #208]	; (8000724 <MX_TIM1_Init+0x178>)
 8000654:	f003 fd2a 	bl	80040ac <HAL_TIM_PWM_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800065e:	f000 f95d 	bl	800091c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000666:	2300      	movs	r3, #0
 8000668:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800066a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066e:	4619      	mov	r1, r3
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <MX_TIM1_Init+0x178>)
 8000672:	f004 f840 	bl	80046f6 <HAL_TIM_SlaveConfigSynchro>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800067c:	f000 f94e 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000684:	2300      	movs	r3, #0
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000690:	4619      	mov	r1, r3
 8000692:	4824      	ldr	r0, [pc, #144]	; (8000724 <MX_TIM1_Init+0x178>)
 8000694:	f004 fcda 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800069e:	f000 f93d 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a2:	2360      	movs	r3, #96	; 0x60
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ae:	2300      	movs	r3, #0
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	4619      	mov	r1, r3
 80006c6:	4817      	ldr	r0, [pc, #92]	; (8000724 <MX_TIM1_Init+0x178>)
 80006c8:	f003 fe44 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80006d2:	f000 f923 	bl	800091c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM1_Init+0x178>)
 800070c:	f004 fd0c 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 8000716:	f000 f901 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	3778      	adds	r7, #120	; 0x78
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000014c 	.word	0x2000014c
 8000728:	40012c00 	.word	0x40012c00

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08e      	sub	sp, #56	; 0x38
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800075e:	4b36      	ldr	r3, [pc, #216]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000768:	2230      	movs	r2, #48	; 0x30
 800076a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_TIM2_Init+0x10c>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_TIM2_Init+0x10c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000784:	482c      	ldr	r0, [pc, #176]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000786:	f003 fc3c 	bl	8004002 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000790:	f000 f8c4 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	4619      	mov	r1, r3
 80007a0:	4825      	ldr	r0, [pc, #148]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007a2:	f003 feef 	bl	8004584 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007ac:	f000 f8b6 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007b0:	4821      	ldr	r0, [pc, #132]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007b2:	f003 fc7b 	bl	80040ac <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007bc:	f000 f8ae 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007d0:	f004 fc3c 	bl	800504c <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007da:	f000 f89f 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2360      	movs	r3, #96	; 0x60
 80007e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_TIM2_Init+0x10c>)
 80007f6:	f003 fdad 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000800:	f000 f88c 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2204      	movs	r2, #4
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_TIM2_Init+0x10c>)
 800080c:	f003 fda2 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000816:	f000 f881 	bl	800091c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	2208      	movs	r2, #8
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x10c>)
 8000822:	f003 fd97 	bl	8004354 <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800082c:	f000 f876 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000018c 	.word	0x2000018c

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0xd8>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a29      	ldr	r2, [pc, #164]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0xd8>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 8000882:	2200      	movs	r2, #0
 8000884:	f648 410e 	movw	r1, #35854	; 0x8c0e
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f001 ff72 	bl	8002774 <HAL_GPIO_WritePin>
                          |MOTOR_IN_3_1_Pin|MOTOR_IN_1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN_1_1_Pin|MOTOR_IN_2_2_Pin|MOTOR_IN_2_1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2138      	movs	r1, #56	; 0x38
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <MX_GPIO_Init+0xdc>)
 8000896:	f001 ff6d 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SELECT_2_Pin MUX_SELECT_1_Pin MUX_SELECT_3_Pin MOTOR_IN_3_2_Pin 
                           MOTOR_IN_3_1_Pin MOTOR_IN_1_2_Pin */
  GPIO_InitStruct.Pin = MUX_SELECT_2_Pin|MUX_SELECT_1_Pin|MUX_SELECT_3_Pin|MOTOR_IN_3_2_Pin 
 800089a:	f648 430e 	movw	r3, #35854	; 0x8c0e
 800089e:	60fb      	str	r3, [r7, #12]
                          |MOTOR_IN_3_1_Pin|MOTOR_IN_1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b6:	f001 fdd3 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_B3_Pin ENCODER_A2_Pin ENCODER_B2_Pin ENCODER_A3_Pin 
                           STATUS_Pin BUMPER_Pin */
  GPIO_InitStruct.Pin = ENCODER_B3_Pin|ENCODER_A2_Pin|ENCODER_B2_Pin|ENCODER_A3_Pin 
 80008ba:	f44f 539f 	mov.w	r3, #5088	; 0x13e0
 80008be:	60fb      	str	r3, [r7, #12]
                          |STATUS_Pin|BUMPER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f001 fdc5 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A1_Pin ENCODER_B1_Pin */
  GPIO_InitStruct.Pin = ENCODER_A1_Pin|ENCODER_B1_Pin;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <MX_GPIO_Init+0xdc>)
 80008ea:	f001 fdb9 	bl	8002460 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN_1_1_Pin MOTOR_IN_2_2_Pin MOTOR_IN_2_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN_1_1_Pin|MOTOR_IN_2_2_Pin|MOTOR_IN_2_1_Pin;
 80008ee:	2338      	movs	r3, #56	; 0x38
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0xdc>)
 8000906:	f001 fdab 	bl	8002460 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <sensorReadValue>:
#include "main.h"
#include "sensors.h"

uint16_t sensorValues[AMOUNT_OF_SENSORS] = {0};

void sensorReadValue(ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc2){
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]

	sensorValues[AMOUNT_OF_SENSORS - 1] = sensorGetADCValue(hadc1);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f856 	bl	80009e8 <sensorGetADCValue>
 800093c:	4603      	mov	r3, r0
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <sensorReadValue+0xb8>)
 8000942:	821a      	strh	r2, [r3, #16]

	int val1 = 0, val2 = 0, val3 = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]

	for(uint8_t muxSelect = 0; muxSelect < AMOUNT_OF_SENSORS - 1; muxSelect++){
 8000950:	2300      	movs	r3, #0
 8000952:	77fb      	strb	r3, [r7, #31]
 8000954:	e03f      	b.n	80009d6 <sensorReadValue+0xaa>
		uint8_t temp = muxSelect;
 8000956:	7ffb      	ldrb	r3, [r7, #31]
 8000958:	73fb      	strb	r3, [r7, #15]
		val1 = temp&=1;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	61bb      	str	r3, [r7, #24]
		temp = muxSelect;
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	73fb      	strb	r3, [r7, #15]
		val2 = (temp&=2)>>1;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f003 0302 	and.w	r3, r3, #2
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	617b      	str	r3, [r7, #20]
		temp = muxSelect;
 800097a:	7ffb      	ldrb	r3, [r7, #31]
 800097c:	73fb      	strb	r3, [r7, #15]
		val3 = (temp&=4)>>2;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_1_Pin, val1);
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	2104      	movs	r1, #4
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 feeb 	bl	8002774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_2_Pin, val2);
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	2102      	movs	r1, #2
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f001 fee3 	bl	8002774 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, MUX_SELECT_3_Pin, val3);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2108      	movs	r1, #8
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f001 fedb 	bl	8002774 <HAL_GPIO_WritePin>
		sensorValues[muxSelect] = sensorGetADCValue(hadc2);
 80009be:	6838      	ldr	r0, [r7, #0]
 80009c0:	f000 f812 	bl	80009e8 <sensorGetADCValue>
 80009c4:	4602      	mov	r2, r0
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	b291      	uxth	r1, r2
 80009ca:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <sensorReadValue+0xb8>)
 80009cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t muxSelect = 0; muxSelect < AMOUNT_OF_SENSORS - 1; muxSelect++){
 80009d0:	7ffb      	ldrb	r3, [r7, #31]
 80009d2:	3301      	adds	r3, #1
 80009d4:	77fb      	strb	r3, [r7, #31]
 80009d6:	7ffb      	ldrb	r3, [r7, #31]
 80009d8:	2b07      	cmp	r3, #7
 80009da:	d9bc      	bls.n	8000956 <sensorReadValue+0x2a>
		//HAL_Delay(500);
	}
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000028 	.word	0x20000028

080009e8 <sensorGetADCValue>:

uint32_t sensorGetADCValue(ADC_HandleTypeDef* hadc){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint32_t adcValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(hadc);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 fc09 	bl	800120c <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(hadc, 1000) == HAL_OK){
 80009fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 fcba 	bl	8001378 <HAL_ADC_PollForConversion>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <sensorGetADCValue+0x2a>
		adcValue = HAL_ADC_GetValue(hadc);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 fd7a 	bl	8001504 <HAL_ADC_GetValue>
 8000a10:	60f8      	str	r0, [r7, #12]
	}
	return adcValue;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6193      	str	r3, [r2, #24]
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a84:	d136      	bne.n	8000af4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a86:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000a8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10b      	bne.n	8000ab0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000a9a:	695b      	ldr	r3, [r3, #20]
 8000a9c:	4a36      	ldr	r2, [pc, #216]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6153      	str	r3, [r2, #20]
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6153      	str	r3, [r2, #20]
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = MUX_OUT_Pin;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MUX_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f001 fcbf 	bl	8002460 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2012      	movs	r0, #18
 8000ae8:	f001 fc83 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000aec:	2012      	movs	r0, #18
 8000aee:	f001 fc9c 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000af2:	e03a      	b.n	8000b6a <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_ADC_MspInit+0x118>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d135      	bne.n	8000b6a <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000b06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_ADC_MspInit+0x110>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10b      	bne.n	8000b28 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6153      	str	r3, [r2, #20]
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6153      	str	r3, [r2, #20]
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x114>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b56:	f001 fc83 	bl	8002460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2012      	movs	r0, #18
 8000b60:	f001 fc47 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b64:	2012      	movs	r0, #18
 8000b66:	f001 fc60 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000003c 	.word	0x2000003c
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	50000100 	.word	0x50000100

08000b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_I2C_MspInit+0x7c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d127      	bne.n	8000bf2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000bba:	23c0      	movs	r3, #192	; 0xc0
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_I2C_MspInit+0x84>)
 8000bd6:	f001 fc43 	bl	8002460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_I2C_MspInit+0x80>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400

08000c08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_RTC_MspInit+0x44>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d111      	bne.n	8000c3e <HAL_RTC_MspInit+0x36>
 8000c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c1e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c28:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2a:	fab3 f383 	clz	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <HAL_RTC_MspInit+0x48>)
 8000c34:	4413      	add	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40002800 	.word	0x40002800
 8000c50:	10908100 	.word	0x10908100

08000c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_TIM_Base_MspInit+0x78>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d114      	bne.n	8000c90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201b      	movs	r0, #27
 8000c84:	f001 fbb5 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c88:	201b      	movs	r0, #27
 8000c8a:	f001 fbce 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8e:	e018      	b.n	8000cc2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d113      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_Base_MspInit+0x7c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	201c      	movs	r0, #28
 8000cb8:	f001 fb9b 	bl	80023f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cbc:	201c      	movs	r0, #28
 8000cbe:	f001 fbb4 	bl	800242a <HAL_NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40012c00 	.word	0x40012c00
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8aa 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <ADC1_2_IRQHandler+0x14>)
 8000d36:	f000 fbf3 	bl	8001520 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <ADC1_2_IRQHandler+0x18>)
 8000d3c:	f000 fbf0 	bl	8001520 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000dc 	.word	0x200000dc
 8000d48:	20000040 	.word	0x20000040

08000d4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM1_CC_IRQHandler+0x10>)
 8000d52:	f003 f9e0 	bl	8004116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000014c 	.word	0x2000014c

08000d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM2_IRQHandler+0x10>)
 8000d66:	f003 f9d6 	bl	8004116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000018c 	.word	0x2000018c

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x28>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <SystemInit+0x28>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SystemInit+0x28>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000da4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000db6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
	ldr	r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopForever+0x16>)
	cmp	r2, r3
 8000dc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dca:	f7ff ffd3 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fa41 	bl	8005254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fa1f 	bl	8000214 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000ddc:	080052fc 	.word	0x080052fc
	ldr	r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000de4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000de8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000dec:	200001d0 	.word	0x200001d0

08000df0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <CAN_RX0_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f001 fae9 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe04 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fb01 	bl	8002446 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f001 fac9 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200001cc 	.word	0x200001cc

08000ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001cc 	.word	0x200001cc

08000ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09a      	sub	sp, #104	; 0x68
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e172      	b.n	80011ee <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d176      	bne.n	8001008 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d152      	bne.n	8000fc8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fd91 	bl	8000a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d13b      	bne.n	8000fc8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f913 	bl	800217c <ADC_Disable>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d12f      	bne.n	8000fc8 <HAL_ADC_Init+0xe0>
 8000f68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d12b      	bne.n	8000fc8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f78:	f023 0302 	bic.w	r3, r3, #2
 8000f7c:	f043 0202 	orr.w	r2, r3, #2
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f92:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fa2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa4:	4b94      	ldr	r3, [pc, #592]	; (80011f8 <HAL_ADC_Init+0x310>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a94      	ldr	r2, [pc, #592]	; (80011fc <HAL_ADC_Init+0x314>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9a      	lsrs	r2, r3, #18
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fba:	e002      	b.n	8000fc2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f9      	bne.n	8000fbc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe4:	d110      	bne.n	8001008 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f023 0312 	bic.w	r3, r3, #18
 8000fee:	f043 0210 	orr.w	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	f040 80df 	bne.w	80011d4 <HAL_ADC_Init+0x2ec>
 8001016:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80da 	bne.w	80011d4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 80d2 	bne.w	80011d4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001038:	f043 0202 	orr.w	r2, r3, #2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001040:	4b6f      	ldr	r3, [pc, #444]	; (8001200 <HAL_ADC_Init+0x318>)
 8001042:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104c:	d102      	bne.n	8001054 <HAL_ADC_Init+0x16c>
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_ADC_Init+0x31c>)
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	e002      	b.n	800105a <HAL_ADC_Init+0x172>
 8001054:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001058:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_ADC_Init+0x192>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_Init+0x192>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_ADC_Init+0x194>
 800107a:	2300      	movs	r3, #0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11c      	bne.n	80010ba <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001080:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001082:	2b00      	cmp	r3, #0
 8001084:	d010      	beq.n	80010a8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d107      	bne.n	80010a2 <HAL_ADC_Init+0x1ba>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Init+0x1ba>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_ADC_Init+0x1bc>
 80010a2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d108      	bne.n	80010ba <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e5b      	ldrb	r3, [r3, #25]
 80010be:	035b      	lsls	r3, r3, #13
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010c4:	2a01      	cmp	r2, #1
 80010c6:	d002      	beq.n	80010ce <HAL_ADC_Init+0x1e6>
 80010c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010cc:	e000      	b.n	80010d0 <HAL_ADC_Init+0x1e8>
 80010ce:	2200      	movs	r2, #0
 80010d0:	431a      	orrs	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4313      	orrs	r3, r2
 80010de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e0:	4313      	orrs	r3, r2
 80010e2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d11b      	bne.n	8001126 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7e5b      	ldrb	r3, [r3, #25]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	3b01      	subs	r3, #1
 80010fc:	045a      	lsls	r2, r3, #17
 80010fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001100:	4313      	orrs	r3, r2
 8001102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001106:	663b      	str	r3, [r7, #96]	; 0x60
 8001108:	e00d      	b.n	8001126 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001112:	f043 0220 	orr.w	r2, r3, #32
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	2b01      	cmp	r3, #1
 800112c:	d007      	beq.n	800113e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001136:	4313      	orrs	r3, r2
 8001138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800113a:	4313      	orrs	r3, r2
 800113c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b00      	cmp	r3, #0
 800114a:	d114      	bne.n	8001176 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800115a:	f023 0302 	bic.w	r3, r3, #2
 800115e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7e1b      	ldrb	r3, [r3, #24]
 8001164:	039a      	lsls	r2, r3, #14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4313      	orrs	r3, r2
 8001170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001172:	4313      	orrs	r3, r2
 8001174:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_ADC_Init+0x320>)
 800117e:	4013      	ands	r3, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001186:	430b      	orrs	r3, r1
 8001188:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10c      	bne.n	80011ac <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f023 010f 	bic.w	r1, r3, #15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	1e5a      	subs	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
 80011aa:	e007      	b.n	80011bc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 020f 	bic.w	r2, r2, #15
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f023 0303 	bic.w	r3, r3, #3
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
 80011d2:	e00a      	b.n	80011ea <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f023 0312 	bic.w	r3, r3, #18
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3768      	adds	r7, #104	; 0x68
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	50000300 	.word	0x50000300
 8001204:	50000100 	.word	0x50000100
 8001208:	fff0c007 	.word	0xfff0c007

0800120c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 809c 	bne.w	8001360 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Start+0x2a>
 8001232:	2302      	movs	r3, #2
 8001234:	e097      	b.n	8001366 <HAL_ADC_Start+0x15a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 ff3e 	bl	80020c0 <ADC_Enable>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8083 	bne.w	8001356 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <HAL_ADC_Start+0x164>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_ADC_Start+0x6e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001278:	d115      	bne.n	80012a6 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d027      	beq.n	80012e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012a4:	e01e      	b.n	80012e4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Start+0xba>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <HAL_ADC_Start+0x168>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d10e      	bne.n	80012e4 <HAL_ADC_Start+0xd8>
 80012c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f0:	d106      	bne.n	8001300 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f023 0206 	bic.w	r2, r3, #6
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	645a      	str	r2, [r3, #68]	; 0x44
 80012fe:	e002      	b.n	8001306 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	221c      	movs	r2, #28
 8001314:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_ADC_Start+0x164>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2b00      	cmp	r3, #0
 8001320:	d010      	beq.n	8001344 <HAL_ADC_Start+0x138>
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_ADC_Start+0x164>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	2b05      	cmp	r3, #5
 800132c:	d00a      	beq.n	8001344 <HAL_ADC_Start+0x138>
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_ADC_Start+0x164>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2b09      	cmp	r3, #9
 8001338:	d004      	beq.n	8001344 <HAL_ADC_Start+0x138>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001342:	d10f      	bne.n	8001364 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0204 	orr.w	r2, r2, #4
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e006      	b.n	8001364 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800135e:	e001      	b.n	8001364 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001360:	2302      	movs	r3, #2
 8001362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	50000300 	.word	0x50000300
 8001374:	50000100 	.word	0x50000100

08001378 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d102      	bne.n	8001394 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800138e:	2308      	movs	r3, #8
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e02e      	b.n	80013f2 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001394:	4b5a      	ldr	r3, [pc, #360]	; (8001500 <HAL_ADC_PollForConversion+0x188>)
 8001396:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d112      	bne.n	80013ca <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d11d      	bne.n	80013ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f043 0220 	orr.w	r2, r3, #32
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e096      	b.n	80014f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f043 0220 	orr.w	r2, r3, #32
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e084      	b.n	80014f8 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <HAL_ADC_PollForConversion+0x188>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <HAL_ADC_PollForConversion+0x90>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001406:	d104      	bne.n	8001412 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	e003      	b.n	800141a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800141a:	f7ff fd45 	bl	8000ea8 <HAL_GetTick>
 800141e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001420:	e01a      	b.n	8001458 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d016      	beq.n	8001458 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_ADC_PollForConversion+0xc8>
 8001430:	f7ff fd3a 	bl	8000ea8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d20b      	bcs.n	8001458 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f043 0204 	orr.w	r2, r3, #4
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e04f      	b.n	80014f8 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0dd      	beq.n	8001422 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800147c:	2b00      	cmp	r3, #0
 800147e:	d131      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001486:	2b00      	cmp	r3, #0
 8001488:	d12c      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d125      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d112      	bne.n	80014cc <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d112      	bne.n	80014e4 <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
 80014ca:	e00b      	b.n	80014e4 <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f043 0220 	orr.w	r2, r3, #32
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	50000300 	.word	0x50000300

08001504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b04      	cmp	r3, #4
 8001540:	d106      	bne.n	8001550 <HAL_ADC_IRQHandler+0x30>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b04      	cmp	r3, #4
 800154e:	d00d      	beq.n	800156c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800155a:	2b08      	cmp	r3, #8
 800155c:	d17a      	bne.n	8001654 <HAL_ADC_IRQHandler+0x134>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b08      	cmp	r3, #8
 800156a:	d173      	bne.n	8001654 <HAL_ADC_IRQHandler+0x134>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d010      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x92>
 8001590:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2b05      	cmp	r3, #5
 800159a:	d00a      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x92>
 800159c:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d004      	beq.n	80015b2 <HAL_ADC_IRQHandler+0x92>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d104      	bne.n	80015bc <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	e003      	b.n	80015c4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d139      	bne.n	8001646 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d134      	bne.n	8001646 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d12d      	bne.n	8001646 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11a      	bne.n	800162e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 020c 	bic.w	r2, r2, #12
 8001606:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d112      	bne.n	8001646 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
 800162c:	e00b      	b.n	8001646 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7fe fdce 	bl	80001e8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	220c      	movs	r2, #12
 8001652:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	d106      	bne.n	8001670 <HAL_ADC_IRQHandler+0x150>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	2b20      	cmp	r3, #32
 800166e:	d00f      	beq.n	8001690 <HAL_ADC_IRQHandler+0x170>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 800167a:	2b40      	cmp	r3, #64	; 0x40
 800167c:	f040 80a9 	bne.w	80017d2 <HAL_ADC_IRQHandler+0x2b2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	f040 80a1 	bne.w	80017d2 <HAL_ADC_IRQHandler+0x2b2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800169c:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d010      	beq.n	80016ca <HAL_ADC_IRQHandler+0x1aa>
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 031f 	and.w	r3, r3, #31
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d00a      	beq.n	80016ca <HAL_ADC_IRQHandler+0x1aa>
 80016b4:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	2b09      	cmp	r3, #9
 80016be:	d004      	beq.n	80016ca <HAL_ADC_IRQHandler+0x1aa>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c8:	d104      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x1b4>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	e003      	b.n	80016dc <HAL_ADC_IRQHandler+0x1bc>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d010      	beq.n	800170c <HAL_ADC_IRQHandler+0x1ec>
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                   ||
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d167      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
       ((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d160      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
        (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )   )
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001708:	2b00      	cmp	r3, #0
 800170a:	d15b      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d154      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
      {
        
        /* Get relevant register CFGR in ADC instance of ADC master or slave  */
        /* in function of multimode state (for devices with multimode         */
        /* available).                                                        */
        if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	2b00      	cmp	r3, #0
 8001724:	d010      	beq.n	8001748 <HAL_ADC_IRQHandler+0x228>
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	2b06      	cmp	r3, #6
 8001730:	d00a      	beq.n	8001748 <HAL_ADC_IRQHandler+0x228>
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_ADC_IRQHandler+0x288>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2b07      	cmp	r3, #7
 800173c:	d004      	beq.n	8001748 <HAL_ADC_IRQHandler+0x228>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001746:	d104      	bne.n	8001752 <HAL_ADC_IRQHandler+0x232>
        {
          tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e003      	b.n	800175a <HAL_ADC_IRQHandler+0x23a>
        }
        else
        {
          tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001752:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60fb      	str	r3, [r7, #12]
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12f      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d11c      	bne.n	80017ac <HAL_ADC_IRQHandler+0x28c>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001780:	605a      	str	r2, [r3, #4]
            
            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40

            if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	2b00      	cmp	r3, #0
 8001798:	d114      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
            { 
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
 80017a6:	e00d      	b.n	80017c4 <HAL_ADC_IRQHandler+0x2a4>
 80017a8:	50000300 	.word	0x50000300
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
          
            /* Set ADC error code to ADC IP internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f8cb 	bl	8001960 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2260      	movs	r2, #96	; 0x60
 80017d0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d113      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	d10c      	bne.n	8001808 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff fb60 	bl	8000ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001816:	d115      	bne.n	8001844 <HAL_ADC_IRQHandler+0x324>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001826:	d10d      	bne.n	8001844 <HAL_ADC_IRQHandler+0x324>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f8a7 	bl	8001988 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001842:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001852:	d115      	bne.n	8001880 <HAL_ADC_IRQHandler+0x360>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001862:	d10d      	bne.n	8001880 <HAL_ADC_IRQHandler+0x360>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f893 	bl	800199c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	2b10      	cmp	r3, #16
 800188c:	d13d      	bne.n	800190a <HAL_ADC_IRQHandler+0x3ea>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b10      	cmp	r3, #16
 800189a:	d136      	bne.n	800190a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d102      	bne.n	80018aa <HAL_ADC_IRQHandler+0x38a>
    {
      overrun_error = 1U;
 80018a4:	2301      	movs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e019      	b.n	80018de <HAL_ADC_IRQHandler+0x3be>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018aa:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_ADC_IRQHandler+0x43c>)
 80018ac:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_ADC_IRQHandler+0x3ae>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d10a      	bne.n	80018de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018c8:	2301      	movs	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e007      	b.n	80018de <HAL_ADC_IRQHandler+0x3be>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1U;  
 80018da:	2301      	movs	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10e      	bne.n	8001902 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	f043 0202 	orr.w	r2, r3, #2
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fae9 	bl	8000ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2210      	movs	r2, #16
 8001908:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001918:	d11b      	bne.n	8001952 <HAL_ADC_IRQHandler+0x432>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d113      	bne.n	8001952 <HAL_ADC_IRQHandler+0x432>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f043 0208 	orr.w	r2, r3, #8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f811 	bl	8001974 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	50000300 	.word	0x50000300

08001960 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b09b      	sub	sp, #108	; 0x6c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x22>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e2a5      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x56e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 8289 	bne.w	8001efc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d81c      	bhi.n	8001a2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	461a      	mov	r2, r3
 8001a06:	231f      	movs	r3, #31
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4019      	ands	r1, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2a:	e063      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b09      	cmp	r3, #9
 8001a32:	d81e      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	3b1e      	subs	r3, #30
 8001a48:	221f      	movs	r2, #31
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4019      	ands	r1, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	3b1e      	subs	r3, #30
 8001a64:	fa00 f203 	lsl.w	r2, r0, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a70:	e040      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b0e      	cmp	r3, #14
 8001a78:	d81e      	bhi.n	8001ab8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	3b3c      	subs	r3, #60	; 0x3c
 8001a8e:	221f      	movs	r2, #31
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	3b3c      	subs	r3, #60	; 0x3c
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ab6:	e01d      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	3b5a      	subs	r3, #90	; 0x5a
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4019      	ands	r1, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	3b5a      	subs	r3, #90	; 0x5a
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 80e5 	bne.w	8001cce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d91c      	bls.n	8001b46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6999      	ldr	r1, [r3, #24]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b1e      	subs	r3, #30
 8001b1e:	2207      	movs	r2, #7
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4019      	ands	r1, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6898      	ldr	r0, [r3, #8]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	619a      	str	r2, [r3, #24]
 8001b44:	e019      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6959      	ldr	r1, [r3, #20]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	2207      	movs	r2, #7
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4019      	ands	r1, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6898      	ldr	r0, [r3, #8]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d84f      	bhi.n	8001c3c <HAL_ADC_ConfigChannel+0x28c>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bd7 	.word	0x08001bd7
 8001bac:	08001bf9 	.word	0x08001bf9
 8001bb0:	08001c1b 	.word	0x08001c1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bba:	4b9e      	ldr	r3, [pc, #632]	; (8001e34 <HAL_ADC_ConfigChannel+0x484>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	0691      	lsls	r1, r2, #26
 8001bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bd2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bd4:	e07e      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bdc:	4b95      	ldr	r3, [pc, #596]	; (8001e34 <HAL_ADC_ConfigChannel+0x484>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	0691      	lsls	r1, r2, #26
 8001be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001be8:	430a      	orrs	r2, r1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bf4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bf6:	e06d      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001bfe:	4b8d      	ldr	r3, [pc, #564]	; (8001e34 <HAL_ADC_ConfigChannel+0x484>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	0691      	lsls	r1, r2, #26
 8001c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c18:	e05c      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c20:	4b84      	ldr	r3, [pc, #528]	; (8001e34 <HAL_ADC_ConfigChannel+0x484>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	0691      	lsls	r1, r2, #26
 8001c2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c3a:	e04b      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	069b      	lsls	r3, r3, #26
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d107      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	069b      	lsls	r3, r3, #26
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d107      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	069b      	lsls	r3, r3, #26
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d107      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ca6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	069b      	lsls	r3, r3, #26
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d10a      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001ccc:	e001      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001cce:	bf00      	nop
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001cd2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x344>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x344>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x346>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 810b 	bne.w	8001f12 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d00f      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d22:	e049      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b09      	cmp	r3, #9
 8001d44:	d91c      	bls.n	8001d80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6999      	ldr	r1, [r3, #24]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	3b1b      	subs	r3, #27
 8001d58:	2207      	movs	r2, #7
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	4019      	ands	r1, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6898      	ldr	r0, [r3, #8]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b1b      	subs	r3, #27
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	e01b      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6959      	ldr	r1, [r3, #20]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	2207      	movs	r2, #7
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6898      	ldr	r0, [r3, #8]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_ADC_ConfigChannel+0x488>)
 8001dba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d105      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001dd4:	2b11      	cmp	r3, #17
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	f040 8092 	bne.w	8001f12 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 808b 	bne.w	8001f12 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e04:	d102      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x45c>
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_ADC_ConfigChannel+0x48c>)
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	e002      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x462>
 8001e0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10f      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x490>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x490>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e007      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x492>
 8001e32:	bf00      	nop
 8001e34:	83fff000 	.word	0x83fff000
 8001e38:	50000300 	.word	0x50000300
 8001e3c:	50000100 	.word	0x50000100
 8001e40:	2300      	movs	r3, #0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d150      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x4b8>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x4b8>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x4ba>
 8001e68:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d13c      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d11d      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x502>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7e:	d118      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_ADC_ConfigChannel+0x57c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_ADC_ConfigChannel+0x580>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9a      	lsrs	r2, r3, #18
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eb0:	e02e      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b11      	cmp	r3, #17
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x522>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ed0:	e01e      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d11a      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ee6:	e013      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001efa:	e00a      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f043 0220 	orr.w	r2, r3, #32
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f0e:	e000      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f10:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	376c      	adds	r7, #108	; 0x6c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	431bde83 	.word	0x431bde83

08001f34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b099      	sub	sp, #100	; 0x64
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4c:	d102      	bne.n	8001f54 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	e002      	b.n	8001f5a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f58:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0a2      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e09b      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d17f      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d179      	bne.n	8002088 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001f96:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d040      	beq.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fb2:	035b      	lsls	r3, r3, #13
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d15c      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001ffe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d14b      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800200c:	f023 030f 	bic.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	6811      	ldr	r1, [r2, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	6892      	ldr	r2, [r2, #8]
 8002018:	430a      	orrs	r2, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002020:	e03c      	b.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d108      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d123      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002070:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d112      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800207e:	f023 030f 	bic.w	r3, r3, #15
 8002082:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002084:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002086:	e009      	b.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800209a:	e000      	b.n	800209e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800209c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80020aa:	4618      	mov	r0, r3
 80020ac:	3764      	adds	r7, #100	; 0x64
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	50000100 	.word	0x50000100
 80020bc:	50000300 	.word	0x50000300

080020c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d108      	bne.n	80020ec <ADC_Enable+0x2c>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <ADC_Enable+0x2c>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <ADC_Enable+0x2e>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d13c      	bne.n	800216c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <ADC_Enable+0xb8>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	f043 0210 	orr.w	r2, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e028      	b.n	800216e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800212c:	f7fe febc 	bl	8000ea8 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002132:	e014      	b.n	800215e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002134:	f7fe feb8 	bl	8000ea8 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d90d      	bls.n	800215e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f043 0210 	orr.w	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e007      	b.n	800216e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d1e3      	bne.n	8002134 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	8000003f 	.word	0x8000003f

0800217c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <ADC_Disable+0x2c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <ADC_Disable+0x2c>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <ADC_Disable+0x2e>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d040      	beq.n	8002230 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030d 	and.w	r3, r3, #13
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d10f      	bne.n	80021dc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0202 	orr.w	r2, r2, #2
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe68 	bl	8000ea8 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021da:	e022      	b.n	8002222 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e01c      	b.n	8002232 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021f8:	f7fe fe56 	bl	8000ea8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d90d      	bls.n	8002222 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0210 	orr.w	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e007      	b.n	8002232 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d0e3      	beq.n	80021f8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	; (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	; (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e14e      	b.n	800270e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8140 	beq.w	8002708 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x38>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b12      	cmp	r3, #18
 8002496:	d123      	bne.n	80024e0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	08da      	lsrs	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3208      	adds	r2, #8
 80024da:	6939      	ldr	r1, [r7, #16]
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0203 	and.w	r2, r3, #3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d00b      	beq.n	8002534 <HAL_GPIO_Init+0xd4>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d007      	beq.n	8002534 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002528:	2b11      	cmp	r3, #17
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b12      	cmp	r3, #18
 8002532:	d130      	bne.n	8002596 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256a:	2201      	movs	r2, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0201 	and.w	r2, r3, #1
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 809a 	beq.w	8002708 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_GPIO_Init+0x2cc>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_GPIO_Init+0x2cc>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6193      	str	r3, [r2, #24]
 80025e0:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_GPIO_Init+0x2cc>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025ec:	4a50      	ldr	r2, [pc, #320]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002616:	d013      	beq.n	8002640 <HAL_GPIO_Init+0x1e0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a46      	ldr	r2, [pc, #280]	; (8002734 <HAL_GPIO_Init+0x2d4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00d      	beq.n	800263c <HAL_GPIO_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a45      	ldr	r2, [pc, #276]	; (8002738 <HAL_GPIO_Init+0x2d8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_GPIO_Init+0x1d8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a44      	ldr	r2, [pc, #272]	; (800273c <HAL_GPIO_Init+0x2dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d101      	bne.n	8002634 <HAL_GPIO_Init+0x1d4>
 8002630:	2303      	movs	r3, #3
 8002632:	e006      	b.n	8002642 <HAL_GPIO_Init+0x1e2>
 8002634:	2305      	movs	r3, #5
 8002636:	e004      	b.n	8002642 <HAL_GPIO_Init+0x1e2>
 8002638:	2302      	movs	r3, #2
 800263a:	e002      	b.n	8002642 <HAL_GPIO_Init+0x1e2>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_GPIO_Init+0x1e2>
 8002640:	2300      	movs	r3, #0
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	f002 0203 	and.w	r2, r2, #3
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	4093      	lsls	r3, r2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002652:	4937      	ldr	r1, [pc, #220]	; (8002730 <HAL_GPIO_Init+0x2d0>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002684:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026ae:	4a24      	ldr	r2, [pc, #144]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <HAL_GPIO_Init+0x2e0>)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	f47f aea9 	bne.w	8002470 <HAL_GPIO_Init+0x10>
  }
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000
 8002734:	48000400 	.word	0x48000400
 8002738:	48000800 	.word	0x48000800
 800273c:	48000c00 	.word	0x48000c00
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e081      	b.n	80028ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe f9d8 	bl	8000b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e006      	b.n	800282c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800282a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d104      	bne.n	800283e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800284c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	ea42 0103 	orr.w	r1, r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	021a      	lsls	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69d9      	ldr	r1, [r3, #28]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d138      	bne.n	800294a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e032      	b.n	800294c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2224      	movs	r2, #36	; 0x24
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002914:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d139      	bne.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002978:	2302      	movs	r3, #2
 800297a:	e033      	b.n	80029e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f000 bef4 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 816a 	beq.w	8002cee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a1a:	4bb3      	ldr	r3, [pc, #716]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a26:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d159      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
 8002a32:	4bad      	ldr	r3, [pc, #692]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d152      	bne.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
 8002a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a44:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8002a54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_OscConfig+0x82>
 8002a6c:	4b9e      	ldr	r3, [pc, #632]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0xae>
 8002a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a76:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a8e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a9a:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aa2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002aa6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ab2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 810c 	beq.w	8002cec <HAL_RCC_OscConfig+0x2fc>
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8106 	bne.w	8002cec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f000 be86 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d106      	bne.n	8002b00 <HAL_RCC_OscConfig+0x110>
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e030      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x134>
 8002b0a:	4b77      	ldr	r3, [pc, #476]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a76      	ldr	r2, [pc, #472]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	4b74      	ldr	r3, [pc, #464]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a73      	ldr	r2, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01e      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x15a>
 8002b30:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a6c      	ldr	r2, [pc, #432]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a69      	ldr	r2, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e00b      	b.n	8002b62 <HAL_RCC_OscConfig+0x172>
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b62:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	495d      	ldr	r1, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d059      	beq.n	8002c34 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fe f992 	bl	8000ea8 <HAL_GetTick>
 8002b84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7fe f98d 	bl	8000ea8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f000 be29 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	095b      	lsrs	r3, r3, #5
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d102      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1e2>
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e015      	b.n	8002bfe <HAL_RCC_OscConfig+0x20e>
 8002bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c12:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ab      	beq.n	8002b8a <HAL_RCC_OscConfig+0x19a>
 8002c32:	e05c      	b.n	8002cee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe f938 	bl	8000ea8 <HAL_GetTick>
 8002c38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3e:	f7fe f933 	bl	8000ea8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d902      	bls.n	8002c54 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	f000 bdcf 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x296>
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x2c2>
 8002c86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ca2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_RCC_OscConfig+0x2f8>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cbe:	fa92 f2a2 	rbit	r2, r2
 8002cc2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cc6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1ab      	bne.n	8002c3e <HAL_RCC_OscConfig+0x24e>
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_OscConfig+0x2fe>
 8002ce8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 816f 	beq.w	8002fdc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cfe:	4bd0      	ldr	r3, [pc, #832]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d0a:	4bcd      	ldr	r3, [pc, #820]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d16c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x400>
 8002d16:	4bca      	ldr	r3, [pc, #808]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d166      	bne.n	8002df0 <HAL_RCC_OscConfig+0x400>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0x362>
 8002d4c:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e013      	b.n	8002d7a <HAL_RCC_OscConfig+0x38a>
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d76:	4bb2      	ldr	r3, [pc, #712]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d84:	fa92 f2a2 	rbit	r2, r2
 8002d88:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f002 021f 	and.w	r2, r2, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f202 	lsl.w	r2, r1, r2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
 8002dac:	1d3b      	adds	r3, r7, #4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f000 bd1b 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4ba0      	ldr	r3, [pc, #640]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	21f8      	movs	r1, #248	; 0xf8
 8002dcc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dd4:	fa91 f1a1 	rbit	r1, r1
 8002dd8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ddc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002de0:	fab1 f181 	clz	r1, r1
 8002de4:	b2c9      	uxtb	r1, r1
 8002de6:	408b      	lsls	r3, r1
 8002de8:	4995      	ldr	r1, [pc, #596]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e0f5      	b.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8085 	beq.w	8002f06 <HAL_RCC_OscConfig+0x516>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	2301      	movs	r3, #1
 8002e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe f83e 	bl	8000ea8 <HAL_GetTick>
 8002e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e30:	e00a      	b.n	8002e48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fe f839 	bl	8000ea8 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	f000 bcd5 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_OscConfig+0x488>
 8002e72:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e013      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4b0>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ea6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002eaa:	fa92 f2a2 	rbit	r2, r2
 8002eae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002eb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eb6:	fab2 f282 	clz	r2, r2
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f042 0220 	orr.w	r2, r2, #32
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 021f 	and.w	r2, r2, #31
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0af      	beq.n	8002e32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	21f8      	movs	r1, #248	; 0xf8
 8002ee2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002eea:	fa91 f1a1 	rbit	r1, r1
 8002eee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ef2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ef6:	fab1 f181 	clz	r1, r1
 8002efa:	b2c9      	uxtb	r1, r1
 8002efc:	408b      	lsls	r3, r1
 8002efe:	4950      	ldr	r1, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e06a      	b.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
 8002f06:	2301      	movs	r3, #1
 8002f08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7fd ffb9 	bl	8000ea8 <HAL_GetTick>
 8002f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e00a      	b.n	8002f52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fd ffb4 	bl	8000ea8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f000 bc50 	b.w	80037f2 <HAL_RCC_OscConfig+0xe02>
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0x592>
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e013      	b.n	8002faa <HAL_RCC_OscConfig+0x5ba>
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x650>)
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	2202      	movs	r2, #2
 8002fac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	f042 0220 	orr.w	r2, r2, #32
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f002 021f 	and.w	r2, r2, #31
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1af      	bne.n	8002f3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80da 	beq.w	80031a0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d069      	beq.n	80030ca <HAL_RCC_OscConfig+0x6da>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x654>)
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003020:	f7fd ff42 	bl	8000ea8 <HAL_GetTick>
 8003024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003028:	e00e      	b.n	8003048 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800302a:	f7fd ff3d 	bl	8000ea8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d906      	bls.n	8003048 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e3d9      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	10908120 	.word	0x10908120
 8003048:	2302      	movs	r3, #2
 800304a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800305a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800305e:	2202      	movs	r2, #2
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f2a3 	rbit	r2, r3
 8003084:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003088:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308a:	4ba5      	ldr	r3, [pc, #660]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800308c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003092:	2102      	movs	r1, #2
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	fa93 f1a3 	rbit	r1, r3
 80030a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030a4:	6019      	str	r1, [r3, #0]
  return result;
 80030a6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2101      	movs	r1, #1
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0b0      	beq.n	800302a <HAL_RCC_OscConfig+0x63a>
 80030c8:	e06a      	b.n	80031a0 <HAL_RCC_OscConfig+0x7b0>
 80030ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	fa93 f2a3 	rbit	r2, r3
 80030dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e0:	601a      	str	r2, [r3, #0]
  return result;
 80030e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	461a      	mov	r2, r3
 80030f8:	2300      	movs	r3, #0
 80030fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fd fed4 	bl	8000ea8 <HAL_GetTick>
 8003100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	e009      	b.n	800311a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003106:	f7fd fecf 	bl	8000ea8 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e36b      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 800311a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800311e:	2202      	movs	r2, #2
 8003120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	fa93 f2a3 	rbit	r2, r3
 800312c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003136:	2202      	movs	r2, #2
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	fa93 f2a3 	rbit	r2, r3
 8003144:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800314e:	2202      	movs	r2, #2
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003160:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003166:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800316a:	2102      	movs	r1, #2
 800316c:	6019      	str	r1, [r3, #0]
 800316e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f1a3 	rbit	r1, r3
 8003178:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800317c:	6019      	str	r1, [r3, #0]
  return result;
 800317e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1b2      	bne.n	8003106 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8158 	beq.w	8003460 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]
 80031ce:	4b54      	ldr	r3, [pc, #336]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11a      	bne.n	800322a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003200:	f7fd fe52 	bl	8000ea8 <HAL_GetTick>
 8003204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e009      	b.n	800321e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320a:	f7fd fe4d 	bl	8000ea8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b64      	cmp	r3, #100	; 0x64
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e2e9      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ef      	beq.n	800320a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x852>
 8003234:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a39      	ldr	r2, [pc, #228]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e02f      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x876>
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a33      	ldr	r2, [pc, #204]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a30      	ldr	r2, [pc, #192]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e01d      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b05      	cmp	r3, #5
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0x89a>
 8003270:	4b2b      	ldr	r3, [pc, #172]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6213      	str	r3, [r2, #32]
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6213      	str	r3, [r2, #32]
 8003288:	e00b      	b.n	80032a2 <HAL_RCC_OscConfig+0x8b2>
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4a24      	ldr	r2, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6213      	str	r3, [r2, #32]
 8003296:	4b22      	ldr	r3, [pc, #136]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d06b      	beq.n	8003384 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fd fdfc 	bl	8000ea8 <HAL_GetTick>
 80032b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fdf7 	bl	8000ea8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e291      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80032ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032d2:	2202      	movs	r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ea:	2202      	movs	r2, #2
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fa93 f2a3 	rbit	r2, r3
 80032f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032fc:	601a      	str	r2, [r3, #0]
  return result;
 80032fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003302:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	b2db      	uxtb	r3, r3
 800330e:	f043 0302 	orr.w	r3, r3, #2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d109      	bne.n	800332c <HAL_RCC_OscConfig+0x93c>
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <HAL_RCC_OscConfig+0x930>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	e014      	b.n	8003348 <HAL_RCC_OscConfig+0x958>
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	10908120 	.word	0x10908120
 8003328:	40007000 	.word	0x40007000
 800332c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003330:	2202      	movs	r2, #2
 8003332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	fa93 f2a3 	rbit	r2, r3
 800333e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	4bbb      	ldr	r3, [pc, #748]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800334c:	2102      	movs	r1, #2
 800334e:	6011      	str	r1, [r2, #0]
 8003350:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	fa92 f1a2 	rbit	r1, r2
 800335a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800335e:	6011      	str	r1, [r2, #0]
  return result;
 8003360:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	fab2 f282 	clz	r2, r2
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	f002 021f 	and.w	r2, r2, #31
 8003376:	2101      	movs	r1, #1
 8003378:	fa01 f202 	lsl.w	r2, r1, r2
 800337c:	4013      	ands	r3, r2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d099      	beq.n	80032b6 <HAL_RCC_OscConfig+0x8c6>
 8003382:	e063      	b.n	800344c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7fd fd90 	bl	8000ea8 <HAL_GetTick>
 8003388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fd8b 	bl	8000ea8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e225      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80033a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033aa:	2202      	movs	r2, #2
 80033ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033c2:	2202      	movs	r2, #2
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033d4:	601a      	str	r2, [r3, #0]
  return result;
 80033d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_OscConfig+0xa06>
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	e00d      	b.n	8003412 <HAL_RCC_OscConfig+0xa22>
 80033f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	4b89      	ldr	r3, [pc, #548]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003416:	2102      	movs	r1, #2
 8003418:	6011      	str	r1, [r2, #0]
 800341a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	fa92 f1a2 	rbit	r1, r2
 8003424:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003428:	6011      	str	r1, [r2, #0]
  return result;
 800342a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f002 021f 	and.w	r2, r2, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f202 	lsl.w	r2, r1, r2
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1a0      	bne.n	800338e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800344c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b77      	ldr	r3, [pc, #476]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4a76      	ldr	r2, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 81c2 	beq.w	80037f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346c:	4b71      	ldr	r3, [pc, #452]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	2b08      	cmp	r3, #8
 8003476:	f000 819c 	beq.w	80037b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b02      	cmp	r3, #2
 8003482:	f040 8114 	bne.w	80036ae <HAL_RCC_OscConfig+0xcbe>
 8003486:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800348a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800349e:	601a      	str	r2, [r3, #0]
  return result;
 80034a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80034a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2300      	movs	r3, #0
 80034ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fcf4 	bl	8000ea8 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd fcef 	bl	8000ea8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e18b      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80034da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0xb24>
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e01b      	b.n	800354c <HAL_RCC_OscConfig+0xb5c>
 8003514:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b3a      	ldr	r3, [pc, #232]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003550:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003554:	6011      	str	r1, [r2, #0]
 8003556:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	fa92 f1a2 	rbit	r1, r2
 8003560:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003564:	6011      	str	r1, [r2, #0]
  return result;
 8003566:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d19e      	bne.n	80034c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	430b      	orrs	r3, r1
 800359e:	4925      	ldr	r1, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
 80035a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f2a3 	rbit	r2, r3
 80035b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035bc:	601a      	str	r2, [r3, #0]
  return result;
 80035be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd fc65 	bl	8000ea8 <HAL_GetTick>
 80035de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e2:	e009      	b.n	80035f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd fc60 	bl	8000ea8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e0fc      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 80035f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	fa93 f2a3 	rbit	r2, r3
 800360c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003610:	601a      	str	r2, [r3, #0]
  return result;
 8003612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003618:	fab3 f383 	clz	r3, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0xc48>
 800362c:	4b01      	ldr	r3, [pc, #4]	; (8003634 <HAL_RCC_OscConfig+0xc44>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e01e      	b.n	8003670 <HAL_RCC_OscConfig+0xc80>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800363c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f2a3 	rbit	r2, r3
 800364c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	4b63      	ldr	r3, [pc, #396]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003674:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	fa92 f1a2 	rbit	r1, r2
 8003684:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003688:	6011      	str	r1, [r2, #0]
  return result;
 800368a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	fab2 f282 	clz	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f042 0220 	orr.w	r2, r2, #32
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	f002 021f 	and.w	r2, r2, #31
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d09b      	beq.n	80035e4 <HAL_RCC_OscConfig+0xbf4>
 80036ac:	e0a0      	b.n	80037f0 <HAL_RCC_OscConfig+0xe00>
 80036ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c6:	601a      	str	r2, [r3, #0]
  return result;
 80036c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	2300      	movs	r3, #0
 80036e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fd fbe0 	bl	8000ea8 <HAL_GetTick>
 80036e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	e009      	b.n	8003702 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fbdb 	bl	8000ea8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e077      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
 8003702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800371a:	601a      	str	r2, [r3, #0]
  return result;
 800371c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003720:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0xd4c>
 8003736:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0xd84>
 800373c:	f107 0320 	add.w	r3, r7, #32
 8003740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fa93 f2a3 	rbit	r2, r3
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f107 0318 	add.w	r3, r7, #24
 800375a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f107 0318 	add.w	r3, r7, #24
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f107 0314 	add.w	r3, r7, #20
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f107 0210 	add.w	r2, r7, #16
 8003778:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	f107 0210 	add.w	r2, r7, #16
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	fa92 f1a2 	rbit	r1, r2
 8003788:	f107 020c 	add.w	r2, r7, #12
 800378c:	6011      	str	r1, [r2, #0]
  return result;
 800378e:	f107 020c 	add.w	r2, r7, #12
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	fab2 f282 	clz	r2, r2
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f002 021f 	and.w	r2, r2, #31
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d19e      	bne.n	80036ee <HAL_RCC_OscConfig+0xcfe>
 80037b0:	e01e      	b.n	80037f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e018      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCC_OscConfig+0xe0c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b09e      	sub	sp, #120	; 0x78
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e162      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b90      	ldr	r3, [pc, #576]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b8d      	ldr	r3, [pc, #564]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	498b      	ldr	r1, [pc, #556]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e14a      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b82      	ldr	r3, [pc, #520]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	497f      	ldr	r1, [pc, #508]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80dc 	beq.w	8003a2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d13c      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xf6>
 800387c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003880:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d102      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xa6>
 80038a0:	4b6f      	ldr	r3, [pc, #444]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	e00f      	b.n	80038c6 <HAL_RCC_ClockConfig+0xc6>
 80038a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038ae:	fa93 f3a3 	rbit	r3, r3
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
 80038b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038c2:	4b67      	ldr	r3, [pc, #412]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80038cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038ce:	fa92 f2a2 	rbit	r2, r2
 80038d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038d6:	fab2 f282 	clz	r2, r2
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	f042 0220 	orr.w	r2, r2, #32
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	f002 021f 	and.w	r2, r2, #31
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d17b      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0f3      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d13c      	bne.n	8003978 <HAL_RCC_ClockConfig+0x178>
 80038fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800390c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	fab3 f383 	clz	r3, r3
 8003912:	b2db      	uxtb	r3, r3
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_RCC_ClockConfig+0x128>
 8003922:	4b4f      	ldr	r3, [pc, #316]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e00f      	b.n	8003948 <HAL_RCC_ClockConfig+0x148>
 8003928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
 8003936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800393a:	643b      	str	r3, [r7, #64]	; 0x40
 800393c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003944:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394c:	63ba      	str	r2, [r7, #56]	; 0x38
 800394e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003950:	fa92 f2a2 	rbit	r2, r2
 8003954:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003958:	fab2 f282 	clz	r2, r2
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f002 021f 	and.w	r2, r2, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f202 	lsl.w	r2, r1, r2
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d13a      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0b2      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
 8003978:	2302      	movs	r3, #2
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x1a0>
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e00d      	b.n	80039bc <HAL_RCC_ClockConfig+0x1bc>
 80039a0:	2302      	movs	r3, #2
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	2302      	movs	r3, #2
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2202      	movs	r2, #2
 80039be:	61ba      	str	r2, [r7, #24]
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	fa92 f2a2 	rbit	r2, r2
 80039c6:	617a      	str	r2, [r7, #20]
  return result;
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f042 0220 	orr.w	r2, r2, #32
 80039d4:	b2d2      	uxtb	r2, r2
 80039d6:	f002 021f 	and.w	r2, r2, #31
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e079      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	491a      	ldr	r1, [pc, #104]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fd fa54 	bl	8000ea8 <HAL_GetTick>
 8003a00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd fa50 	bl	8000ea8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e061      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_RCC_ClockConfig+0x260>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d214      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4906      	ldr	r1, [pc, #24]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e040      	b.n	8003ade <HAL_RCC_ClockConfig+0x2de>
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003aa2:	f000 f829 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab0:	22f0      	movs	r2, #240	; 0xf0
 8003ab2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	fa92 f2a2 	rbit	r2, r2
 8003aba:	60fa      	str	r2, [r7, #12]
  return result;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	40d3      	lsrs	r3, r2
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x2ec>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
 8003aca:	fa21 f303 	lsr.w	r3, r1, r3
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <HAL_RCC_ClockConfig+0x2f0>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_RCC_ClockConfig+0x2f4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd f9a2 	bl	8000e20 <HAL_InitTick>
  
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3778      	adds	r7, #120	; 0x78
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	080052c4 	.word	0x080052c4
 8003af0:	20000000 	.word	0x20000000
 8003af4:	20000004 	.word	0x20000004

08003af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b08b      	sub	sp, #44	; 0x2c
 8003afc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	2300      	movs	r3, #0
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d002      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x30>
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x36>
 8003b26:	e03c      	b.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b2a:	623b      	str	r3, [r7, #32]
      break;
 8003b2c:	e03c      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	fa92 f2a2 	rbit	r2, r2
 8003b40:	607a      	str	r2, [r7, #4]
  return result;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	40d3      	lsrs	r3, r2
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	60fa      	str	r2, [r7, #12]
  return result;
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	40d3      	lsrs	r3, r2
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b80:	4a0e      	ldr	r2, [pc, #56]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e004      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	623b      	str	r3, [r7, #32]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ba4:	623b      	str	r3, [r7, #32]
      break;
 8003ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	372c      	adds	r7, #44	; 0x2c
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	007a1200 	.word	0x007a1200
 8003bc0:	080052d4 	.word	0x080052d4
 8003bc4:	080052e4 	.word	0x080052e4
 8003bc8:	003d0900 	.word	0x003d0900

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b092      	sub	sp, #72	; 0x48
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80d0 	beq.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b8b      	ldr	r3, [pc, #556]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a8a      	ldr	r2, [pc, #552]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a81      	ldr	r2, [pc, #516]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fd f939 	bl	8000ea8 <HAL_GetTick>
 8003c36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7fd f935 	bl	8000ea8 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0ea      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b78      	ldr	r3, [pc, #480]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c58:	4b74      	ldr	r3, [pc, #464]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d07d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d076      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c76:	4b6d      	ldr	r3, [pc, #436]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb4:	fab3 f383 	clz	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ccc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d045      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd f8e6 	bl	8000ea8 <HAL_GetTick>
 8003cdc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fd f8e2 	bl	8000ea8 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e095      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	2302      	movs	r3, #2
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d102      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d24:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	e007      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	613a      	str	r2, [r7, #16]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	fa92 f2a2 	rbit	r2, r2
 8003d44:	60fa      	str	r2, [r7, #12]
  return result;
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	fab2 f282 	clz	r2, r2
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	f002 021f 	and.w	r2, r2, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0bd      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	492e      	ldr	r1, [pc, #184]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	4a2a      	ldr	r2, [pc, #168]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d88:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4922      	ldr	r1, [pc, #136]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f023 0210 	bic.w	r2, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	491a      	ldr	r1, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd2:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	4913      	ldr	r1, [pc, #76]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	490b      	ldr	r1, [pc, #44]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	4904      	ldr	r1, [pc, #16]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3748      	adds	r7, #72	; 0x48
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	10908100 	.word	0x10908100

08003e38 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e083      	b.n	8003f52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7f5b      	ldrb	r3, [r3, #29]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fed4 	bl	8000c08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	22ca      	movs	r2, #202	; 0xca
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2253      	movs	r2, #83	; 0x53
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f897 	bl	8003faa <RTC_EnterInitMode>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e05e      	b.n	8003f52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6899      	ldr	r1, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68d2      	ldr	r2, [r2, #12]
 8003ece:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6919      	ldr	r1, [r3, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	041a      	lsls	r2, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10e      	bne.n	8003f20 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f829 	bl	8003f5a <HAL_RTC_WaitForSynchro>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e018      	b.n	8003f52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	22ff      	movs	r2, #255	; 0xff
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f74:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003f76:	f7fc ff97 	bl	8000ea8 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003f7c:	e009      	b.n	8003f92 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f7e:	f7fc ff93 	bl	8000ea8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f8c:	d901      	bls.n	8003f92 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e007      	b.n	8003fa2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ee      	beq.n	8003f7e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d119      	bne.n	8003ff8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fce:	f7fc ff6b 	bl	8000ea8 <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fd4:	e009      	b.n	8003fea <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fd6:	f7fc ff67 	bl	8000ea8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fe4:	d901      	bls.n	8003fea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e007      	b.n	8003ffa <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e01d      	b.n	8004050 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc fe13 	bl	8000c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f000 fbc3 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_TIM_Base_Start_IT+0x50>)
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b06      	cmp	r3, #6
 8004080:	d00b      	beq.n	800409a <HAL_TIM_Base_Start_IT+0x42>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004088:	d007      	beq.n	800409a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	00010007 	.word	0x00010007

080040ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e01d      	b.n	80040fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f815 	bl	8004102 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fb6e 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d122      	bne.n	8004172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d11b      	bne.n	8004172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0202 	mvn.w	r2, #2
 8004142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb18 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 800415e:	e005      	b.n	800416c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fb0a 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb1b 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d11b      	bne.n	80041c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0204 	mvn.w	r2, #4
 8004196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 faee 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 80041b2:	e005      	b.n	80041c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fae0 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 faf1 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d122      	bne.n	800421a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d11b      	bne.n	800421a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0208 	mvn.w	r2, #8
 80041ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2204      	movs	r2, #4
 80041f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fac4 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 8004206:	e005      	b.n	8004214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fab6 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fac7 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d122      	bne.n	800426e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b10      	cmp	r3, #16
 8004234:	d11b      	bne.n	800426e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0210 	mvn.w	r2, #16
 800423e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2208      	movs	r2, #8
 8004244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa9a 	bl	800478e <HAL_TIM_IC_CaptureCallback>
 800425a:	e005      	b.n	8004268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa8c 	bl	800477a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa9d 	bl	80047a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10e      	bne.n	800429a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0201 	mvn.w	r2, #1
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fb ffb2 	bl	80001fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d10e      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b80      	cmp	r3, #128	; 0x80
 80042b4:	d107      	bne.n	80042c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 ffb3 	bl	800522c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ffa6 	bl	8005240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fa4b 	bl	80047b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b20      	cmp	r3, #32
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b20      	cmp	r3, #32
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0220 	mvn.w	r2, #32
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 ff66 	bl	8005218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800436a:	2302      	movs	r3, #2
 800436c:	e105      	b.n	800457a <HAL_TIM_PWM_ConfigChannel+0x226>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b14      	cmp	r3, #20
 8004382:	f200 80f0 	bhi.w	8004566 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043e1 	.word	0x080043e1
 8004390:	08004567 	.word	0x08004567
 8004394:	08004567 	.word	0x08004567
 8004398:	08004567 	.word	0x08004567
 800439c:	08004421 	.word	0x08004421
 80043a0:	08004567 	.word	0x08004567
 80043a4:	08004567 	.word	0x08004567
 80043a8:	08004567 	.word	0x08004567
 80043ac:	08004463 	.word	0x08004463
 80043b0:	08004567 	.word	0x08004567
 80043b4:	08004567 	.word	0x08004567
 80043b8:	08004567 	.word	0x08004567
 80043bc:	080044a3 	.word	0x080044a3
 80043c0:	08004567 	.word	0x08004567
 80043c4:	08004567 	.word	0x08004567
 80043c8:	08004567 	.word	0x08004567
 80043cc:	080044e5 	.word	0x080044e5
 80043d0:	08004567 	.word	0x08004567
 80043d4:	08004567 	.word	0x08004567
 80043d8:	08004567 	.word	0x08004567
 80043dc:	08004525 	.word	0x08004525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa68 	bl	80048bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0208 	orr.w	r2, r2, #8
 80043fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691a      	ldr	r2, [r3, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	619a      	str	r2, [r3, #24]
      break;
 800441e:	e0a3      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 face 	bl	80049c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	021a      	lsls	r2, r3, #8
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]
      break;
 8004460:	e082      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fb2d 	bl	8004ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0208 	orr.w	r2, r2, #8
 800447c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	61da      	str	r2, [r3, #28]
      break;
 80044a0:	e062      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fb8b 	bl	8004bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	021a      	lsls	r2, r3, #8
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	61da      	str	r2, [r3, #28]
      break;
 80044e2:	e041      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fbce 	bl	8004c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004522:	e021      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fc0c 	bl	8004d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004564:	e000      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8004566:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIM_ConfigClockSource+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e0a8      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x16a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d067      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0x124>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d80b      	bhi.n	80045f4 <HAL_TIM_ConfigClockSource+0x70>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d073      	beq.n	80046c8 <HAL_TIM_ConfigClockSource+0x144>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d802      	bhi.n	80045ea <HAL_TIM_ConfigClockSource+0x66>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d06f      	beq.n	80046c8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80045e8:	e078      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d06c      	beq.n	80046c8 <HAL_TIM_ConfigClockSource+0x144>
 80045ee:	2b30      	cmp	r3, #48	; 0x30
 80045f0:	d06a      	beq.n	80046c8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80045f2:	e073      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80045f4:	2b70      	cmp	r3, #112	; 0x70
 80045f6:	d00d      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0x90>
 80045f8:	2b70      	cmp	r3, #112	; 0x70
 80045fa:	d804      	bhi.n	8004606 <HAL_TIM_ConfigClockSource+0x82>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d033      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0xe4>
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d041      	beq.n	8004688 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004604:	e06a      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	d066      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x156>
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004610:	d017      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004612:	e063      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f000 fcf2 	bl	800500c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004636:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	609a      	str	r2, [r3, #8]
      break;
 8004640:	e04c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f000 fcdb 	bl	800500c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004664:	609a      	str	r2, [r3, #8]
      break;
 8004666:	e039      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	461a      	mov	r2, r3
 8004676:	f000 fc4f 	bl	8004f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2150      	movs	r1, #80	; 0x50
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fca8 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 8004686:	e029      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	461a      	mov	r2, r3
 8004696:	f000 fc6e 	bl	8004f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2160      	movs	r1, #96	; 0x60
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fc98 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 80046a6:	e019      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	461a      	mov	r2, r3
 80046b6:	f000 fc2f 	bl	8004f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2140      	movs	r1, #64	; 0x40
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fc88 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 80046c6:	e009      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 fc7f 	bl	8004fd6 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e000      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80046da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_TIM_SlaveConfigSynchro+0x18>
 800470a:	2302      	movs	r3, #2
 800470c:	e031      	b.n	8004772 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb71 	bl	8004e08 <TIM_SlaveTimer_SetConfig>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e018      	b.n	8004772 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800475e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <TIM_Base_SetConfig+0xe0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d00f      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a24      	ldr	r2, [pc, #144]	; (80048ac <TIM_Base_SetConfig+0xe0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0302 	bic.w	r3, r3, #2
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <TIM_OC1_SetConfig+0xfc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a27      	ldr	r2, [pc, #156]	; (80049bc <TIM_OC1_SetConfig+0x100>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <TIM_OC1_SetConfig+0x104>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <TIM_OC1_SetConfig+0x108>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <TIM_OC1_SetConfig+0xfc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <TIM_OC1_SetConfig+0x100>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <TIM_OC1_SetConfig+0x104>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <TIM_OC1_SetConfig+0x108>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800497c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800

080049c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f023 0210 	bic.w	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <TIM_OC2_SetConfig+0xf0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <TIM_OC2_SetConfig+0xf0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <TIM_OC2_SetConfig+0xf4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <TIM_OC2_SetConfig+0xf8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC2_SetConfig+0xfc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d113      	bne.n	8004a90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_OC3_SetConfig+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10d      	bne.n	8004b46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <TIM_OC3_SetConfig+0xec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <TIM_OC3_SetConfig+0xf0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <TIM_OC3_SetConfig+0xf4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC3_SetConfig+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d113      	bne.n	8004b8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_OC4_SetConfig+0xb8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <TIM_OC4_SetConfig+0xbc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <TIM_OC4_SetConfig+0xc0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <TIM_OC4_SetConfig+0xc4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800

08004c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC5_SetConfig+0xac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC5_SetConfig+0xb0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <TIM_OC5_SetConfig+0xb4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <TIM_OC5_SetConfig+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d109      	bne.n	8004d12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	051b      	lsls	r3, r3, #20
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <TIM_OC6_SetConfig+0xb0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <TIM_OC6_SetConfig+0xb4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <TIM_OC6_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <TIM_OC6_SetConfig+0xbc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e32:	f023 0307 	bic.w	r3, r3, #7
 8004e36:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d05c      	beq.n	8004f0c <TIM_SlaveTimer_SetConfig+0x104>
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	d806      	bhi.n	8004e64 <TIM_SlaveTimer_SetConfig+0x5c>
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d058      	beq.n	8004f0c <TIM_SlaveTimer_SetConfig+0x104>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d056      	beq.n	8004f0c <TIM_SlaveTimer_SetConfig+0x104>
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d054      	beq.n	8004f0c <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004e62:	e054      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004e64:	2b50      	cmp	r3, #80	; 0x50
 8004e66:	d03d      	beq.n	8004ee4 <TIM_SlaveTimer_SetConfig+0xdc>
 8004e68:	2b50      	cmp	r3, #80	; 0x50
 8004e6a:	d802      	bhi.n	8004e72 <TIM_SlaveTimer_SetConfig+0x6a>
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d010      	beq.n	8004e92 <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8004e70:	e04d      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8004e72:	2b60      	cmp	r3, #96	; 0x60
 8004e74:	d040      	beq.n	8004ef8 <TIM_SlaveTimer_SetConfig+0xf0>
 8004e76:	2b70      	cmp	r3, #112	; 0x70
 8004e78:	d000      	beq.n	8004e7c <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8004e7a:	e048      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68d9      	ldr	r1, [r3, #12]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f000 f8be 	bl	800500c <TIM_ETR_SetConfig>
      break;
 8004e90:	e03d      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d101      	bne.n	8004e9e <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e038      	b.n	8004f10 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6a1a      	ldr	r2, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0201 	bic.w	r2, r2, #1
 8004eb4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
      break;
 8004ee2:	e014      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	6899      	ldr	r1, [r3, #8]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f000 f811 	bl	8004f18 <TIM_TI1_ConfigInputStage>
      break;
 8004ef6:	e00a      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6899      	ldr	r1, [r3, #8]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	461a      	mov	r2, r3
 8004f06:	f000 f836 	bl	8004f76 <TIM_TI2_ConfigInputStage>
      break;
 8004f0a:	e000      	b.n	8004f0e <TIM_SlaveTimer_SetConfig+0x106>
      break;
 8004f0c:	bf00      	nop
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f023 0201 	bic.w	r2, r3, #1
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 030a 	bic.w	r3, r3, #10
 8004f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0210 	bic.w	r2, r3, #16
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f043 0307 	orr.w	r3, r3, #7
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	431a      	orrs	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4313      	orrs	r3, r2
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005060:	2302      	movs	r3, #2
 8005062:	e054      	b.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a24      	ldr	r2, [pc, #144]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d108      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005094:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a17      	ldr	r2, [pc, #92]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d009      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a11      	ldr	r2, [pc, #68]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10c      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40014000 	.word	0x40014000

08005128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005140:	2302      	movs	r3, #2
 8005142:	e060      	b.n	8005206 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d115      	bne.n	80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	051b      	lsls	r3, r3, #20
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00

08005218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <__libc_init_array>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4e0d      	ldr	r6, [pc, #52]	; (800528c <__libc_init_array+0x38>)
 8005258:	4c0d      	ldr	r4, [pc, #52]	; (8005290 <__libc_init_array+0x3c>)
 800525a:	1ba4      	subs	r4, r4, r6
 800525c:	10a4      	asrs	r4, r4, #2
 800525e:	2500      	movs	r5, #0
 8005260:	42a5      	cmp	r5, r4
 8005262:	d109      	bne.n	8005278 <__libc_init_array+0x24>
 8005264:	4e0b      	ldr	r6, [pc, #44]	; (8005294 <__libc_init_array+0x40>)
 8005266:	4c0c      	ldr	r4, [pc, #48]	; (8005298 <__libc_init_array+0x44>)
 8005268:	f000 f820 	bl	80052ac <_init>
 800526c:	1ba4      	subs	r4, r4, r6
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	2500      	movs	r5, #0
 8005272:	42a5      	cmp	r5, r4
 8005274:	d105      	bne.n	8005282 <__libc_init_array+0x2e>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800527c:	4798      	blx	r3
 800527e:	3501      	adds	r5, #1
 8005280:	e7ee      	b.n	8005260 <__libc_init_array+0xc>
 8005282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005286:	4798      	blx	r3
 8005288:	3501      	adds	r5, #1
 800528a:	e7f2      	b.n	8005272 <__libc_init_array+0x1e>
 800528c:	080052f4 	.word	0x080052f4
 8005290:	080052f4 	.word	0x080052f4
 8005294:	080052f4 	.word	0x080052f4
 8005298:	080052f8 	.word	0x080052f8

0800529c <memset>:
 800529c:	4402      	add	r2, r0
 800529e:	4603      	mov	r3, r0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d100      	bne.n	80052a6 <memset+0xa>
 80052a4:	4770      	bx	lr
 80052a6:	f803 1b01 	strb.w	r1, [r3], #1
 80052aa:	e7f9      	b.n	80052a0 <memset+0x4>

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
